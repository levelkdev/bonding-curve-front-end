{"version":3,"sources":["assets/images/dangerous.svg","provider/connectors.ts","provider/providerHooks.jsx","types.ts","provider/UncheckedJsonRpcSigner.ts","stores/actions/error.ts","stores/Provider.ts","stores/actions/actions.ts","services/ABIService.ts","utils/bignumber.ts","theme/components.js","theme/index.js","utils/helpers.tsx","utils/validators.ts","stores/TradingForm.ts","utils/token.tsx","stores/Transaction.ts","stores/BlockchainFetch.ts","stores/Token.ts","stores/AppSettings.ts","stores/Modal.ts","utils/etherscan.tsx","stores/datStore.ts","config/contracts/index.js","stores/config.ts","services/multicall/MulticallService.ts","stores/BlockchainStore.ts","stores/Root.ts","contexts/storesContext.tsx","utils/helperHooks.jsx","components/Web3ReactManager/index.tsx","utils/number.tsx","components/BondingCurveChart/pointTooltips.js","components/BondingCurveChart/BondingCurveChart.tsx","components/CurveInformation.js","components/TradeHistory.js","components/common/ActiveButton.js","components/common/InactiveButton.js","components/Buy/BuyInput.js","components/common/PendingCircle.tsx","components/Buy/BuySign.js","components/Buy/BuyUnconfirmed.js","components/Buy/BuyConfirmed.js","components/Buy/BuyForm.js","components/Enable/Enable.js","components/Enable/EnablePending.js","components/Enable/EnableContinue.js","components/Enable/EnableForm.tsx","components/Sell/SellInput.js","components/Sell/SellSign.js","components/Sell/SellUnconfirmed.js","components/Sell/SellConfirmed.js","components/Sell/SellForm.js","utils/address.tsx","components/Modal/index.js","components/AccountDetails/Copy.js","assets/images/x.svg","components/Identicon/index.js","provider/Web3Window.ts","components/AccountDetails/index.tsx","components/WalletModal/Option.js","components/WalletModal/WalletConnectData.js","components/WalletModal/PendingView.js","components/WalletModal/index.js","components/Web3PillBox.tsx","components/Web3ConnectStatus/index.jsx","components/Sell/SellDisconnected.js","components/BalanceInfo.js","components/BuySellTabs.js","components/BuySell.js","components/Footer.js","components/NavBar.js","containers/BondingCurveContainer.js","App.js","serviceWorker.js","index.tsx","assets/images/reddit.svg","assets/images/tick.svg","assets/images/ether.svg","assets/images/telegram.svg","assets/images/twitter.svg","assets/images/dxdao-circle.svg","assets/images/checkbox_758AFE.svg","assets/images/circle.svg","assets/images/metamask.png","assets/images/checkbox-circle.svg","assets/images/bolt.svg","assets/images/walletConnectIcon.svg","assets/images/dxdao-dark.svg"],"names":["module","exports","INFURA_API_KEY","process","REACT_APP_KEY_INFURA_API_KEY","ETH_NETWORKS","split","CHAIN_NAME_BY_ID","CHAIN_ID_BY_NAME","DEFAULT_ETH_CHAIN_ID","RPC_URLS","REACT_APP_SUPPORTED_NETWORK_1","REACT_APP_SUPPORTED_NETWORK_3","REACT_APP_SUPPORTED_NETWORK_4","REACT_APP_SUPPORTED_NETWORK_42","REACT_APP_SUPPORTED_NETWORK_66","web3ContextNames","supportedChains","defaultChainId","supportedChainIds","forEach","network","push","isChainIdSupported","chainId","indexOf","injected","InjectedConnector","walletconnect","WalletConnectConnector","rpc","bridge","qrcode","pollingInterval","SUPPORTED_WALLETS","INJECTED","connector","name","iconName","description","href","color","primary","METAMASK","require","WALLETCONNECT","useActiveWeb3React","useWeb3ReactCore","Web3Errors","TXEvents","UncheckedJsonRpcSigner","signer","ethers","defineReadOnly","provider","this","getAddress","transaction","sendUncheckedTransaction","then","hash","nonce","gasLimit","gasPrice","data","value","confirmations","from","wait","waitForTransaction","message","signMessage","ContractType","ERRORS","errorCodeMapping","SIGNATURE_REJECTED","isKnownErrorCode","code","codeStr","toString","getErrorByCode","UNKNOWN_ERROR","sendAction","params","contract","action","sender","overrides","console","debug","preLog","promiEvent","PromiEvent","methods","send","once","emit","TX_HASH","receipt","RECEIPT","confNumber","CONFIRMATION","on","error","TX_ERROR","INVARIANT","FINALLY","catch","e","schema","ERC20","abi","BondedToken","BondingCurve","BondingCurveEther","RewardsDistributor","StaticCurveLogic","DecentralizedAutonomousTrust","Multicall","ABIService","abiMap","contractType","ProviderStore","rootStore","web3Contexts","chainData","currentBlockNumber","blockNumber","getCurrentBlockNumber","newBlockNumber","oldBlockNumber","account","activeAccount","library","getSigner","web3React","type","address","signerAccount","eth","Contract","context","getActiveWeb3React","getBlock","blockData","date","Date","timestamp","moment","format","Error","ContextNotFound","observable","a","transactionStore","checkPendingTransactions","contractAddress","BlockchainActionNoAccount","BlockchainActionNoChainId","getContract","addTransactionRecord","BigNumber","config","EXPONENTIAL_AT","ROUNDING_MODE","ROUND_DOWN","DECIMAL_PLACES","styled","button","attrs","warning","theme","backgroundColor","salmonRed","royalBlue","white","darken","concreteGray","silverGray","Link","target","rel","rotate","input","textColor","inputBackground","chaliceGray","keyframes","Spinner","img","SUPPORTED_THEMES","DARK","LIGHT","MEDIA_WIDTHS","upToSmall","upToMedium","upToLarge","mediaWidthTemplates","Object","keys","reduce","accumulator","size","css","ThemeProvider","children","appSettingsStore","useStores","root","darkMode","themeURL","themeName","toUpperCase","checkSupportedTheme","windowLocation","q","search","match","RegExp","getQueryParam","window","location","themeToRender","useEffect","setDarkMode","black","greyText","modalBackground","placeholderGray","shadowColor","mercuryGray","doveGray","mineshaftGray","activeGray","buttonOutlineGrey","tokenRowHover","charcoalBlack","zumthorBlue","malibuBlue","loadingBlue","wisteriaPurple","pizazzOrange","warningYellow","bodyText","connectedGreen","metaMaskOrange","textHover","buttonFaded","mediaWidth","flexColumnNoWrap","flexRowNoWrap","GlobalStyle","createGlobalStyle","MAX_UINT","utils","bigNumberify","constants","MaxUint256","bnum","val","scale","decimalPlaces","scalePow","scaleMul","pow","times","str","ValidationStatus","TransactionState","validateTokenValue","options","ValidationRules","isEmpty","EMPTY","substr","isFloat","NOT_FLOAT","parseFloat","ZERO","isPositive","NEGATIVE","limitDigits","some","test","MAX_DIGITS_EXCEEDED","maxBalance","gt","INSUFFICIENT_BALANCE","minValue","lt","MIN_VALUE_NOT_EXCEEDED","VALID","denormalizeBalance","normalizedBalance","decimals","normalizeBalance","amount","formatNumberValue","displayPrecision","truncateAt","roundDown","eq","toFixed","result","ROUND_UP","padToDecimalPlaces","length","substring","formatBalance","balance","precision","minDecimals","zerosToPad","pad","i","ConfirmationFlags","FetchCode","TradingFormStore","buyingState","NONE","sellingState","enableDXDState","payAmount","sellAmount","rewardForSell","price","buyPrice","sellPrice","newActiveTab","activeTab","buy","previousBuy","sell","previousSell","tokenStore","configStore","allowance","getAllowance","getTokenAddress","collateralBalance","getEtherBalance","dxdBalance","getBalance","buyReturn","weiValue","buyAmount","inputValueFresh","totalPaid","providerStore","isFresh","setBuyPrice","pricePerToken","setPayAmount","tokensIssued","sellReturn","tokensSold","setSellPrice","returnPerToken","setRewardForSell","currencyReturned","resetBuyAmount","newState","state","number","Number","formatNumber","confirmationFlag","enableTKNState","trades","recentTrades","recentTradesSet","BlockchainFetchStore","datStore","tradingStore","getMinInvestment","fetchBuyReturn","handleBuyReturn","accountSwitched","active","multicallService","blockchainStore","activeDATAddress","getBlockNumber","setCurrentBlockNumber","resetTransactionStates","addCall","method","getMulticallAddress","getDATOwner","fetchRecentTrades","setRecentTrades","areAllStaticParamsLoaded","addCalls","genStaticParamCalls","baseDatCall","calls","activeCalls","rawCalls","activeCallsRaw","executeCalls","response","results","updates","reduceMulticall","updateStore","hasMaxApproval","setEnableDXDState","initialLoadComplete","APPROVED","refreshBuyFormPreview","resetActiveCalls","forceFetch","undefined","TokenStore","tokenAddress","spender","gte","div","entry","has","get","sendTransaction","helpers","parseEther","TransactionStore","txRecords","filter","isTxPending","currentBlock","isStale","getTransactionReceipt","blockNumberChecked","SUCCESS","txHash","record","records","find","txRecord","AppSettingsStore","activePoolAddress","poolAddress","visible","ModalStore","walletModalVisible","ETHERSCAN_PREFIXES","1","3","4","5","42","getEtherscanLink","networkId","prefix","EventType","DatState","etherscanUrl","DatStore","getBuySlopeNum","getBuySlopeDen","getInitGoal","getPreMintedTokens","getBurnedSupply","getInvestmentReserveBasisPoints","getState","STATE_INIT","STATE_RUN","STATE_CANCEL","STATE_CLOSE","getCachedValue","toNumber","getDATinfo","control","buySlopeNum","buySlopeDen","baseCall","currencyValue","dat","getDatContract","estimateBuyValue","call","quantityToSell","estimateSellValue","numToGet","fromBlock","toBlock","getPastEvents","buyEvents","reverse","slice","Promise","all","map","buyEvent","isBuyEventValid","parseBuyEvent","sellEvents","sellEvent","isSellEventValid","parseSellEvent","returnValues","_fairValue","totalPrice","_currencyValue","getBlockTime","blockTime","event","Buy","transactionHash","totalReceived","Sell","tokenSupply","reserveBalance","initGoal","burnedSupply","preMintedTokens","lte","getKickstarterPrice","plus","minus","getReserveBalance","getSellPriceAtSupplyWithReserve","totalSupply","getTotalSupply","getSellPriceAtSupply","supply","getBuyPriceAtSupply","tokensLeftInKickstarter","tokensAfterKickstarterEnds","sqrt","tokensToSell","reserve","minInvestment","spotTokens","getEventsBetweenBlocks","self","fetchBuyEvents","fetchSellEvents","combinedTrades","concat","tradesToReturn","startBlock","latestBlock","sort","b","to","minTokensBought","minCurrencyReturned","KOVAN_CONTRACTS","RINKEBY_CONTRACTS","MAINNET_CONTRACTS","DEVELOPMENT_CONFIG","getConfig","ConfigStore","multicall","activeDatAddress","activeWeb3","getActiveChainName","DAT","DATinfo","MulticallService","multi","aggregate","returnData","addContractCall","abiService","iface","Interface","getAbi","encoded","functions","encode","decode","BlockchainStore","store","index","decodeCall","lastFetched","entries","oldEntry","RootStore","blockchainFetchStore","modalStore","asyncSetup","storesContext","React","createContext","useContext","usePrevious","ref","useRef","current","Web3ReactManager","web3ContextInjected","useWeb3React","networkActive","networkError","setWeb3Context","triedEager","activate","useState","tried","setTried","isAuthorized","isMobile","ethereum","useEagerConnect","suppress","handleChainChanged","handleAccountsChanged","accounts","handleNetworkChanged","removeListener","useInactiveListener","setFetchLoop","callback","delay","savedCallback","id","setInterval","clearInterval","useInterval","prevAccount","BlurWrapper","OverBlurModal","className","roundUpToScale","placesValue","numDigits","integerValue","shiftedBy","pointTooltips","tooltip","tooltipEl","document","getElementById","createElement","innerHTML","_chart","canvas","parentNode","appendChild","opacity","classList","remove","yAlign","add","body","bodyLines","bodyItem","lines","style","innerHtml","colors","labelColors","borderColor","querySelector","positionY","offsetTop","positionX","offsetLeft","position","left","caretX","top","caretY","fontFamily","_bodyFontFamily","fontSize","bodyFontSize","fontStyle","fontWeight","padding","background","border","boxSizing","boxShadow","borderRadius","PointType","ChartPanelWrapper","ChartHeaderWrapper","ChartHeaderFullElement","ChartHeaderTopElement","ChartHeaderBottomElement","PriceBottomElement","ChartWrapper","BondingCurveChart","observer","currentBuyPrice","currentSellPrice","kickstarterPrice","totalSupplyWithoutPremint","chartData","chartOptions","staticParamsLoaded","totalSupplyWithPremint","investmentReserveBasisPoints","currrentDatState","isBuy","providerActive","requiredDataLoaded","getSellPrice","getBuyPrice","generateLine","label","dashed","bgColor","fill","datalabels","display","borderWidth","pointRadius","point","dataset","dataIndex","CURRENT_BUY_PRICE","CURRENT_SELL_PRICE","borderDash","lineTension","balanceToNumber","valueToNumber","supplyIncrease","futureSupply","datasets","hasInitGoal","hasExceededInitGoal","isRunPhase","futurePrice","hasActiveInput","maxSupplyToShow","maxBuyPriceToShow","reserveBalanceAtMaxSellPriceToShow","maxSellPriceToShow","points","zero","x","y","kickStarterStart","KICKSTARTER_START","kickstarterEnd","KICKSTARTER_END","curveStart","CURVE_START","maxBuySupplyToShow","MAX_BUY_SUPPLY_TO_SHOW","maxSellSupplyToShow","MAX_SELL_SUPPLY_TO_SHOW","FUTURE_SUPPLY","newMaxSupplyToShow","newMaxPriceToShow","pointBackgroundColor","pointBorderColor","tooltips","enabled","custom","tooltipItem","callbacks","toDisplay","datasetIndex","yLabel","maintainAspectRatio","legend","scales","xAxes","gridLines","scaleLabel","labelString","ticks","beginAtZero","max","major","fontColor","yAxes","suggestedMax","generateChart","renderInitPhaseChartHeader","renderRunPhaseChartHeader","isInitPhase","Fragment","alt","src","CurveInformationWrapper","CurveInformationHeaderWrapper","CurveInformationElement","CurveInformationTopElement","CurveInformationBottomElement","CurveInformation","daoFunds","getDaoFunds","fromWei","TradingHistoryWrapper","TradeHistoryTitle","TableHeadersWrapper","TableHeader","props","width","TableRowsWrapper","TableRow","TableCell","align","weight","TradingHistory","collateralType","trade","key","Button","ActiveButton","onClick","InactiveButton","FormWrapper","InfoRow","FormInfoText","FormContent","InputColumn","MessageError","BuyInput","buyInputStatus","setBuyInputStatus","formatBuyPrice","disconnectedError","txFailedError","datState","minimumInvestment","buyDisabled","validateNumber","ETHBalance","replace","buyInputStatusFetch","setBuyAmount","placeholder","onChange","marginBottom","SIGNING_TX","UNCONFIRMED","setPreviousBuy","CONFIRMED","txerror","FAILED","SpinningCircle","height","PendingCircle","SignTransaction","BuySign","formatBuyAmount","Unconfirmed","BuyUnconfirmed","Confirmed","CheckboxContainer","BuyConfirmed","resetBuyForm","ContentStates","BuyForm","Content","contentState","contentCount","ContentWrapper","CircleContainer","Info","EnableButton","Enable","tokenType","approveMax","Ellipses","Title","SubTitle","EnablePendingButton","EnablePending","subtitleText","Checkbox","Status","EnableContinue","EnableForm","SellInput","sellInputStatus","setSellInputStatus","formatSellPrice","sellText","setSellAmount","DXDBalance","sellInputStatusFetch","fetchSellReturn","handleSellReturn","setPreviousSell","SellSign","formatSellAmount","SellUnconfirmed","SellConfirmed","resetSellForm","SellForm","count","isAddress","toLowerCase","AnimatedDialogOverlay","animated","DialogOverlay","StyledDialogOverlay","suppressClassNameWarning","mobile","rest","StyledDialogContent","minHeight","maxHeight","isOpen","slideInAnimation","aria-label","HiddenCloseButton","Modal","onDismiss","initialFocusRef","transitions","useTransition","duration","enter","leave","useSpring","xy","set","bind","useGesture","onDrag","velocity","down","movement","mass","tension","friction","direction","item","transform","interpolate","hidden","CopyIcon","TransactionStatusText","span","CopyHelper","toCopy","timeout","isCopied","setIsCopied","staticCopy","useCallback","text","didCopy","copy","hide","setTimeout","clearTimeout","useCopyClipboard","setCopied","_extends","assign","arguments","source","prototype","hasOwnProperty","apply","_objectWithoutProperties","excluded","sourceKeys","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","x1","y1","x2","y2","_ref","svgRef","title","viewBox","stroke","strokeWidth","strokeLinecap","strokeLinejoin","ForwardRef","forwardRef","StyledIdenticon","Identicon","Jazzicon","parseInt","web3Window","OptionButton","HeaderRow","UpperSection","InfoCard","AccountGroupingRow","AccountSection","YourAccount","GreenCircle","CircleWrapper","AccountControl","hasENS","isENS","ConnectButtonRow","StyledLink","CloseIcon","CloseColor","Close","WalletName","IconWrapper","WalletAction","AccountDetails","toggleWalletModal","ENSName","openOptions","isMetaMask","k","formatConnectorName","close","web3","clickable","transparentize","OptionCard","OptionCardLeft","OptionCardClickable","disabled","HeaderText","SubHeader","Option","link","header","subheader","icon","content","QRCodeWrapper","WalletConnectData","uri","fgColor","PendingSection","SpinnerWrapper","LoadingMessage","ErrorGroup","ErrorButton","LoadingWrapper","PendingView","setPendingError","tryActivation","isMetamask","Circle","option","Wrapper","Blurb","OptionGrid","HoverText","WALLET_VIEWS","WalletModal","pendingTransactions","confirmedTransactions","walletView","setWalletView","pendingWallet","setPendingWallet","pendingError","connectionErrorMessage","setConnectionErrorMessage","walletModalOpen","setUri","activateWC","URI_AVAILABLE","off","activePrevious","connectorPrevious","userSelect","mobileOnly","getOptions","Pill","Web3PillBox","WrongNetworkButton","Web3ConnectStatus","ConnectButton","wide","pending","confirmed","getPendingTransactions","getConfirmedTransactions","lineHeight","digits","shortenAddress","getWeb3Status","DisconnectedMessage","SellDisconnected","CryptoInfoWrapper","LogoAndText","LogoText","BalanceInfo","ETHBalanceDisplay","DXDBalanceDisplay","TabWrapper","ActiveTab","InactiveTab","BuySellTabs","TabButton","tabType","setActiveTab","BuySellWrapper","BuySell","incrementTKN","incrementDXD","CurrentForm","FooterWrapper","LeftFooter","RighFooter","FooterItem","FooterDivider","LogoWrapper","FooterLogo","Footer","proxyContract","getNetworkConfig","implementationAddress","token","holder","etherscanToken","NavWrapper","LeftNav","MenuItem","NavBar","NavItem","withRouter","route","history","margin","letterSpacing","BondingCurveWrapper","AlertWrapper","red","AlertText","DangerIcon","TradeHistory","App","exact","path","BondingCurveContainer","Boolean","hostname","Web3ProviderInjected","createWeb3ReactRoot","Root","getLibrary","Web3","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"u9BAAAA,EAAOC,QAAU,IAA0B,8B,uPCG9BC,EAAiBC,iLAAYC,6BAC7BC,EAAeF,kBAAmCG,MAAM,KAGxDC,EAAmB,CAC9B,EAAK,UACL,EAAK,UACL,EAAK,UACL,GAAM,QACN,KAAQ,eAGGC,EAAmB,CAC9B,QAAW,EACX,QAAW,EACX,QAAW,EACX,MAAS,GACT,YAAe,MAIJC,GADsBJ,EAAa,GACZG,EAAiBH,EAAa,KAErDK,EAAW,CACtB,EAAKP,iLAAYQ,+BAAiC,gCAAgCT,EAClF,EAAKC,iLAAYS,+BAAiC,gCAAgCV,EAClF,EAAKC,iLAAYU,+BAAiC,gCAAgCX,EAClF,GAAMC,iLAAYW,gCAAkC,8BAA8BZ,EAClF,GAAMC,iLAAYY,gCAAkC,0BAGzCC,EACD,WAOCC,EAAkBZ,EAClBa,EAAiBV,EAAiBH,EAAa,IACxDc,EAAoB,GACxBF,EAAgBG,SAAQ,SAACC,GAAD,OAAaF,EAAkBG,KAAKd,EAAiBa,OAGtE,IAAME,EAAqB,SAACC,GAC/B,OAAOP,EAAgBQ,QAAQlB,EAAiBiB,KAAa,GAGpDE,EAAW,IAAIC,IAAkB,CAC1CR,kBAAmBA,IAGVS,EAAgB,IAAIC,IAAuB,CACtDC,IAAI,eACDZ,EAAkBR,EAASQ,IAE9Ba,OAAQ,mCACRC,QAAQ,EACRC,gBAtBuB,MA8BZC,EAAoB,CAC7BC,SAAU,CACNC,UAAWV,EACXW,KAAM,WACNC,SAAU,kBACVC,YAAa,0BACbC,KAAM,KACNC,MAAO,UACPC,SAAS,GAEbC,SAAU,CACNP,UAAWV,EACXW,KAAM,WACNC,SAAUM,EAAQ,QAClBL,YAAa,iCACbC,KAAM,KACNC,MAAO,WAEXI,cAAe,CACXT,UAAWR,EACXS,KAAM,gBACNC,SAAUM,EAAQ,QAClBL,YAAa,uBACbC,KAAM,KACNC,MAAO,Y,wBCrFR,SAASK,IACZ,OAAOC,YAAiB/B,G,IC+ChBgC,EAKAC,E,yJClBGC,E,kDAvCX,WAAYC,GAAS,IAAD,8BAChB,gBAHJA,YAEoB,EAEhBC,QAAaC,eAAb,eAAkC,SAAUF,GAC5CC,QAAaC,eAAb,eAAkC,WAAYF,EAAOG,UAHrC,E,yDAOhB,OAAOC,KAAKJ,OAAOK,e,sCAGPC,GAAc,IAAD,OACzB,OAAOF,KAAKJ,OACPO,yBAAyBD,GACzBE,MAAK,SAACC,GACH,MAAO,CACHA,KAAMA,EACNC,MAAO,KACPC,SAAU,KACVC,SAAU,KACVC,KAAM,KACNC,MAAO,KACPzC,QAAS,KACT0C,cAAe,EACfC,KAAM,KACNC,KAAM,SAACF,GACH,OAAO,EAAKf,OAAOG,SAASe,mBACxBT,EACAM,U,kCAOZI,GACR,OAAOf,KAAKJ,OAAOoB,YAAYD,O,GAtCFlB,U,kCDuDzBJ,O,iCAAAA,I,4CAAAA,M,cAKAC,K,iBAAAA,E,kBAAAA,E,4BAAAA,E,mBAAAA,E,kBAAAA,E,uBAAAA,M,KE5DZ,I,kCCUYuB,GAePC,GDzBCC,GAAmB,CACrB,KAAQ1B,EAAW2B,oBAGVC,GAAmB,SAACC,GAC7B,IAAMC,EAAUD,EAAKE,WACrB,QAASL,GAAiBI,IAGjBE,GAAiB,SAACH,GAC3B,IAAMC,EAAUD,EAAKE,WACrB,OAAIH,GAAiBC,GACVH,GAAiBI,GAEjB9B,EAAWiC,e,wBEgBbC,GAAa,SAACC,GAA4C,IAC3DC,EAA8CD,EAA9CC,SAAUC,EAAoCF,EAApCE,OAAQC,EAA4BH,EAA5BG,OAAQtB,EAAoBmB,EAApBnB,KAAMuB,EAAcJ,EAAdI,WAX7B,SAACJ,GACZK,QAAQC,MAAR,0BAAiCN,EAAOE,OAAxC,KAAmD,CAC/CD,SAAUD,EAAOC,SACjBC,OAAQF,EAAOE,OACfC,OAAQH,EAAOG,OACftB,KAAMmB,EAAOnB,KACbuB,UAAWJ,EAAOI,YAMtBG,CAAOP,GAEP,IAAMQ,EAAa,IAAIC,MAAgB,WAAO,IAAD,GACzC,EAAAR,EAASS,SAAQR,GAAjB,oBAA4BrB,IACvB8B,KADL,aACY3B,KAAMmB,GAAWC,IACxBQ,KAAK,mBAAmB,SAACnC,GACtB+B,EAAWK,KAAK/C,EAASgD,QAASrC,GAClC4B,QAAQC,MAAMxC,EAASgD,QAASrC,MAEnCmC,KAAK,WAAW,SAACG,GACdP,EAAWK,KAAK/C,EAASkD,QAASD,GAClCV,QAAQC,MAAMxC,EAASkD,QAASD,MAEnCH,KAAK,gBAAgB,SAACK,EAAYF,GAC/BP,EAAWK,KAAK/C,EAASoD,aAAc,CACnCD,aACAF,YAEJV,QAAQC,MAAMxC,EAASoD,aAAc,CACjCD,aACAF,eAGPI,GAAG,SAAS,SAACC,GACVf,QAAQC,MAAMc,EAAM1B,MAChB0B,EAAM1B,MAAQD,GAAiB2B,EAAM1B,OACrCc,EAAWK,KACP/C,EAASuD,SACTxB,GAAeuB,EAAM1B,OAEzBW,QAAQC,MAAMxC,EAASuD,SAAUxB,GAAeuB,EAAM1B,SAEtDc,EAAWK,KAAK/C,EAASwD,UAAWF,GACpCf,QAAQC,MAAMxC,EAASwD,UAAWF,OAGzC5C,MAAK,SAACuC,GACHP,EAAWK,KAAK/C,EAASyD,QAASR,GAClCV,QAAQC,MAAMxC,EAASyD,QAASR,MAEnCS,OAAM,SAACC,GACJpB,QAAQC,MAAM,WAAYmB,SAItC,OAAOjB,G,wBC3EEkB,GAAS,CAClBC,MAAOlE,EAAQ,QAAsBmE,IACrCC,YAAapE,EAAQ,QAAsBmE,IAC3CE,aAAcrE,EAAQ,QAAsBmE,IAC5CG,kBAAmBtE,EAAQ,QAAsBmE,IACjDI,mBAAoBvE,EAAQ,QAAsBmE,IAClDK,iBAAkBxE,EAAQ,QAAsBmE,IAChDM,6BAA8BzE,EAAQ,QACjCmE,IACLO,UAAW1E,EAAQ,QAClBmE,KAGgBQ,G,iDACjBC,Y,qDAEOC,GACH,OAAOZ,GAAOY,O,eFTVjD,K,cAAAA,E,0BAAAA,E,4BAAAA,E,sCAAAA,E,wCAAAA,E,oCAAAA,E,4DAAAA,E,uBAAAA,Q,cAePC,K,mEAAAA,E,qDAAAA,E,oFAAAA,E,oFAAAA,E,mFAAAA,Q,SAQgBiD,I,aAajB,WAAYC,GAAY,+aAFxBA,eAEuB,kGACnBpE,KAAKoE,UAAYA,EACjBpE,KAAKqE,aAAe,GACpBrE,KAAKsE,UAAY,CAAEC,oBAAqB,G,oDAGpCC,GACJ,OAAOA,IAAgBxE,KAAKyE,0B,gCAGtBC,EAAwBC,GAC9B,OAAOD,EAAiBC,I,mCAGfH,GACT,OAAOA,EAAcxE,KAAKsE,UAAUC,qB,8CAIpC,OAAOvE,KAAKsE,UAAUC,qB,4CAGIC,GAC1BxE,KAAKsE,UAAUC,mBAAqBC,I,uCAGfI,GACrB5E,KAAK6E,cAAgBD,I,0CAiBLE,EAASF,GAOzB,OANA3C,QAAQC,MAAM,uBAAwB,CAClC4C,UACAF,UACAhF,OAAQkF,EAAQC,UAAUH,KAGvBA,EACD,IAAIjF,EAAuBmF,EAAQC,UAAUH,IAC7CE,I,kCAINE,EACAC,EACAC,EACAC,GACgB,IACRL,EAAYE,EAAZF,QAER,OAAIK,EACO,IAAIL,EAAQM,IAAIC,SAAS/B,GAAO2B,GAAOC,EAAS,CACnDtE,KAAMuE,IAIP,IAAIL,EAAQM,IAAIC,SAAS/B,GAAO2B,GAAOC,K,4EAI/BV,G,kFACTc,EAAUtF,KAAKuF,qB,SACGD,EAAQR,QAAQM,IAAII,SAAShB,G,cAA/CiB,E,OACAC,EAAO,IAAIC,KAA2B,IAAtBF,EAAUG,W,kBACzBC,KAAOH,GAAMI,OAAO,kB,mLAKZtB,G,gFACTc,EAAUtF,KAAKuF,qB,SACGD,EAAQR,QAAQM,IAAII,SAAShB,G,cAA/CiB,E,yBACCA,EAAUpF,M,kJAMjB,OAFwBL,KAAKqE,aAAa5G,K,mCAKjCqB,GACT,IAAKkB,KAAKqE,aAAavF,GACnB,MAAM,IAAIiH,MAAM7E,GAAO8E,iBAE3B,OAAOhG,KAAKqE,aAAavF,K,qCAGNA,EAAMwG,GACzBrD,QAAQC,MAAM,mBAAoBpD,EAAMwG,GACxCtF,KAAKqE,aAAavF,GAAQwG,M,2CApH7BW,K,oGACAA,K,0GACAA,K,wGACAA,K,wGACAA,K,8GACAA,K,sGACAA,K,0GACAA,K,4GACAA,K,0GACAA,K,+GAyBAnE,K,8HAIAA,K,mIAIAA,K,2HAAiC,WAC9BkD,EACAJ,GAF8B,eAAAsB,EAAA,sDAItBC,EAAqB,EAAK/B,UAA1B+B,iBAERlE,QAAQC,MAAM,uCAAwC,CAClD0C,YAGJuB,EAAiBC,yBAAyBpB,EAAWJ,GAVvB,2C,qGAwEjC9C,K,yHAKAA,K,oFAAyB,SACtBkD,EACAd,EACAmC,EACAvE,EACAF,EACAI,GACmB,IACXmE,EAAqB,EAAK/B,UAA1B+B,iBACAlI,EAAqB+G,EAArB/G,QAAS2G,EAAYI,EAAZJ,QAIjB,GAFA5C,EAAYA,GAAwB,IAE/B4C,EACD,MAAM,IAAImB,MAAM7E,GAAOoF,2BAG3B,IAAKrI,EACD,MAAM,IAAI8H,MAAM7E,GAAOqF,2BAG3B,IAAM1E,EAAW,EAAK2E,YAClBxB,EACAd,EACAmC,EACAzB,GAaJ,OAViBjD,GAAW,CACxBE,WACAC,SACAC,OAAQ6C,EACRnE,KAAMmB,EACNI,cACDe,GAAGrD,EAASgD,SAAS,SAACrC,GACrB8F,EAAiBM,qBAAqB7B,EAASvE,U,qDG5L3DqG,aAAUC,OAAO,CACbC,eAAgB,EAAE,IAAK,KACvBC,cAAeH,aAAUI,WACzBC,eAAgB,K,qkDCFEC,IAAOC,OAAOC,OAAM,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,MAAZ,MAAyB,CAC/DC,gBAAiBF,EAAUC,EAAME,UAAYF,EAAMG,aADjCP,CAAH,MAUK,qBAAGK,mBACd,qBAAGD,MAAkBI,SAKN,gBAAGH,EAAH,EAAGA,gBAAH,OAChBI,aAAO,IAAMJ,MAIG,gBAAGA,EAAH,EAAGA,gBAAH,OAChBI,aAAO,GAAKJ,MAII,qBAAGD,MAAkBM,gBAChC,qBAAGN,MAAkBO,cA3B/B,IAgCMC,GAAOZ,IAAOd,EAAEgB,MAAM,CAC/BW,OAAQ,SACRC,IAAK,uBAFWd,CAAH,MAyCXe,IAvByBf,IAAOgB,MAAV,MACf,qBAAGZ,MAAkBa,aAMV,qBAAGb,MAAkBc,mBAY5B,qBAAGd,MAAkBe,eAIvBC,YAAH,OASCC,GAAUrB,IAAOsB,IAAV,KACAP,I,m7BC3Eb,IAAMQ,GAAmB,CAC5BC,KAAM,OACNC,MAAO,SAGLC,GAAe,CACjBC,UAAW,IACXC,WAAY,IACZC,UAAW,MAGTC,GAAsBC,OAAOC,KAAKN,IAAcO,QAClD,SAACC,EAAaC,GAMV,OALAD,EAAYC,GAAQ,kBAAaC,YAAZ,KACIV,GAAaS,GAC5BC,IAAG,WAAH,eAGHF,IAEX,IAGE1B,GAAQ,UAGC,SAAS6B,GAAT,GAAsC,IAAbC,EAAY,EAAZA,SAExBC,EACRC,KADAC,KAAQF,iBAGNG,EAAWH,EAAiBG,SAE5BC,ECoBH,SAA6BC,GAChC,GAAIA,GAAaA,EAAUC,gBAAiBtB,GACxC,OAAOqB,EAAUC,cAErB,OAAO,KDxBUC,CCad,SAAuBC,EAAgBjL,GAC1C,IAAIkL,EAAID,EAAeE,OAAOC,MAC1B,IAAIC,OAAO,OAASrL,EAAO,eAE/B,OAAOkL,GAAKA,EAAE,GDhBVI,CAAcC,OAAOC,SAAU,UAE7BC,EAAgBZ,EAChBA,EAASE,gBAAkBtB,GAAiBC,MAExCmB,EAASE,gBAAkBtB,GAAiBE,OAE5CiB,EACJA,EAKN,OAHAc,qBAAU,WACNjB,EAAiBkB,YAAYF,KAC9B,CAAChB,EAAkBgB,IAElB,kBAAC,IAAD,CAA+BnD,MAAOA,GAAMmD,IACvCjB,GAKb,IAAMlC,GAAQ,SAARA,EAASsC,GAAD,MAAe,CACzBlC,SACAkD,MAhCU,UAiCVzC,UAAWyB,EAAWlC,GAAQ,UAC9BmD,SAAUjB,EAAWlC,GAAQ,UAG7BH,gBAAiBqC,EAAW,UAAYlC,GAExCoD,gBAAiBlB,EAAW,kBAAoB,kBAChDxB,gBAAiBwB,EAAW,UAAYlC,GACxCqD,gBAAiBnB,EAAW,UAAY,UACxCoB,YAAapB,EAAW,OAAS,UAGjChC,aAAcgC,EAAW,UAAY,UACrCqB,YAAarB,EAAW,UAAY,UACpC/B,WAAY+B,EAAW,UAAY,UACnCvB,YAAauB,EAAW,UAAY,UACpCsB,SAAUtB,EAAW,UAAY,UACjCuB,cAAevB,EAAW,UAAY,UACtCwB,WAAYxB,EAAW,UAAY,UACnCyB,kBAAmBzB,EAAW,UAAY,UAC1C0B,cAAe1B,EAAW,UAAY,UAGtC2B,cAAe3B,EAAW,UAAY,UAEtC4B,YAAa5B,EAAW,UAAY,UAEpC6B,WAAY7B,EAAW,UAAY,UAEnCnC,UAAWmC,EAAW,UAAY,UAClC8B,YAAwB,UAGxBC,eAAgB,UAEhBnE,UAAW,UAEXoE,aAAc,UAEdC,cAAe,UAEfC,SAAU,UAEVC,eAAgB,UAGhBC,eAAgB,UAGhBC,UAAWrC,EAAWtC,EAAMwE,SAAWxE,EAAM4D,SAG7CgB,YAAatC,EAAW,UAAY,UAGpCuC,WAAYnD,GAEZoD,iBAAkB9C,YAAF,MAIhB+C,cAAe/C,YAAF,QAMJgD,GAAcC,YAAH,MAUX,qBAAGjF,MAAkBa,aACV,qBAAGb,MAAkBC,mBC1IhCiF,IADUC,QAAMC,aAAa,cAClBD,QAAMC,aAAa3M,SAAO4M,UAAUC,aAGrD,SAASC,GACZC,GAEA,OAAO,IAAIlG,aAAUkG,EAAIpL,YAGtB,SAASqL,GAAM7E,EAAkB8E,GACpC,IAAMC,EAAW,IAAIrG,aAAUoG,EAActL,YACvCwL,EAAW,IAAItG,aAAU,IAAIuG,IAAIF,GACvC,OAAO/E,EAAMkF,MAAMF,GAiChB,SAASG,GAAIzM,GAChB,OAAOA,EAAMc,WAiBV,ICnEK4L,I,SAAAA,K,cAAAA,E,cAAAA,E,YAAAA,E,sBAAAA,E,oBAAAA,E,4CAAAA,E,mDAAAA,E,8CAAAA,E,4CAAAA,E,mDAAAA,Q,KAaL,I,yDCHKC,GDGCC,GAAqB,SAC9B5M,EACA6M,GAMA,GAAIC,mBAAgBC,QAAQ/M,GACxB,OAAO0M,GAAiBM,MAM5B,GAH2B,MAAvBhN,EAAMiN,OAAO,EAAG,KAChBjN,EAAQ,IAAMA,IAEb8M,mBAAgBI,QAAQlN,GACzB,OAAO0M,GAAiBS,UAG5B,GAAqC,MAAjCC,WAAWpN,GAAOc,WAClB,OAAO4L,GAAiBW,KAG5B,IAAKP,mBAAgBQ,WAAWtN,GAC5B,OAAO0M,GAAiBa,SAK5B,GAAIV,GAAWA,EAAQW,YAAa,CAIhC,IAFyB,CAAC,KAAM,YAAa,sBAEvBC,MAAK,SAACjI,GAAD,OAAOA,EAAEkI,KAAK1N,MACrC,OAAO0M,GAAiBiB,oBAIhC,GAAId,GAAWA,EAAQe,YACH3B,GAAKjM,GACT6N,GAAGhB,EAAQe,YACnB,OAAOlB,GAAiBoB,qBAIhC,GAAIjB,GAAWA,EAAQkB,UACH9B,GAAKjM,GACTgO,GAAGnB,EAAQkB,UACnB,OAAOrB,GAAiBuB,uBAIhC,OAAOvB,GAAiBwB,OEjEfC,GAAqB,SAC9BC,GAEa,IADbC,EACY,uDHEsB,GGDlC,OAAOlC,GAAMF,GAAKmC,GAAoBC,IAI7BC,GAAmB,SAC5BC,GAEa,IADbF,EACY,uDHNsB,GGOlC,OAAOlC,GAAMF,GAAKsC,IAAUF,IAGnBG,GAAoB,SAC7BJ,GAIU,IAHVK,EAGS,uDAHkB,EAC3BC,EAES,uCADTC,IACS,yDACT,GAAIP,EAAkBQ,GAAG,GACrB,OAAO3C,GAAK,GAAG4C,QAAQJ,GAG3B,IAAIK,EAAS7C,GAAKmC,GACbhC,cAAcqC,EAAkBE,EAAY3I,aAAUI,WAAaJ,aAAU+I,UAC7EjO,WAIL,OAFAgO,EAASE,GAAmBF,EAAQL,GAEhCC,GAAcI,EAAOG,OAASP,EACvBI,EAAOI,UAAU,EAAG,IAAM,MAE1BJ,GAIFK,GAAgB,SACzBC,GAIU,IAHVf,EAGS,uDAHU,GACnBgB,EAES,uDAFW,EACpBV,IACS,yDACT,GAAIS,EAAQR,GAAG,GACX,OAAO3C,GAAK,GAAG4C,QAAQQ,GAG3B,IAAMP,EAAS3C,GAAMiD,GAAUf,GAC1BjC,cAAciD,EAAWV,EAAY3I,aAAUI,WAAaJ,aAAU+I,UACtEjO,WAEL,OAAOkO,GAAmBF,EAAQO,IAGzBL,GAAqB,SAC9BhP,EACAsP,GAEA,IAAMjT,EAAQ2D,EAAM3D,MAAM,KACpBkT,EAAalT,EAAM,GAAKiT,EAAcjT,EAAM,GAAG4S,OAASK,EAE9D,GAAIC,EAAa,EAAG,CAChB,IAAIC,EAAM,GAGND,IAAeD,IACfE,GAAO,KAEX,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAYE,IAC5BD,GAAO,IAEX,OAAOxP,EAAQwP,EAEnB,OAAOxP,GDvEE0P,GACG,aADHA,GAEI,cAFJA,GAGG,e,SAIJ/C,O,eAAAA,I,2BAAAA,I,6BAAAA,I,yBAAAA,I,uBAAAA,I,oBAAAA,Q,uCEIAgD,GFyMGC,I,cA7JX,WAAYlM,GAAY,2vBAFxBA,eAEuB,EACnBpE,KAAKoE,UAAYA,E,qEAIjBpE,KAAKuQ,YAAclD,GAAiBmD,KACpCxQ,KAAKyQ,aAAepD,GAAiBmD,KACrCxQ,KAAK0Q,eAAiBrD,GAAiBmD,O,mCAG9BvB,GACTjP,KAAK2Q,UAAY1B,I,oCAGPA,GACVjP,KAAK4Q,WAAa3B,I,uCAGLA,GACbjP,KAAK6Q,cAAgB5B,I,kCAIb6B,GACR9Q,KAAK+Q,SAAWD,I,mCAGPA,GACT9Q,KAAKgR,UAAYF,I,mCAGAG,GACjBjR,KAAKkR,UAAYD,I,qCAGEE,GACnBnR,KAAKoR,YAAcD,I,sCAGCE,GACpBrR,KAAKsR,aAAeD,I,mCAGXzM,GAA2B,IAAD,EACD5E,KAAKoE,UAAhCmN,EAD4B,EAC5BA,WAAYC,EADgB,EAChBA,YACbC,EAAYF,EAAWG,aAAaF,EAAYG,kBAAmB/M,EAAS4M,EAAYG,mBACxFC,EAAoBL,EAAWM,gBAAgBjN,GAC/CkN,EAAaP,EAAWQ,WAAWP,EAAYG,kBAAmB/M,GAExE,SAAM6M,GAAeG,GAAuBE,K,sCAOhCE,GACZ,IAAMC,EAAWpD,GAAmB7O,KAAKkS,WACnCC,EAAkBH,EAAUtR,MAAM0R,UAAU9C,GAAG2C,GAEjDjS,KAAKoE,UAAUiO,cAAcC,QAAQN,EAAUxN,cAC/C2N,IAEAnS,KAAKuS,YAAYP,EAAUtR,MAAM8R,eACjCxS,KAAKyS,aAAaT,EAAUtR,MAAMgS,iB,uCAIzBC,GACb,IAAMV,EAAWpD,GAAmB7O,KAAK4Q,YACnCuB,EAAkBQ,EAAWjS,MAAMkS,WAAWtD,GAAG2C,GAEnDjS,KAAKoE,UAAUiO,cAAcC,QAAQK,EAAWnO,cAChD2N,IAEAnS,KAAK6S,aAAaF,EAAWjS,MAAMoS,gBACnC9S,KAAK+S,iBAAiBJ,EAAWjS,MAAMsS,qB,uCAK3ChT,KAAKkS,UAAY,K,qCAIjBlS,KAAKiT,iBACLjT,KAAKuQ,YAAclD,GAAiBmD,KACpCxQ,KAAK+Q,SAAWpE,GAAK,GACrB3M,KAAK2Q,UAAYhE,GAAK,K,wCAGAuG,GACtBlT,KAAK0Q,eAAiBwC,I,sCAItBlT,KAAK4Q,WAAa,GAClB5Q,KAAKyQ,aAAepD,GAAiBmD,KACrCxQ,KAAKgR,UAAYrE,GAAK,GACtB3M,KAAK6Q,cAAgBlE,GAAK,K,qCAGPwG,GAClBnT,KAAKuQ,YAAc4C,I,mCAIHjB,GACjBlS,KAAKkS,UAAYA,I,mCAGRkB,GACT,OAAOC,OAAOD,GAAQ7D,QAAQ,K,uCAI9B,OAAOvP,KAAKsT,aAAatT,KAAK+Q,Y,wCAI9B,OAAO/Q,KAAKsT,aAAatT,KAAKgR,a,4CAI9B,OAAOhR,KAAKsT,aAAatT,KAAK6Q,iB,wCAI9B,OAAO7Q,KAAKsT,aAAatT,KAAKkS,a,yCAI9B,OAAOlS,KAAKsT,aAAatT,KAAK4Q,c,wCAKhB2C,GACd,OAAIA,IAAqBnD,GACbpQ,KAAKwT,eAAiB,EACvBD,IAAqBnD,GACpBpQ,KAAKuQ,YAAc,EACpBgD,IAAqBnD,GACpBpQ,KAAK0Q,eAAiB,EAEtB1Q,KAAKyQ,aAAe,I,sCAMZgD,GACpBzT,KAAK0T,aAAeD,EACpBzT,KAAK2T,iBAAkB,M,8CAnL1B1N,K,wEAAuB,S,2CACvBA,K,0GACAA,K,4GACAA,K,wEAA4B,M,wCAC5BA,K,yEAAiC0G,GAAK,M,yCACtC1G,K,yEAAkC0G,GAAK,M,8CAEvC1G,K,yEAA4B,K,2CAC5BA,K,yEAAyBoH,GAAiBmD,Q,yCAC1CvK,K,wEAAuB,M,8CAEvBA,K,yEAA4BoH,GAAiBmD,Q,4CAC7CvK,K,yEAA0BoH,GAAiBmD,Q,0CAE3CvK,K,wEAAwB,M,6CACxBA,K,yEAAsC0G,GAAK,M,kDAE3C1G,K,yEAAgC,K,gDAChCA,K,yEAA8B,K,yCAE9BA,K,yEAAkC0G,GAAK,M,4CAEvC1G,K,wEAA0B,M,+CAC1BA,K,yEAA6B,K,mDAO7BnE,K,8HA2BAA,K,sHAIAA,K,yHAIAA,K,yHAyCAA,K,sHAIAA,K,yHAOAA,K,0HAIAA,K,uHAOAA,K,sHAKAA,K,uHA4CAA,K,kFG5MgB8R,I,cAKjB,WAAYxP,GAAY,qHAFxBA,eAEuB,EACnBpE,KAAKoE,UAAYA,E,mMAIkBpE,KAAKoE,UAAhCyP,E,EAAAA,SAAUC,E,EAAAA,aACZrF,EAAWO,GACb6E,EAASE,oBAITzG,GAAmBwG,EAAa5B,UAAW,CACvCzD,eACGrB,GAAiBwB,M,uBAElBqD,EAAWpD,GAAmBiF,EAAa5B,W,SAEzB2B,EAASG,eAAe/B,G,OAA1CD,E,OACN8B,EAAaG,gBAAgBjC,G,yIAKjChN,EACAkP,GACD,IAAD,OACE,GAAIlP,GAAaA,EAAUmP,QAAUnW,EAAmBgH,EAAU/G,SAAU,CAAC,IACjE6G,EAA8BE,EAA9BF,QAASF,EAAqBI,EAArBJ,QAAS3G,EAAY+G,EAAZ/G,QAD8C,EAWpE+B,KAAKoE,UARLiO,EAHoE,EAGpEA,cACAwB,EAJoE,EAIpEA,SACArC,EALoE,EAKpEA,YACAsC,EANoE,EAMpEA,aACAM,EAPoE,EAOpEA,iBACAC,EARoE,EAQpEA,gBACA9C,EAToE,EASpEA,WACApL,EAVoE,EAUpEA,iBAGEmO,EAAmB9C,EAAYG,kBACrC7M,EAAQM,IACHmP,iBACAnU,MAAK,SAACoE,GAcH,GAFIA,IAXqB6N,EAAc5N,yBAWCyP,EAE3B,CACTjS,QAAQC,MAAM,qCAAsC,CAChDsC,cACAI,UACA3G,YAIJoU,EAAcmC,sBAAsBhQ,GAEhC0P,GACAJ,EAAaW,yBAIjBL,EAAiBM,QAAQ,CACrBxQ,aAAcjD,GAAasC,MAC3B2B,QAASoP,EACTK,OAAQ,cACR/S,OAAQ,KAGZwS,EAAiBM,QAAQ,CACrBxQ,aAAcjD,GAAa6C,6BAC3BoB,QAASoP,EACTK,OAAQ,eACR/S,OAAQ,KAIRgD,IACAuB,EAAiBC,yBACbpB,EACAJ,GAGJwP,EAAiBM,QAAQ,CACrBxQ,aAAcjD,GAAa8C,UAC3BmB,QAASsM,EAAYoD,sBACrBD,OAAQ,gBACR/S,OAAQ,CAACgD,KAGbwP,EAAiBM,QAAQ,CACrBxQ,aAAcjD,GAAa8C,UAC3BmB,QAASsM,EAAYoD,sBACrBD,OAAQ,gBACR/S,OAAQ,CAAC4P,EAAYqD,iBAGzBT,EAAiBM,QAAQ,CACrBxQ,aAAcjD,GAAasC,MAC3B2B,QAASoP,EACTK,OAAQ,YACR/S,OAAQ,CAACgD,KAGbwP,EAAiBM,QAAQ,CACrBxQ,aAAcjD,GAAasC,MAC3B2B,QAASoP,EACTK,OAAQ,YACR/S,OAAQ,CAACgD,EAAS0P,MAI1BT,EACKiB,kBAAkB,IAClB1U,MAAK,SAACqT,GACHK,EAAaiB,gBAAgBtB,MAEhCrQ,OAAM,SAACC,GAEJpB,QAAQe,MAAMK,MAGhBwQ,EAASmB,4BACXZ,EAAiBa,SACbpB,EAASqB,uBAIjB,IAAMC,EAAc,CAChBjR,aACIjD,GAAa6C,6BACjBoB,QAASoP,GAGbF,EAAiBa,SAAS,CAAC,2BAEhBE,GAFe,IAGlBR,OAAQ,UAHU,2BAMfQ,GANe,IAOlBR,OAAQ,mBAPU,2BAUfQ,GAVe,IAWlBR,OAAQ,kBAXU,2BAcfQ,GAde,IAelBR,OAAQ,gBAfU,2BAkBfQ,GAlBe,IAmBlBR,OAAQ,kBAIhB,IAAMS,EAAQhB,EAAiBiB,YACzBC,EAAWlB,EAAiBmB,eAElCnB,EACKoB,aAAaJ,EAAOE,GACpBlV,KAFL,uCAEU,WAAOqV,GAAP,yBAAAvP,EAAA,sDAEEkP,EAGAK,EAHAL,MACAM,EAEAD,EAFAC,QACAlR,EACAiR,EADAjR,YAEEmR,EAAUtB,EAAgBuB,gBAC5BR,EACAM,EACAlR,GAEJ6P,EAAgBwB,YACZF,EACAnR,GAIEsR,EAAiBlR,GAAW2M,EAAWuE,eAAetE,EAAYG,kBAAmB/M,EAAS0P,GAC9FyB,GAAqB,EAAKC,qBAAuB9B,EAEnD4B,GAAkBC,GAClBjC,EAAaiC,kBAAkB1I,GAAiB4I,UAGhDpC,EAASmB,4BACT,EAAKkB,wBAzBP,2CAFV,uDA8BK9S,OAAM,SAACC,GAEJpB,QAAQe,MAAMK,MAGb,EAAK2S,sBACN,EAAKA,qBAAsB,GAE/B5B,EAAiB+B,uBAG5B/S,OAAM,SAACJ,GACJf,QAAQe,MAAM,uBAAwB,CAClCgC,YACAqN,gBACA+D,WAAYlC,EACZjW,UACA2G,UACAE,UACA9B,UAEJqP,EAAcmC,2BAAsB6B,W,oDAhOnDpQ,K,iHACAA,K,gHAOAnE,K,6HAkBAA,K,4FCTgBwU,I,cAIjB,WAAYlS,GAAY,IAAD,oEAFvBA,eAEuB,0HAkHvB0R,eAAiB,SAACS,EAAc3R,EAAS4R,GACrC,IAAM/E,EAAY,EAAKC,aAAa6E,EAAc3R,EAAS4R,GAC3D,QAAK/E,GAGyBA,ENhHpBgF,IAAI9J,GAAKL,GAASoK,IAAI,GAAGlV,cMPhB,KA0HvBkQ,aAAe,SAAC6E,EAAc3R,EAAS4R,GAAoC,IAChEnC,EAAmB,EAAKjQ,UAAxBiQ,gBACDsC,EAAQ,CACVzS,aAAcjD,GAAasC,MAC3B2B,QAASqR,EACT5B,OAAQ,YACR/S,OAAQ,CAACgD,EAAS4R,IAGtB,OAAInC,EAAgBuC,IAAID,GACbhK,GAAK0H,EAAgBwC,IAAIF,GAAOjW,YAEvC,GArIJV,KAAKoE,UAAYA,E,2DAGNmS,GAA8C,IAClDlC,EAAmBrU,KAAKoE,UAAxBiQ,gBACDsC,EAAQ,CACVzS,aAAcjD,GAAasC,MAC3B2B,QAASqR,EACT5B,OAAQ,cACR/S,OAAQ,IAGZ,OAAIyS,EAAgBuC,IAAID,GACbhK,GAAK0H,EAAgBwC,IAAIF,GAAOjW,YAEvC,I,sCAIQ6V,GAA8C,IACnDlC,EAAmBrU,KAAKoE,UAAxBiQ,gBACDsC,EAAQ,CACVzS,aAAcjD,GAAa6C,6BAC3BoB,QAASqR,EACT5B,OAAQ,eACR/S,OAAQ,IAGZ,OAAIyS,EAAgBuC,IAAID,GACbhK,GAAK0H,EAAgBwC,IAAIF,GAAOjW,YAEvC,I,sCAKQkE,GAAkB,IAAD,EACU5E,KAAKoE,UAArCiQ,EADsB,EACtBA,gBAAiB7C,EADK,EACLA,YAClBmF,EAAQ,CACVzS,aAAcjD,GAAa8C,UAC3BmB,QAASsM,EAAYoD,sBACrBD,OAAQ,gBACR/S,OAAQ,CAACgD,IAGb,OAAIyP,EAAgBuC,IAAID,GACbhK,GAAK0H,EAAgBwC,IAAIF,GAAOjW,YAEvC,I,iCAIG6V,EAAsB3R,GAAyC,IAC/DyP,EAAmBrU,KAAKoE,UAAxBiQ,gBACDsC,EAAQ,CACVzS,aAAcjD,GAAasC,MAC3B2B,QAASqR,EACT5B,OAAQ,YACR/S,OAAQ,CAACgD,IAGb,OAAIyP,EAAgBuC,IAAID,GACbhK,GAAK0H,EAAgBwC,IAAIF,GAAOjW,YAEvC,M,4CApEPuF,K,wEAAqB,M,0CAwErBnE,K,oFAAoB,SACjBkD,EACAuR,EACAC,GAGA,OAD0B,EAAKpS,UAAvBiO,cACayE,gBACjB9R,EACA/D,GAAasC,MACbgT,EACA,UACA,CAACC,EAASO,GAAiBvV,iB,8CAIlCM,K,oFAAwB,SACrBkD,EACAuR,EACAC,GAGA,OAD0B,EAAKpS,UAAvBiO,cACayE,gBACjB9R,EACA/D,GAAasC,MACbgT,EACA,UACA,CAACC,EAAS,Q,oCAIjB1U,K,2HAAc,WACXkD,EACAuR,EACAtH,GAHW,eAAA/I,EAAA,6DAKHmM,EAAkB,EAAKjO,UAAvBiO,cALG,SAMLA,EAAcyE,gBAChB9R,EACA/D,GAAasC,MACbgT,EACA,OACA,CAACS,sBAAW/H,GAAQzN,aAXb,2C,iEFvHbN,GAGmB,+C,SAIbmP,O,qBAAAA,I,qBAAAA,I,kBAAAA,Q,wBAUS4G,I,cAIjB,WAAY7S,GAAY,+DAFxBA,eAEuB,EACnBpE,KAAKoE,UAAYA,EACjBpE,KAAKkX,UAAY,G,mEAIEtS,GAAuC,IAAD,OACzD,OAAI5E,KAAKkX,UAAUtS,GACC5E,KAAKkX,UAAUtS,GAChBuS,QAAO,SAACzW,GACnB,OAAO,EAAK0W,YAAY1W,MAIzB,K,+CAGckE,GAAuC,IAAD,OAC3D,OAAI5E,KAAKkX,UAAUtS,GACC5E,KAAKkX,UAAUtS,GAChBuS,QAAO,SAACzW,GACnB,OAAQ,EAAK0W,YAAY1W,MAI1B,K,wFAIPsE,EACAJ,G,yFAEQyN,EAAkBrS,KAAKoE,UAAvBiO,cACFgF,EAAehF,EAAc5N,wBAE3BK,EAAYE,EAAZF,QACJ9E,KAAKkX,UAAUtS,IACC5E,KAAKkX,UAAUtS,GACvB/G,SAAQ,SAAC6C,GAET,EAAK0W,YAAY1W,IACjB,EAAK4W,QAAQ5W,EAAO2W,IAEpBvS,EAAQM,IACHmS,sBAAsB7W,EAAML,MAC5BD,MAAK,SAACuC,GACHjC,EAAM8W,mBAAqBH,EACvB1U,IACAjC,EAAMiC,QAAUA,MAGvBS,OAAM,WACH1C,EAAM8W,mBAAqBH,Q,kBAMxChH,GAAUoH,S,oJAIQ7S,EAAiB8S,GAC1C,IAAMC,EAA4B,CAC9BtX,KAAMqX,EACNF,mBAAoB,EACpB7U,aAAS0T,GAGb,IAAKqB,EACD,MAAM,IAAI3R,MACN,qDAIR,IAAI6R,EAAU5X,KAAKkX,UAAUtS,GAE7B,GAAIgT,EAAS,CAET,GADkBA,EAAQC,MAAK,SAACnX,GAAD,OAAWA,EAAML,OAASqX,KAErD,MAAM,IAAI3R,MAAM7E,IAEpBlB,KAAKkX,UAAUtS,GAAS7G,KAAK4Z,QAE7B3X,KAAKkX,UAAUtS,GAAW,GAC1B5E,KAAKkX,UAAUtS,GAAS7G,KAAK4Z,K,kCAIjBG,GAChB,OAAQA,EAASnV,U,8BAGLmV,EAA6BT,GACzC,OAAOS,EAASN,mBAAqBH,M,8CAjGxCpR,K,mHA+BAnE,K,wIAkCAA,K,uFG3FgBiW,I,cAKjB,WAAY3T,GAAY,4GAFxBA,eAEuB,EACnBpE,KAAKoE,UAAYA,EACjBpE,KAAK0J,UAAW,E,4DAIhB,QAAS1J,KAAKgY,oB,6CAId,OAAOhY,KAAKgY,oB,2CAGaC,GACzBjY,KAAKgY,kBAAoBC,I,uCAIzBjY,KAAK0J,UAAY1J,KAAK0J,W,kCAGNwO,GAChBlY,KAAK0J,SAAWwO,M,6CA1BnBjS,K,+GACAA,K,+GAgBAnE,K,8HAIAA,K,qHAIAA,K,8EC1BgBqW,I,cAIjB,WAAY/T,GAAY,wEAFxBA,eAEuB,EACnBpE,KAAKoE,UAAYA,EACjBpE,KAAKoY,oBAAqB,E,gEAI1BpY,KAAKoY,oBAAsBpY,KAAKoY,qB,4CAGNF,GAC1BlY,KAAKoY,mBAAqBF,M,uDAb7BjS,K,4GAQAnE,K,kIAIAA,K,wFCdQuW,GAAqB,CAC9BC,EAAG,GACHC,EAAG,WACHC,EAAG,WACHC,EAAG,UACHC,GAAI,UAGD,SAASC,GAAiBC,EAAWnY,EAAMwE,GAC9C,IAAM4T,EAAM,kBACRR,GAAmBO,IAAcP,GAAmB,GAD5C,gBAIZ,OAAQpT,GACJ,IAAK,cACD,MAAM,GAAN,OAAU4T,EAAV,eAAuBpY,GAE3B,IAAK,UACL,QACI,MAAM,GAAN,OAAUoY,EAAV,oBAA4BpY,IAKjC,I,GCjBKqY,GAyBAC,GDRCC,GAAe,SAACJ,GACzB,MAAO,WAAaP,GAAmBO,GAAa,iB,SClB5CE,K,UAAAA,E,aAAAA,Q,cAyBAC,O,2BAAAA,I,yBAAAA,I,6BAAAA,I,gCAAAA,Q,KA+BL,I,MAEcE,I,cAGjB,WAAY7U,GAAY,yBAFxBA,eAEuB,EACnBpE,KAAKoE,UAAYA,E,6DAGK,IAAD,EACkBpE,KAAKoE,UAApCiO,EADa,EACbA,cAAeb,EADF,EACEA,YACvB,OAAOa,EAAc7L,YACjB6L,EAAc9M,qBACdtE,GAAa6C,6BACb0N,EAAYG,qB,iDAKhB,QACM3R,KAAK+T,sBACL/T,KAAKkZ,oBACLlZ,KAAKmZ,oBACLnZ,KAAKoZ,iBACLpZ,KAAKqZ,wBACLrZ,KAAKsZ,qBACLtZ,KAAKuZ,oC,oCAKX,OAAOvZ,KAAKwZ,aAAeT,GAASU,a,mCAGpC,OAAOzZ,KAAKwZ,aAAeT,GAASW,Y,oCAGpC,OAAO1Z,KAAKwZ,aAAeT,GAASY,e,iCAGpC,OAAO3Z,KAAKwZ,aAAeT,GAASa,c,iCAGN,IACtBpI,EAAgBxR,KAAKoE,UAArBoN,YACF9Q,EAAQV,KAAKoE,UAAUiQ,gBAAgBwF,eAAe,CACxD3V,aAAcjD,GAAa6C,6BAC3BoB,QAASsM,EAAYG,kBACrBgD,OAAQ,UAEZ,OAAOjU,EAASiM,GAAKjM,GAAOoZ,gBAA0BzD,I,yCAGf,IAC/B7E,EAAgBxR,KAAKoE,UAArBoN,YACF9Q,EAAQV,KAAKoE,UAAUiQ,gBAAgBwF,eAAe,CACxD3V,aAAcjD,GAAa6C,6BAC3BoB,QAASsM,EAAYG,kBACrBgD,OAAQ,kBAEZ,OAAOjU,EAAQiM,GAAKjM,QAAS2V,I,oCAGlB,IACH7E,EAAgBxR,KAAKoE,UAArBoN,YACF9Q,EAAQV,KAAKoE,UAAUiQ,gBAAgBwF,eAAe,CACxD3V,aAAcjD,GAAa8C,UAC3BmB,QAASsM,EAAYoD,sBACrBD,OAAQ,gBACR/S,OAAQ,CAAC4P,EAAYuI,aAAaC,WAEtC,OAAOtZ,EAAQiM,GAAKjM,QAAS2V,I,uCAGf,IACN7E,EAAgBxR,KAAKoE,UAArBoN,YACF9Q,EAAQV,KAAKoE,UAAUiQ,gBAAgBwF,eAAe,CACxD3V,aAAcjD,GAAa6C,6BAC3BoB,QAASsM,EAAYG,kBACrBgD,OAAQ,gBAEZ,OAAOjU,EAAQiM,GAAKjM,QAAS2V,I,uCAGf,IACN7E,EAAgBxR,KAAKoE,UAArBoN,YACF9Q,EAAQV,KAAKoE,UAAUiQ,gBAAgBwF,eAAe,CACxD3V,aAAcjD,GAAa6C,6BAC3BoB,QAASsM,EAAYG,kBACrBgD,OAAQ,gBAEZ,OAAOjU,EAAQiM,GAAKjM,QAAS2V,I,oCAGlB,IACH7E,EAAgBxR,KAAKoE,UAArBoN,YACF9Q,EAAQV,KAAKoE,UAAUiQ,gBAAgBwF,eAAe,CACxD3V,aAAcjD,GAAa6C,6BAC3BoB,QAASsM,EAAYG,kBACrBgD,OAAQ,aAEZ,OAAOjU,EAAQiM,GAAKjM,QAAS2V,I,0CAGW,IAChC7E,EAAgBxR,KAAKoE,UAArBoN,YACF9Q,EAAQV,KAAKoE,UAAUiQ,gBAAgBwF,eAAe,CACxD3V,aAAcjD,GAAa6C,6BAC3BoB,QAASsM,EAAYG,kBACrBgD,OAAQ,mBAEZ,OAAOjU,EAAQiM,GAAKjM,QAAS2V,I,2CAGX,IACV7E,EAAgBxR,KAAKoE,UAArBoN,YACF9Q,EAAQV,KAAKoE,UAAUiQ,gBAAgBwF,eAAe,CACxD3V,aAAcjD,GAAa6C,6BAC3BoB,QAASsM,EAAYG,kBACrBgD,OAAQ,gBAEZ,OAAOjU,EAAQiM,GAAKjM,QAAS2V,I,wCAGd,IACP7E,EAAgBxR,KAAKoE,UAArBoN,YACF9Q,EAAQV,KAAKoE,UAAUiQ,gBAAgBwF,eAAe,CACxD3V,aAAcjD,GAAa6C,6BAC3BoB,QAASsM,EAAYG,kBACrBgD,OAAQ,iBAEZ,OAAOjU,EAAQiM,GAAKjM,QAAS2V,I,4CAI/B,IAAM4D,EAAcja,KAAKkZ,iBACzBgB,EAAcla,KAAKmZ,iBAEnB,OADWnZ,KAAKoZ,cACA1C,IAAI,GAAGxJ,MAAM+M,GAAavD,IAAIwD,K,wDAGb,IACvB1I,EAAgBxR,KAAKoE,UAArBoN,YACF9Q,EAAQV,KAAKoE,UAAUiQ,gBAAgBwF,eAAe,CACxD3V,aAAcjD,GAAa6C,6BAC3BoB,QAASsM,EAAYG,kBACrBgD,OAAQ,iCAEZ,OAAOjU,EAAQiM,GAAKjM,QAAS2V,I,4CAGF,IACnB7E,EAAgBxR,KAAKoE,UAArBoN,YACF2I,EAAW,CACbjW,aAAcjD,GAAa6C,6BAC3BoB,QAASsM,EAAYG,mBA0BzB,MAvBsB,CAAC,2BAEZwI,GAFW,IAGdxF,OAAQ,gBAHM,2BAMXwF,GANW,IAOdxF,OAAQ,aAPM,2BAUXwF,GAVW,IAWdxF,OAAQ,gBAXM,2BAcXwF,GAdW,IAedxF,OAAQ,gBAfM,2BAkBXwF,GAlBW,IAmBdxF,OAAQ,oC,gFAOGyF,G,8EACbC,EAAMra,KAAKsa,iB,KACV3N,G,SACG0N,EAAI/X,QAAQiY,iBAAiBH,EAAc5Y,YAAYgZ,O,oPAI7CC,G,8EACdJ,EAAMra,KAAKsa,iB,KACV3N,G,SACG0N,EAAI/X,QACLoY,kBAAkBD,EAAejZ,YACjCgZ,O,iPAIQG,EAAkBC,G,qGAAmBC,E,+BAAkB,EAClER,EAAMra,KAAKsa,iB,SACKD,EAAIS,cAAc,MAAO,CAC3CF,UAAWA,EACXC,QAAqB,IAAZA,EAAgB,SAAWA,I,cAFpCE,E,QAKMC,UACVD,EAAYA,EAAUE,MAAM,EAAGN,G,kBAExBO,QAAQC,IACXJ,EAAUK,KAAI,SAACC,GACX,OAAI,EAAKC,gBAAgBD,GACd,EAAKE,cAAcF,GAErB,U,wLAMCV,EAAkBC,G,qGAAmBC,E,+BAAkB,EACnER,EAAMra,KAAKsa,iB,SACMD,EAAIS,cAAc,OAAQ,CAC7CF,UAAWA,EACXC,QAAqB,IAAZA,EAAgB,SAAWA,I,cAFpCW,E,QAKOR,UACXQ,EAAaA,EAAWP,MAAM,EAAGN,G,kBAE1BO,QAAQC,IACXK,EAAWJ,KAAI,SAACK,GACZ,OAAI,EAAKC,iBAAiBD,GACf,EAAKE,eAAeF,GAEtB,U,sLAMDJ,G,sFACVpM,EAAStC,GAAK0O,EAASO,aAAaC,YACpCC,EAAanP,GAAK0O,EAASO,aAAaG,gB,SAEtB/b,KAAKoE,UAAUiO,cAAc2J,aACjDX,EAAS7W,a,cADPyX,E,OAIAhe,EAAU+B,KAAKoE,UAAUiO,cAAc9M,qBAAqBtH,QAE9Die,EAAkB,CAClBpL,MAAOgL,EAAWpF,IAAIzH,GACtBA,OAAQA,EACRmD,UAAW0J,EACXtX,YAAa6W,EAAS7W,YACtByX,UAAWA,EACXhX,KAAM6T,GAAUqD,IAChB9b,KAAMsY,GAAiB1a,EAASod,EAASe,gBAAiB,gB,kBAGvDF,G,qLAIUT,G,sFACXxM,EAAStC,GAAK8O,EAAUG,aAAaC,YACrCQ,EAAgB1P,GAAK8O,EAAUG,aAAaG,gB,SAE1B/b,KAAKoE,UAAUiO,cAAc2J,aACjDP,EAAUjX,a,cADRyX,E,OAIAhe,EAAU+B,KAAKoE,UAAUiO,cAAc9M,qBAAqBtH,QAE5Die,EAAmB,CACrBpL,MAAOuL,EAAc3F,IAAIzH,GACzBA,OAAQA,EACRoN,cAAeA,EACf7X,YAAaiX,EAAUjX,YACvByX,UAAWA,EACXhX,KAAM6T,GAAUwD,KAChBjc,KAAMsY,GAAiB1a,EAASwd,EAAUW,gBAAiB,gB,kBAGxDF,G,6IAGKb,GACZ,QACMA,EAASO,cACXP,EAASO,aAAaC,cACpBR,EAASO,aAAaG,iB,uCAIfN,GACb,QACMA,EAAUG,cACZH,EAAUG,aAAaC,cACrBJ,EAAUG,aAAaG,iB,sDAIDQ,EAAwBC,GACpD,IAAMC,EAAWzc,KAAKoZ,cACtBsD,EAAe1c,KAAKsZ,kBACpBqD,EAAmB3c,KAAKqZ,qBAExB,OAAIoD,EAASlO,GAAG,IAAMgO,EAAYK,IAAIH,GAC3Bzc,KAAK6c,sBAETL,EAAetP,MAAM,GAAGwJ,IAAI6F,EAAYO,KAAKH,GAAiBI,MAAML,M,2CAG1DH,GACjB,IAAMC,EAAiBxc,KAAKgd,oBAC5B,OAAOhd,KAAKid,gCAAgCV,EAAaC,K,qCAG7C,IAAD,EACyBxc,KAAKoE,UAAjCmN,EADG,EACHA,WAAYC,EADT,EACSA,YACd0L,EAAc3L,EAAW4L,eAAe3L,EAAYG,mBACpDgL,EAAmB3c,KAAKqZ,qBAC9B,OAAOrZ,KAAKod,qBAAqBF,EAAYH,MAAMJ,M,0CAGnCU,GAChB,IAAMZ,EAAWzc,KAAKoZ,cACtBa,EAAcja,KAAKkZ,iBACnBgB,EAAela,KAAKmZ,iBAEpB,OAAIsD,EAASlO,GAAG,IAAM8O,EAAOT,IAAIH,GACtBA,EAAS/F,IAAI,GAAGxJ,MAAM+M,GAAavD,IAAIwD,GAG3CmD,EAAOnQ,MAAM+M,GAAavD,IAAIwD,K,oCAG1B,IAAD,EAC0Bla,KAAKoE,UAAjCmN,EADE,EACFA,WAAYC,EADV,EACUA,YACd0L,EAAc3L,EAAW4L,eAAe3L,EAAYG,mBACpDgL,EAAmB3c,KAAKqZ,qBACxBqD,EAAgB1c,KAAKsZ,kBAC3B,OAAOtZ,KAAKsd,oBAAoBJ,EAAYH,MAAMJ,GAAiBG,KAAKJ,M,qCAG7DtK,GAAyC,IAAM5N,EAAcxE,KAAKoE,UAAUiO,cAAc5N,wBAAnD,EAEdzE,KAAKoE,UAAjCmN,EAF0C,EAE1CA,WAAYC,EAF8B,EAE9BA,YACdiL,EAAWzc,KAAKoZ,cAChBc,EAAcla,KAAKmZ,iBACnBc,EAAcja,KAAKkZ,iBACnBgE,EAAc3L,EAAW4L,eAAe3L,EAAYG,mBACpDgL,EAAmB3c,KAAKqZ,qBACxBqD,EAAe1c,KAAKsZ,kBACpB1G,EAAasK,EAAYH,MAAMJ,GAAiBG,KAAKJ,GACvDhK,EAAe/F,GAAK,GAAI6F,EAAgB7F,GAAK,GACjD,GAAwB,IAApB3M,KAAKwZ,WAAkB,CACzBhH,EAAgBxS,KAAK6c,sBACrBnK,EAAeN,EAAUsE,IAAIlE,GAE7B,IAAM+K,EAA0Bd,EAASM,MAAMG,EAAYH,MAAMJ,IACjE,GAAIjK,EAAanE,GAAGgP,GAA0B,CAC5C7K,EAAe6K,EACf,IAGMC,EAH4BpL,EAC/B2K,MAAMQ,EAAwBrQ,MAAMlN,KAAK6c,wBAEiB3P,MAAM,GAAGA,MAAMgN,GAAaxD,IAAIuD,GAC1F6C,KAAKL,EAASvP,MAAMuP,IACpBgB,OACAV,MAAMN,GAET/J,EAAeA,EAAaoK,KAAKU,SAGnC9K,EAAeN,EAAUlF,MAAM,GAAGA,MAAMgN,GAAaxD,IAAIuD,GACtD6C,KAAKlK,EAAW1F,MAAM0F,IACtB6K,OACAV,MAAMnK,GAQX,OANAJ,EAAgBJ,EAAUsE,IAAIhE,GAMvB,CACHhS,MAAO,CACH0R,YACAM,eACAF,iBAEJhO,iB,sCAIQkZ,GAA4C,IAAD,EAErB1d,KAAKoE,UAAjCmN,EAFiD,EAEjDA,WAAYC,EAFqC,EAErCA,YACd0L,EAAc3L,EAAW4L,eAAe3L,EAAYG,mBACpDgL,EAAmB3c,KAAKqZ,qBACxBsE,EAAW3d,KAAKgd,oBAChBN,EAAe1c,KAAKsZ,kBACtBtG,EAAmBrG,GAAK,GAAImG,EAAiBnG,GAAK,GAEtD,GAAuB,IAApB3M,KAAKwZ,WAAkB,CACxB,IAAM6D,EAASH,EAAYJ,KAAKJ,GAShC1J,GAJAA,GAHAA,EAAmB0K,EAAaxQ,MAAMyQ,GAASzQ,MAAMwP,EAAaxP,MAAMwP,IACrEhG,IAAIwG,EAAYhQ,MAAMmQ,EAAOnQ,MAAMmQ,MAEFP,KAClCY,EAAaxQ,MAAM,GAAGA,MAAMyQ,GAASjH,IAAI2G,KAGPN,MAClCW,EAAaxQ,MAAMwQ,GAAcxQ,MAAMyQ,GACtCjH,IAAI2G,EAAOnQ,MAAMmQ,UAIpBrK,EAD4B,IAApBhT,KAAKwZ,WACMkE,EAAaxQ,MAAMyQ,GAASjH,IAAIwG,GAEhCQ,EAAaxQ,MAAMyQ,GAASjH,IAAIwG,EAAYH,MAAMJ,IAGrE,IAAMnY,EAAcxE,KAAKoE,UAAUiO,cAAc5N,wBAKjD,OAJAqO,EAAiBE,EAAiB0D,IAAIgH,GAI/B,CACHhd,MAAO,CACHkS,WAAY8K,EACZ1K,mBACAF,kBAEJtO,iB,kKAKEoZ,EAAgB5d,KAAK+T,mB,SACF/T,KAAKua,iBAAiBqD,G,cAAzCC,E,OACA/M,EAAQ8M,EAAclH,IAAImH,G,kBACzB/M,G,uLAIa6J,G,gBAMLmD,E,sHAAf,WAAsClD,EAAWC,GAAjD,mBAAA3U,EAAA,sEAC0B6X,EAAKC,eAAerD,EAAUC,EAAWC,GADnE,cACQE,EADR,gBAE2BgD,EAAKE,gBAAgBtD,EAAUC,EAAWC,GAFrE,UAEQW,EAFR,OAGM0C,EAAwBnD,EAAUoD,OAAO3C,MAE7C4C,EAAiBA,EAAeD,OAAOD,IAIpBvO,OAASgL,GAAYE,EAAUD,GATpD,kCAUUkD,EACJlD,EApdyB,IAodayD,EAClCzD,EArdqB,IAsdrByD,EACJzD,GAdN,6C,uBAAekD,E,gDANoE9d,KAAKoE,UAAUiO,cAAc9M,qBAAzCT,E,EAAAA,Q,SAC/CA,EAAQM,IAAImP,iB,cAAhC+J,E,OACAD,EAAcre,KAAKoE,UAAUoN,YAAYuI,aAAca,UACvDwD,EAAiB,GAEfL,EAAO/d,K,UAmBP8d,EACJQ,EA5d6B,IA4dWD,EACpCC,EA7dyB,IA8dzBD,EACJC,G,eAGEF,EAAezO,QAAUgL,GAC3ByD,EAAenD,MAAM,EAAGN,GAE1ByD,EAAiBA,EAAeG,MAAK,SAAUrY,EAAGsY,GAChD,OAAOA,EAAEha,YAAc0B,EAAE1B,e,kBAGpB4Z,G,kIAKPK,EACArE,EACAsE,GACgB,IAAD,EACwB1e,KAAKoE,UAApCiO,EADO,EACPA,cAAeb,EADR,EACQA,YAEvB,OAAOa,EAAcyE,gBACjBzE,EAAc9M,qBACdtE,GAAa6C,6BACb0N,EAAYG,kBACZ,MACA,CAAC8M,EAAIrE,EAAc5Y,WAAYkd,EAAgBld,YAC/C,CAAEd,MAAO0Z,EAAc5Y,e,2BAKlBid,EAAYhE,EAA2BkE,GAAiC,IAAD,EACzC3e,KAAKoE,UAApCiO,EADwE,EACxEA,cAAeb,EADyD,EACzDA,YAEvB,OAAOa,EAAcyE,gBACjBzE,EAAc9M,qBACdtE,GAAa6C,6BACb0N,EAAYG,kBACZ,OACA,CAAC8M,EAAIhE,EAAejZ,WAAYmd,EAAoBnd,iB,qCA1B3DM,K,mGAkBAA,K,uEChkBC8c,GAAkBvf,EAAQ,QAC1Bwf,GAAoBxf,EAAQ,QAC5Byf,GAAoBzf,EAAQ,QAC5B0f,GAAqB1f,EAAQ,QAEtB2f,GAAY,SAASlhB,GAChC,MAAgB,gBAAZA,EACKihB,GACc,YAAZjhB,EACFghB,GACc,UAAZhhB,EACF8gB,GACc,YAAZ9gB,EACF+gB,GAEA,ICXUI,G,WAMjB,WAAY7a,GAAY,yBALxBA,eAKuB,OAJvB8a,eAIuB,OAHvBC,sBAGuB,OAFvBrhB,aAEuB,EACrBkC,KAAKoE,UAAYA,E,iEAIjB,IAAMgb,EAAapf,KAAKoE,UAAUiO,cAAc9M,qBAChD,OAAOvI,EAAkBoiB,GAAcA,EAAWnhB,QAAWmhB,EAAWnhB,QAAUf,K,yCAIlF,OAAO8hB,GAAUhf,KAAKqf,wB,wCAItB,OAAOL,GAAUhf,KAAKqf,sBAAsBC,M,4CAI5C,OAAON,GAAUhf,KAAKqf,sBAAsBH,Y,mCAI5C,OAAOF,GAAUhf,KAAKqf,sBAAsBE,U,oCAK5C,OADgBP,GAAUhf,KAAKqf,sBAAsBE,QACtCvF,Y,KCxBAwF,G,WAMjB,WAAY/V,GAAkB,yBAL9BA,UAK6B,OAH7B4L,iBAG6B,OAF7BE,oBAE6B,EACzBvV,KAAKyJ,KAAOA,EACZzJ,KAAKmW,mB,kGAIUf,EAAeE,G,wFACStV,KAAKyJ,KAApC4I,E,EAAAA,cAAeb,E,EAAAA,YACjBiO,EAAQpN,EAAc7L,YACxB6L,EAAc9M,qBACdtE,GAAa8C,UACbyN,EAAYoD,uB,SAGO6K,EAAMnd,QACxBod,UAAUpK,GACVkF,O,cAFC/E,E,yBAGC,CACHL,MAAOA,EACPM,QAASD,EAASkK,WAClBnb,YAAaiR,EAASjR,c,wIAIrB4Q,GAAgB,IAAD,OACpBA,EAAMvX,SAAQ,SAAA2c,GAAI,OAAI,EAAK9F,QAAQ8F,Q,8BAG/BA,GACAxa,KAAK4f,gBAAgBpF,K,sCAGLA,GAAa,IACzBqF,EAAe7f,KAAKyJ,KAApBoW,WACFC,EAAQ,IAAIC,aAAUF,EAAWG,OAAOxF,EAAKtW,eAEnDsW,EAAK5Y,OAAS4Y,EAAK5Y,OAAS4Y,EAAK5Y,OAAS,GAE1C,IAAMqe,EAAUH,EAAMI,UAAU1F,EAAK7F,QAAQwL,OAAO3F,EAAK5Y,QACzD5B,KAAKuV,eAAexX,KAAK,CAACyc,EAAKtV,QAAS+a,IACxCjgB,KAAKqV,YAAYtX,KAAKyc,K,iCAGfA,EAAYhL,GAAc,IACzBqQ,EAAe7f,KAAKyJ,KAApBoW,WAER,OADc,IAAIE,aAAUF,EAAWG,OAAOxF,EAAKtW,eACtCgc,UAAU1F,EAAK7F,QAAQyL,OAAO5Q,K,yCAI3CxP,KAAKqV,YAAc,GACnBrV,KAAKuV,eAAiB,O,KClDT8K,I,cAIjB,WAAYjc,GAAY,2DAFxBA,eAEuB,EACnBpE,KAAKoE,UAAYA,EACjBpE,KAAKsgB,MAAQ,G,4DAGDlL,EAAeM,EAAclR,GAA+B,IAChE4P,EAAqBpU,KAAKoE,UAA1BgQ,iBACR,OAAOgB,EAAMgG,KAAI,SAACZ,EAAM+F,GACpB,IAAM7f,EAAQ0T,EAAiBoM,WAAWhG,EAAM9E,EAAQ6K,IACxD,MAAO,CACHrc,aAAcsW,EAAKtW,aACnBgB,QAASsV,EAAKtV,QACdyP,OAAQ6F,EAAK7F,OACb/S,OAAQ4Y,EAAK5Y,OACblB,MAAOA,EACP+f,YAAajc,Q,0BAKrBmS,GACA,IAAM/U,EAAS+U,EAAM/U,OAAS+U,EAAM/U,OAAS,GAE7C,QACM5B,KAAKsgB,MAAM3J,EAAMzS,iBACjBlE,KAAKsgB,MAAM3J,EAAMzS,cAAcyS,EAAMzR,YACrClF,KAAKsgB,MAAM3J,EAAMzS,cAAcyS,EAAMzR,SAASyR,EAAMhC,WACpD3U,KAAKsgB,MAAM3J,EAAMzS,cAAcyS,EAAMzR,SAASyR,EAAMhC,QAClD/S,EAAOJ,c,qCAKJmV,GACX,OAAI3W,KAAK4W,IAAID,GACF3W,KAAK6W,IAAIF,GAAOjW,WAEvB,I,0BAIJiW,GACA,GAAI3W,KAAK4W,IAAID,GAAQ,CAEjB,IAAM/U,EAAS+U,EAAM/U,OAAS+U,EAAM/U,OAAS,GAC7C,OAAO5B,KAAKsgB,MAAM3J,EAAMzS,cAAcyS,EAAMzR,SAASyR,EAAMhC,QACvD/S,EAAOJ,e,kCAOCkf,EAAkBlc,GAAsB,IAAD,OACvDkc,EAAQ7iB,SAAQ,SAAC8Y,GACb,IAAM/U,EAAS+U,EAAM/U,OAAS+U,EAAM/U,OAAS,GACxC,EAAK0e,MAAM3J,EAAMzS,gBAClB,EAAKoc,MAAM3J,EAAMzS,cAAgB,IAGhC,EAAKoc,MAAM3J,EAAMzS,cAAcyS,EAAMzR,WACtC,EAAKob,MAAM3J,EAAMzS,cAAcyS,EAAMzR,SAAW,IAG/C,EAAKob,MAAM3J,EAAMzS,cAAcyS,EAAMzR,SAASyR,EAAMhC,UACrD,EAAK2L,MAAM3J,EAAMzS,cAAcyS,EAAMzR,SAASyR,EAAMhC,QAAU,IAI7D,EAAK2L,MAAM3J,EAAMzS,cAAcyS,EAAMzR,SAASyR,EAAMhC,QACjD/S,EAAOJ,cAGX,EAAK8e,MAAM3J,EAAMzS,cAAcyS,EAAMzR,SAASyR,EAAMhC,QAChD/S,EAAOJ,YACP,IAGR,IAAMmf,EAAW,EAAKL,MAAM3J,EAAMzS,cAAcyS,EAAMzR,SAASyR,EAAMhC,QACjE/S,EAAOJ,cAINmf,EAASF,aAAgBE,EAASF,aAAeE,EAASF,aAAejc,KAC1E,EAAK8b,MAAM3J,EAAMzS,cAAcyS,EAAMzR,SAASyR,EAAMhC,QAChD/S,EAAOJ,YACH,CACJd,MAAOiW,EAAMjW,MACb+f,YAAa9J,EAAM8J,qB,0CA3FlCxa,K,sGAwDAnE,K,8EC/DgB8e,G,WAejB,aAAe,yBAdfvO,mBAcc,OAbdwO,0BAac,OAZdtP,gBAYc,OAXdpL,sBAWc,OAVdoD,sBAUc,OATduX,gBASc,OARdhN,kBAQc,OAPdD,cAOc,OANdrC,iBAMc,OALd6C,qBAKc,OAHdwL,gBAGc,OAFdzL,sBAEc,EACVpU,KAAK6f,WAAa,IAAI7b,GACtBhE,KAAKoU,iBAAmB,IAAIoL,GAAiBxf,MAC7CA,KAAKqU,gBAAkB,IAAIgM,GAAgBrgB,MAE3CA,KAAKqS,cAAgB,IAAIlO,GAAcnE,MACvCA,KAAK6gB,qBAAuB,IAAIjN,GAAqB5T,MACrDA,KAAKuR,WAAa,IAAI+E,GAAWtW,MACjCA,KAAKmG,iBAAmB,IAAI8Q,GAAiBjX,MAC7CA,KAAKuJ,iBAAmB,IAAIwO,GAAiB/X,MAC7CA,KAAK8gB,WAAa,IAAI3I,GAAWnY,MACjCA,KAAK8T,aAAe,IAAIxD,GAAiBtQ,MACzCA,KAAK6T,SAAW,IAAIoF,GAASjZ,MAC7BA,KAAKwR,YAAc,IAAIyN,GAAYjf,MAGnCA,KAAK+gB,aAAa3d,OAAM,SAACC,GAErB,MAAM,IAAI0C,MAAM,sBAAwB1C,M,oQC3CvC2d,GAAgBC,IAAMC,cAAc,CAC7CzX,KAAM,IAAImX,KAGDpX,GAAY,kBAAMyX,IAAME,WAAWH,K,wBCuCzC,SAASI,GAAY1gB,GAGxB,IAAM2gB,EAAMC,mBAQZ,OALA9W,qBAAU,WACN6W,EAAIE,QAAU7gB,IACf,CAACA,IAGG2gB,EAAIE,Q,0mBClDf,IAsGeC,GApGU,SAAC,GAAkB,IAAhBlY,EAAe,EAAfA,SAAe,EAGnCE,KADAC,KAAQ4I,EAF2B,EAE3BA,cAAewO,EAFY,EAEZA,qBAGrBY,EAAsBC,YAAajkB,GAE7BkkB,EAERF,EAFAtN,OACOyN,EACPH,EADAze,MAGJqP,EAAcwP,eAAepkB,EAA2BgkB,GAExD,IAAMzc,EAAYqN,EAAc9M,qBAEhCtD,QAAQC,MAAM,qCAAsC,CAChD/D,SAAUsjB,EACVzc,UAAWA,IAIf,IAAM8c,E5BlBH,WAA4B,IAAD,EACDtiB,YAAiB/B,GAAtCskB,EADsB,EACtBA,SAAU5N,EADY,EACZA,OADY,EAGJ6N,oBAAS,GAHL,mBAGvBC,EAHuB,KAGhBC,EAHgB,KAkC9B,OA7BA1X,qBAAU,WACNvI,QAAQC,MAAM,2BAA4B/D,GAC1CA,EAASgkB,eAAe/hB,MAAK,SAAC+hB,GAC1BlgB,QAAQC,MAAM,kDAAmD,CAC7DigB,iBAEAA,GAKIC,YAAY/X,OAAOgY,SAJvBN,EAAS5jB,OAAUkY,GAAW,GAAMjT,OAAM,WACtC8e,GAAS,MAQTA,GAAS,QAItB,CAACH,IAGJvX,qBAAU,WACF2J,GACA+N,GAAS,KAEd,CAAC/N,IAEG8N,E4BhBYK,I5BuBhB,WAAgD,IAAnBC,EAAkB,0DACd/iB,YAChC/B,GADI0W,EAD0C,EAC1CA,OAAQnR,EADkC,EAClCA,MAAO+e,EAD2B,EAC3BA,SAIvBvX,qBAAU,WAAO,IACL6X,EAAahY,OAAbgY,SAER,GAAIA,GAAYA,EAAStf,KAAOoR,IAAWnR,IAAUuf,EAAU,CAC3D,IAAMC,EAAqB,WAEvBT,EAAS5jB,OAAUkY,GAAW,GAAMjT,OAAM,gBAGxCqf,EAAwB,SAACC,GACvBA,EAAS/S,OAAS,GAElBoS,EAAS5jB,OAAUkY,GAAW,GAAMjT,OAAM,gBAI5Cuf,EAAuB,WAEzBZ,EAAS5jB,OAAUkY,GAAW,GAAMjT,OAAM,gBAO9C,OAJAif,EAAStf,GAAG,eAAgByf,GAC5BH,EAAStf,GAAG,iBAAkB4f,GAC9BN,EAAStf,GAAG,kBAAmB0f,GAExB,WACCJ,EAASO,iBACTP,EAASO,eAAe,eAAgBJ,GACxCH,EAASO,eACL,iBACAD,GAEJN,EAASO,eACL,kBACAH,KAMhB,OAAO,eACR,CAACtO,EAAQnR,EAAOuf,EAAUR,I4BlE7Bc,EAAqBf,GAGrBjB,EAAqBiC,aAAa9d,GAAW,GDlC1C,SAAqB+d,EAAUC,GAClC,IAAMC,EAAgB3B,mBAGtB9W,qBAAU,WACNyY,EAAc1B,QAAUwB,IACzB,CAACA,IAGJvY,qBAAU,WAIN,GAAc,OAAVwY,EAAgB,CAChB,IAAIE,EAAKC,aAJb,WACIF,EAAc1B,YAGayB,GAC3B,OAAO,kBAAMI,cAAcF,OAEhC,CAACF,ICkBJK,EACI,kBAAMxC,EAAqBiC,aAAa9d,GAAW,KA/B1B,KAmC7BwF,qBAAU,WAEFxF,EAAUJ,SACVI,EAAUJ,UAAYyN,EAAcxN,gBAEpC5C,QAAQC,MAAM,+CAAgD,CAC1D0C,QAASI,EAAUJ,QACnB0e,YAAajR,EAAcxN,gBAE/Bgc,EAAqBiC,aAAa9d,GAAW,MAElD,CAACA,EAAWqN,EAAcxN,cAAegc,IAE5C,IAAM0C,EAAcvc,IAAO0P,IAAV,MAIX8M,EAAgBxc,IAAO0P,IAAV,MAsBnB,OAAKoL,EAKDF,GACF3f,QAAQC,MAAM,kEAEZ,6BACE,kBAACshB,EAAD,KACE,yBAAKC,UAAU,uBAAf,4BAEA,kBAACF,EAAD,KACGja,KAKFqY,GAIP1f,QAAQC,MAAO,6DAA8D,CAAEyf,kBACxErY,IAJLrH,QAAQC,MAAM,gDACPoH,IAnBPrH,QAAQC,MAAM,mDACP,O,0BCvDR,IA4BMwhB,GAAiB,SAC1BhjB,GAEA,IAAMijB,EAPe,SAACjjB,GACtB,OAAOA,EAAMc,WAAWmO,OAMJiU,CAAUljB,EAAMmjB,gBAAgB,EAGpD,OAFoBnjB,EACfojB,WAAWH,GACGE,aAAand,aAAU+I,UAAUqU,UAAUH,IC/DvDI,GAAgB,SAAUC,GAEjC,IAAIC,EAAYC,SAASC,eAAe,mBAUxC,GARKF,KACDA,EAAYC,SAASE,cAAc,QACzBlB,GAAK,kBACfe,EAAUI,UAAY,kBACtBrkB,KAAKskB,OAAOC,OAAOC,WAAWC,YAAYR,IAItB,IAApBD,EAAQU,QAAZ,CAkBA,GAZAT,EAAUU,UAAUC,OAAO,QAAS,QAAS,gBACzCZ,EAAQa,OACRZ,EAAUU,UAAUG,IAAId,EAAQa,QAEhCZ,EAAUU,UAAUG,IAAI,gBAQxBd,EAAQe,KAAM,CACd,IAAIC,EAAYhB,EAAQe,KAAK3J,KANjC,SAAiB6J,GACb,OAAOA,EAASC,SAQhB,GAAyB,IAArBF,EAAUrV,OAEV,YADAsU,EAAUkB,MAAMT,QAAU,GAI9B,IAAIU,EAAY,UAEhBA,GAAa,kBAEbJ,EAAUnnB,SAAQ,SAAUknB,EAAM5U,GAC9B,IAAIkV,EAASrB,EAAQsB,YAAYnV,GAC7BgV,EAAQ,cAAgBE,EAAOhe,gBACnC8d,GAAS,kBAAoBE,EAAOE,YAMpCH,GAHI,6CAFJD,GAAS,uBAIL,YACgBJ,KAExBK,GAAa,WAEGnB,EAAUuB,cAAc,SAC9BnB,UAAYe,EAG1B,IAAIK,EAAYzlB,KAAKskB,OAAOC,OAAOmB,UAC/BC,EAAY3lB,KAAKskB,OAAOC,OAAOqB,WAGnC3B,EAAUkB,MAAMT,QAAU,EAC1BT,EAAUkB,MAAMU,SAAW,WAC3B5B,EAAUkB,MAAMW,KAAOH,EAAY3B,EAAQ+B,OAAS,KACpD9B,EAAUkB,MAAMa,IAAMP,EAAYzB,EAAQiC,OAAS,KACnDhC,EAAUkB,MAAMe,WAAalC,EAAQmC,gBACrClC,EAAUkB,MAAMiB,SAAWpC,EAAQqC,aAAe,KAClDpC,EAAUkB,MAAMmB,UAAY,gBAC5BrC,EAAUkB,MAAMoB,WAAa,MAC7BtC,EAAUkB,MAAMjmB,MAAQ,2BACxB+kB,EAAUkB,MAAMqB,QAAU,YAC1BvC,EAAUkB,MAAMsB,WAAa,UAC7BxC,EAAUkB,MAAMuB,OAAS,oBACzBzC,EAAUkB,MAAMwB,UAAY,aAC5B1C,EAAUkB,MAAMyB,UAAY,+BAC5B3C,EAAUkB,MAAM0B,aAAe,WAjE3B5C,EAAUkB,MAAMT,QAAU,G,kxECIlC,IAyFKoC,GAzFCC,GAAoB/f,IAAO0P,IAAV,MA6BjB,qBAAGtP,MAAkB6E,WAAWrD,WAA/B,SAKDoe,GAAqBhgB,IAAO0P,IAAV,MAQlB,qBAAGtP,MAAkB6E,WAAWrD,WAA/B,SAMDqe,GAAyBjgB,IAAO0P,IAAV,MAMtB,qBAAGtP,MAAkB6E,WAAWrD,WAA/B,SAMDse,GAAwBlgB,IAAO0P,IAAV,MAMrByQ,GAA2BngB,IAAO0P,IAAV,MAOxB0Q,GAAqBpgB,YAAOmgB,GAAPngB,CAAH,MAIlBqgB,GAAergB,IAAO0P,IAAV,MAGZ,qBAAGtP,MAAkB6E,WAAWrD,WAA/B,U,SASFke,O,eAAAA,I,yCAAAA,I,qCAAAA,I,yCAAAA,I,2CAAAA,I,iCAAAA,I,6BAAAA,I,mDAAAA,I,sDAAAA,Q,KAkBL,IA0deQ,GArdWC,cAAS,WAAO,IAKlC9K,EACJE,EACA6K,EACAC,EACAC,EACAC,EAiCIC,EAAWC,EA3CsB,EAGjCre,KADAC,KAAQqK,EAFyB,EAEzBA,aAAcvC,EAFW,EAEXA,WAAYC,EAFD,EAECA,YAAaqC,EAFd,EAEcA,SAAUxB,EAFxB,EAEwBA,cAUvDiC,EAAmB9C,EAAYG,kBAC/BmW,EAAqBjU,EAASmB,2BAC9B+S,EAAyBxW,EAAW4L,eAAe7I,GACnDoI,EAAenL,EAAW+H,gBAAgBhF,GAC1C0T,EAA+BnU,EAAS0F,kCAExC0O,EAAmBpU,EAAS2F,WAC5BgD,EAA4B3I,EAASmJ,oBACrCkL,EAAmC,QAA3BpU,EAAa5C,UAEXiX,EAAmB9V,EAAc9M,qBAAzC4O,OAEFiU,EACFN,KACEC,QACmB1R,IAArB4R,KACEzL,EAEF4L,IACA3L,EAAW5I,EAASuF,cACpBuD,EAAkB9I,EAASwF,qBAEvBoD,GAAYA,EAASlO,GAAG,KACxBmZ,EAAmB7T,EAASyJ,oBAAoBb,EAAS/F,IAAI,KAGjEiR,EAA4BI,EAAuBhL,MAAMJ,GAAiBG,KAAKJ,GAC/E+K,EAAmB5T,EAASwU,eAC5Bb,EAAkB3T,EAASyU,eAK/B,IAAMC,EAAe,SAACX,EAAyB1oB,EAAespB,EAAeC,EAAiBC,GAC1F,MAAO,CACLF,QACAG,MAAOF,EACPhoB,KAAMmnB,EACNgB,WAAY,CACVC,SAAS,GAEXC,YAAa,EACbC,YAAa,SAACzjB,GACZ,IAAM0jB,EAAQ1jB,EAAQ2jB,QAAQxoB,KAAK6E,EAAQ4jB,WAE3C,OAAKF,EAAM/jB,OAAS6hB,GAAUqC,mBAAuBH,EAAM/jB,OAAS6hB,GAAUsC,mBACrE,EAEA,GAGX7D,YAAa,WACX,OAAOrmB,GAETmI,gBAAiBqhB,GAAW,cAC5BW,WAAYZ,EAAS,CAAC,GAAI,IAAM,GAChCa,YAAa,IAiBbC,EAAkB,SAACzZ,GACrB,OAAOd,GAAiBc,GAASgK,YAG/B0P,EAAgB,SAAC9oB,GACnB,OAAOA,EAAMoZ,YA6QbsO,GA1QkB,WACpB,IACIqB,EAAgBC,EADdC,EAAW,GAAIC,EAAcnN,EAASlO,GAAG,GAAIsb,EAAsBhW,EAASiW,aAChDC,EAAcpd,GAAK,GAAIqd,GAAiB,EAEtEC,EAAkBvG,GAAeiE,EAA0Bza,MAAM,MAEjE+c,EAAgBvb,GAAG+N,EAASvP,MAAM,QACpC+c,EAAkBtC,EAA0B7K,KAAKL,GACjDwN,EAAkBvG,GAAeuG,IAGnC,IAhC4BjB,EAAkC9pB,EAgCxDgrB,EAAoBrW,EAASyJ,oBAAoB2M,GACjDE,EAAqCF,EAAgBlN,MAAM4K,GAC9Dza,MAAMgd,GACNxT,IAAI/J,GAAK,KAAO+J,IAAIsR,IACpBlL,KAAKN,GACF4N,EAAqBvW,EAASoJ,gCAClCgN,EAAiBE,GAGfE,EAAwB,CAC1BC,KAAM,CACJC,EAAG,EACHC,EAAG,EACHvlB,KAAM6hB,GAAU/Y,MAElByZ,gBAAiB,CACf+C,EAAGhB,EAAgB5B,GACnB6C,EAAGhB,EAAchC,GACjBviB,KAAM6hB,GAAUqC,oBAyCpB,GAhCIS,IACFS,EAAOI,iBAAmB,CACxBF,EAAG,EACHC,EAAGhB,EAAc9B,GACjBziB,KAAM6hB,GAAU4D,mBAGlBL,EAAOM,eAAiB,CACtBJ,EAAGhB,EAAgB9M,GACnB+N,EAAGhB,EAAc9B,GACjBziB,KAAM6hB,GAAU8D,iBAGlBP,EAAOQ,WAAa,CAClBN,EAAGhB,EAAgB9M,GACnB+N,EAAGhB,EAAc9B,EAAiBxa,MAAM,IACxCjI,KAAM6hB,GAAUgE,cAIpBT,EAAOU,mBAAqB,CAC1BR,EAAGhB,EAAgBU,GACnBO,EAAGhB,EAAcU,GACjBjlB,KAAM6hB,GAAUkE,wBAGlBX,EAAOY,oBAAsB,CAC3BV,EAAGhB,EAAgBU,GACnBO,EAAGhB,EAAcY,GACjBnlB,KAAM6hB,GAAUoE,yBAIhB5d,GAAmBwG,EAAa5B,aAChC9E,GAAiBwB,QAEjB6a,EAAiB3V,EAAanD,UAC9B+Y,EAAe/B,EAA0B7K,KAAK2M,GAC9CM,EAAclW,EAASyJ,oBAAoBoM,GAC3CW,EAAM,aAAmB,CACvBE,EAAGhB,EAAgBG,GACnBc,EAAGhB,EAAcO,GACjB9kB,KAAM6hB,GAAUqE,eAGlBnB,GAAiB,EAEbN,EAAajT,IAAIwT,IAAkB,CACrC,IAAMmB,EAAqBvc,GACzB6U,GAAe1U,GAAiB0a,EAAaxc,MAAM,QAE/Cme,EAAoBxX,EAASyJ,oBACjC8N,GAGFf,EAAOU,mBAAqB,CAC1BR,EAAGhB,EAAgB6B,GACnBZ,EAAGhB,EAAc6B,GACjBpmB,KAAM6hB,GAAUkE,wBAkBlBpB,IAAgBC,GAClBF,EAAS5rB,KACPwqB,EACE,CAAE8B,EAAOI,iBAAkBJ,EAAO7C,gBAAiB6C,EAAOM,gBAtNrD,UAwNL,qBACA,IAKFd,GACFF,EAAS5rB,KACPwqB,EACE,CAAC8B,EAAOC,KAAMD,EAAO7C,iBAlOf,UAoON,aACA,EACA,YAIJmC,EAAS5rB,KACPwqB,EACE,CAAC8B,EAAO7C,gBAAiB6C,EAAOU,oBA5O1B,UA8ON,oBACA,MAyBJpB,EAAS5rB,KACPwqB,EACE,CAAC8B,EAAOM,eAAgBN,EAAOQ,YAxQzB,UA0QN,oBACA,IAIJlB,EAAS5rB,KACPwqB,EACE,CAAC8B,EAAOQ,WAAYR,EAAOU,oBAnRrB,UAqRN,aACA,KAMFf,GACFL,EAAS5rB,MAhNiBirB,EAkNtBqB,EAAOX,aAjNJ,CACHlB,MAiNA,gBAhNAG,MAAM,EACNloB,KAAM,CAACuoB,GACPD,YAAa,EACbuC,qBANwDpsB,EA7ElD,UAoFN4pB,YAAa,EACbyC,iBAAkBrsB,EAClBoqB,YAAa,KAgNnB1B,EAAY,CACV+B,WACAtiB,gBAAiB,WAGnBwgB,EAAe,CACb2D,SAAU,CACRC,SAAS,EACTC,OAAQ3H,GACR5M,OAAQ,SAACwU,GACP,OAA8B,IAAtBA,EAAYpL,OAAqC,IAAtBoL,EAAYpL,OAEjDqL,UAAW,CAETpD,MAAO,SAACmD,EAAalrB,GACnB,IAAIorB,EAAmC,IAAtBF,EAAYpL,MAAgB9f,EAAKkpB,SAASgC,EAAYG,cAActD,MACjF,UAAY/nB,EAAKkpB,SAASgC,EAAYG,cAActD,MAExD,OADAqD,GAAa,KAAMF,EAAYI,OAAOxc,QAAQ,GAAK,gBAKzDyc,qBAAqB,EACrBC,OAAQ,CAAEpD,SAAS,GACnBqD,OAAQ,CACNC,MAAO,CAAC,CACNlnB,KAAM,SACN4jB,SAAS,EACTuD,UAAW,CACTvD,SAAS,GAEXwD,WAAY,CACVxD,SAAS,EACTyD,YAAa,OAEfC,MAAO,CACLC,aAAa,EACbC,IAAKpC,EAAOU,mBAAmBR,EAC/BmC,MAAO,CACLpG,UAAW,OACXqG,UAAW,cAIjBC,MAAO,CAAC,CACN/D,SAAS,EACTuD,UAAW,CACTvD,SAAS,EACT3pB,MAnVQ,WAqVV2mB,SAAU,QACV0G,MAAO,CACLC,aAAa,EACbK,aAAcxC,EAAOU,mBAAmBP,EACxCzH,SAAU,SAACriB,GACT,OACEwO,GAAkBvC,GAAKjM,GAAQ,GAAK,SAI1C2rB,WAAY,CACVxD,SAAS,EACTyD,YAAa,QASrBQ,GAUF,IAUMC,EAA6B,WACjC,OACE,kBAAC/F,GAAD,KACI,kBAACC,GAAD,KACE,kBAACC,GAAD,KAAwBgB,EAAQ,YAAc,cAC9C,kBAACf,GAAD,KACGiB,EAAkB,UAAMlZ,GAAkBwY,GAAxB,QAAkD,UAGzE,kBAACT,GAAD,KACE,kBAACC,GAAD,iBACA,kBAACC,GAAD,CAA0B1D,UAAU,cACjC2E,EAAkB,UAAMvY,GAAc8X,EAA0Bza,MAAMwa,GAAmB,GAAI,GAAG,GAA9E,QAA6F,UAGpH,kBAACT,GAAD,KACE,kBAACC,GAAD,aACA,kBAACC,GAAD,KACGiB,EAAkB,UAAMvY,GAAe4M,EAASvP,MAAMwa,IAApC,QAAgE,UAGvF,kBAACT,GAAD,KACE,kBAACC,GAAD,uBAGA,kBAACC,GAAD,KACGiB,EAAkB,UAAMvY,GAAe8X,GAArB,QAAyD,YAOlFqF,EAA4B,WAChC,OACE,kBAAChG,GAAD,KACI,kBAACC,GAAD,KACE,kBAACC,GAAD,KAAuB,0BAAM/B,MAAO,CAACjmB,MAAO,YAArB,KAAvB,cACE,kBAACkoB,GAAD,CAAoBc,OAAO,GACxBE,EAAkB,UAAMlZ,GAAkBsY,GAAxB,QAAiD,cAG1E,kBAACP,GAAD,KACE,kBAACC,GAAD,KAAuB,0BAAM/B,MAAO,CAACjmB,MAAO,YAArB,KAAvB,eACE,kBAACkoB,GAAD,CAAoBc,OAAO,GACxBE,EAAkB,UAAMlZ,GAAkBuY,GAAxB,QAAkD,gBAOnF,OAAIW,EAEA,kBAACrB,GAAD,KA/DElT,EAASoZ,cACJF,IACElZ,EAASiW,aACXkD,IAEA,kBAAC,IAAME,SAAP,MA4DL,kBAAC7F,GAAD,KACGe,EACC,kBAAC,QAAD,CACE3nB,KAAMmnB,EACNra,QAASsa,IAKX,kBAAC,IAAMqF,SAAP,QAKA/E,EAUR,kBAACpB,GAAD,KACE,yBAAKtD,UAAU,UACf,yBAAK0J,IAAI,OAAOC,IAAK/tB,EAAQ,UAC3B,6BAFF,qBATA,kBAAC0nB,GAAD,KACE,yBAAKtD,UAAU,UACf,yBAAK0J,IAAI,OAAOC,IAAK/tB,EAAQ,UAC3B,6BAFF,oC,s6DC7jBV,IAAMguB,GAA0BrmB,IAAO0P,IAAV,MA6BvB,qBAAGtP,MAAkB6E,WAAWrD,WAA/B,SAKD0kB,GAAgCtmB,IAAO0P,IAAV,MAM7B,qBAAGtP,MAAkB6E,WAAWrD,WAA/B,SAMD2kB,GAA0BvmB,IAAO0P,IAAV,MAOvB,qBAAGtP,MAAkB6E,WAAWrD,WAA/B,SAOD4kB,GAA6BxmB,IAAO0P,IAAV,MAM1B+W,GAAgCzmB,IAAO0P,IAAV,MAuHpBgX,GAhHUnG,cAAS,WAAO,IAKjC5K,EACAgL,EANgC,EAGhCne,KADAC,KAAQ8H,EAFwB,EAExBA,WAAYC,EAFY,EAEZA,YAAaqC,EAFD,EAECA,SAAUxB,EAFX,EAEWA,cAMzC4H,EAAcpG,EAASqF,iBACvBgB,EAAcrG,EAASsF,iBACvBwU,EAAW9Z,EAAS+Z,cACpBtZ,EAAmB9C,EAAYG,kBAC/BmW,EAAqBjU,EAASmB,2BAC9B+S,EAAyBxW,EAAW4L,eAAe7I,GACnDoI,EAAenL,EAAW+H,gBAAgBhF,GAC1C0T,EAA+BnU,EAAS0F,kCAExC0O,EAAmBpU,EAAS2F,WAC5BgD,EAAiB3I,EAASmJ,oBAlBI,EAoBQ3K,EAAc9M,qBAA1C4iB,EApBoB,EAoB5BhU,OAAwBrP,EApBI,EAoBJA,QAE1BsjB,EACFN,KACEC,QACmB1R,IAArB4R,KACEzL,EAEF4L,IACAzL,EAAkB9I,EAASwF,qBAC3BsO,EAA4BI,EAAuBhL,MAAMJ,GAAiBG,KAAKJ,IAyDnF,OAAI0L,EAEA,kBAACiF,GAAD,KAvDExZ,EAASiW,aAET,kBAACwD,GAAD,KACE,kBAACC,GAAD,KACE,kBAACC,GAAD,qBACA,kBAACC,GAAD,KACGrF,EAAkB,UAAMvY,GAAckY,GAApB,QAAoD,UAI3E,kBAACwF,GAAD,KACE,kBAACC,GAAD,uBAGA,kBAACC,GAAD,CAA+BhK,UAAU,cACtC2E,EAAkB,UAAMvY,GAAe8X,GAArB,QAAyD,UAIhF,kBAAC4F,GAAD,KACE,kBAACC,GAAD,gBACA,kBAACC,GAAD,KACGrF,EAAkB,UAAMvY,GAAc2M,GAApB,QAA4C,UAInE,kBAAC+Q,GAAD,KACE,kBAACC,GAAD,oBACA,kBAACC,GAAD,KACGrF,EAAkB,UAAMnO,EAAN,YAAqBnV,EAAQyH,MAAMshB,QAAQ3T,EAAY1Y,aAAgB,MAI9F,kBAAC+rB,GAAD,KACE,kBAACC,GAAD,wBACA,kBAACC,GAAD,KACGrF,EAAkB,UAAMvY,GAAc8d,EAAU,GAAI,GAAlC,QAA6C,UAIpE,kBAACJ,GAAD,KACE,kBAACC,GAAD,gCACA,kBAACC,GAAD,KACGrF,EAAkB,UAAMzb,GAAK,KAAO+J,IAAIsR,GAA8BxmB,WAApD,MAAqE,SAMzF,kBAAC,IAAM0rB,SAAP,OAUD/E,EAUR,kBAACkF,GAAD,KACE,yBAAK5J,UAAU,UACf,yBAAK0J,IAAI,OAAOC,IAAK/tB,EAAQ,UAC3B,6BAFF,iCATA,kBAACguB,GAAD,KACE,yBAAK5J,UAAU,UACf,yBAAK0J,IAAI,OAAOC,IAAK/tB,EAAQ,UAC3B,6BAFF,0C,yjEC3KV,IAAMyuB,GAAwB9mB,IAAO0P,IAAV,MA8BrBqX,GAAoB/mB,IAAO0P,IAAV,MASjBsX,GAAsBhnB,IAAO0P,IAAV,MAUnBuX,GAAcjnB,IAAO0P,IAAV,MACJ,SAACwX,GAAD,OAAWA,EAAMC,OAAS,SAGjCC,GAAmBpnB,IAAO0P,IAAV,MAKhB2X,GAAWrnB,IAAO0P,IAAV,MAYR4X,GAAYtnB,IAAO0P,IAAV,MASF,SAACwX,GAAD,OAAWA,EAAMhvB,SACjB,SAACgvB,GAAD,OAAWA,EAAMC,OAAS,SACrB,SAACD,GAAD,OAAWA,EAAMK,SAChB,SAACL,GAAD,OAAWA,EAAMM,UA+FrBC,GA5FQlH,cAAS,WAAO,IAAD,EAG9B/d,KADAC,KAAQqK,EAFsB,EAEtBA,aAActC,EAFQ,EAERA,YAAaa,EAFL,EAEKA,cAGnCqB,EAAe,GAOnB,OANII,EAAaH,kBACbD,EAAeI,EAAaJ,cAGTrB,EAAc9M,qBAAqB4O,OAYvB,IAAxBT,EAAa/D,OAElB,kBAACme,GAAD,KACE,yBAAKrK,UAAU,UACf,yBAAK0J,IAAI,OAAOC,IAAK/tB,EAAQ,UACzB,6BAFJ,gCASF,kBAACyuB,GAAD,KACI,kBAACC,GAAD,sBACA,kBAACC,GAAD,KACI,kBAACC,GAAD,CAAaE,MAAM,QAAQ1K,UAAU,cAArC,QAGA,kBAACwK,GAAD,CAAaE,MAAM,SAAnB,SACW3c,EAAYuI,aAAa2U,gBAEpC,kBAACT,GAAD,mBACA,kBAACA,GAAD,cACWzc,EAAYuI,aAAa2U,gBAEpC,kBAACT,GAAD,CAAaxK,UAAU,eAAvB,SAEJ,kBAAC2K,GAAD,KACC1a,EAAa0H,KAAI,SAACuT,EAAOxe,GAAR,OACfwe,GAASA,EAAM1pB,KACd,kBAACopB,GAAD,CAAUO,IAAK,WAAWze,GACtB,kBAACme,GAAD,CACIH,MAAM,QACNjvB,MACIyvB,EAAM1pB,OAAS6T,GAAUqD,IACnB,mBACA,kBAEVoS,MAAM,OACNC,OAAO,OAENG,EAAM1pB,MAEX,kBAACqpB,GAAD,CAAWH,MAAM,SACZjf,GAAkByf,EAAM7d,QAE7B,kBAACwd,GAAD,KAAYze,GAAc8e,EAAM1f,SAChC,kBAACqf,GAAD,KACKK,EAAMvc,UACDvC,GAAc8e,EAAMvc,WACpBvC,GAAc8e,EAAMtS,gBAE9B,kBAACiS,GAAD,KACI,uBACIrvB,KAAM0vB,EAAMtuB,KACZwH,OAAO,IACP4b,UAAU,iBAETkL,EAAM1S,aAIlB,mCAtET,kBAAC6R,GAAD,KACE,yBAAKrK,UAAU,UACf,yBAAK0J,IAAI,OAAOC,IAAK/tB,EAAQ,UACzB,6BAFJ,qC,6XCxGZ,IAAMwvB,GAAS7nB,IAAO0P,IAAV,MAiBGoY,GAJM,SAAC,GAA2B,IAAzBxlB,EAAwB,EAAxBA,SAAUylB,EAAc,EAAdA,QAC9B,OAAO,kBAAC,GAAD,CAAQA,QAASA,GAAUzlB,I,2WCdtC,IAAMulB,GAAS7nB,IAAO0P,IAAV,MAgBGsY,GAJQ,SAAC,GAAkB,IAAhB1lB,EAAe,EAAfA,SACtB,OAAO,kBAAC,GAAD,KAASA,I,wqDCApB,IAAM2lB,GAAcjoB,IAAO0P,IAAV,MAQXwY,GAAUloB,IAAO0P,IAAV,MAUPyY,GAAenoB,IAAO0P,IAAV,MAKZ0Y,GAAcpoB,IAAO0P,IAAV,MAUI,SAACwX,GAAD,OAAWA,EAAMlrB,MAAQ,OAAS,UAejDqsB,GAAcroB,IAAO0P,IAAV,MAMX4Y,GAAetoB,IAAO0P,IAAV,MA0JH6Y,GA5IEhI,cAAS,WAAO,IAAD,EAGxB/d,KADAC,KAAQoK,EAFgB,EAEhBA,SAAUC,EAFM,EAENA,aAActC,EAFR,EAEQA,YAAaa,EAFrB,EAEqBA,cAAed,EAFpC,EAEoCA,WAFpC,EAKgByQ,mBAAS,IALzB,mBAKrBwN,EALqB,KAKLC,EALK,KAOpB7qB,EAAYyN,EAAc9M,qBAA1BX,QAEFkM,EAA4B,KAAnB0e,EAAyB1b,EAAaR,aAAa,GAAKQ,EAAa4b,iBAChFC,EAAqB7b,EAAa5B,UAAY,GAAkB,OAAZtN,EACpDgrB,EAA8C,IAA7B9b,EAAavD,aAA0C,KAAnBif,EACnDK,EAAWhc,EAAS2F,WACpBsW,EAAoBjc,EAASE,mBAC7Bgc,OAAoC1Z,IAAtByZ,GAAwD,kFAArBA,EACjD1H,OAAkC/R,IAAbwZ,QAAgDxZ,IAAtByZ,EAE9B,KAAnBN,GAA0B1b,EAAanD,UAAUrB,GAAG,IACtDwE,EAAarB,aAAa9F,GAAK,IAGjC,IAAMkiB,EAAS,SAAC,GAAmC,IAAjC1a,EAAgC,EAAhCA,OAAQ7K,EAAwB,EAAxBA,SAAUylB,EAAc,EAAdA,QAChC,OAAe,IAAX5a,EACO,kBAAC,GAAD,CAAc4a,QAASA,GAAUzlB,GAGpC,kBAAC,GAAD,KAAiBA,IASvB0mB,EAAc,uCAAG,WAAOtvB,GAAP,mBAAAwF,EAAA,sDACb+pB,EAAcrrB,EAAW2M,EAAWM,gBAAgBjN,GAAW,EACrElE,EAAQA,EAAMwvB,QAAQ,MAAO,IAC7BP,EAAiC,OAAZ/qB,EAEfurB,EAAsB7iB,GAAmB5M,EAAO,CACpD+N,SAAUO,GACN6E,EAASE,oBAEbzF,WAAa1J,EAAWoK,GAAiBihB,GAAc,OAEzDR,EAAkBU,GAEdA,IAAwB/iB,GAAiBwB,OACzCkF,EAAasc,aAAa1vB,GACpBsR,EAAY6B,EAASG,eAAenF,GAAmBnO,IAC7DoT,EAAaG,gBAAgBjC,KAE7B8B,EAAarB,aAAa9F,GAAK,IAC/BmH,EAAavB,YAAY5F,GAAK,KAnBf,2CAAH,sDAsBpB,OACI,kBAACsiB,GAAD,KACI,kBAACC,GAAD,KACI,kBAACC,GAAD,sBACA,6BACKre,EADL,IACaU,EAAYuI,aAAa2U,iBAG1C,kBAACQ,GAAD,KACI,kBAACC,GAAD,yBACA,6BAAMtf,GAAciE,EAAanD,WAAjC,SAEJ,kBAAC0e,GAAD,KACI,kBAACD,GAAD,CAAapsB,MAAOwsB,IAAmBpiB,GAAiBwB,OAA4B,KAAnB4gB,GAC7D,2BACI/L,UAAU,kBACVxe,KAAK,OACLorB,YAAY,IACZC,SAAU,SAACjtB,GAAD,OAAO2sB,EAAe3sB,EAAEwE,OAAOnH,UAE7C,qCAEFkvB,EACE,kBAACN,GAAD,SAAe,iDAAf,KAEA,qCAEFK,GAAsBH,IAAmBpiB,GAAiBwB,MACxD,kBAAC0gB,GAAD,KAEOE,IAAmBpiB,GAAiBwB,MAAS,8BAAO4gB,GACrDG,EAAoB,mEAA8C,sCAIxE,sCAGNI,IAAgBD,EAChB,8BACA,0BAAM3K,MACJ,CAACe,WAAY,SAAUE,SAAU,OAAQlnB,MAAO,UAAWqxB,aAAc,SAD3E,uBAEuBT,EAAoBjgB,GAAcigB,EAAmB,GAAI,GAAK,MAFrF,QAIF,kBAACjB,EAAD,CACI1a,OAtEDvP,GAAW4qB,IAAmBpiB,GAAiBwB,OAASwZ,IAsE7B2H,EAC1BhB,QAAS,WACLjb,EAAavD,YAAclD,GAAiBmjB,WAC5C3c,EACK1C,IACGvM,EACAiK,GAAmB1B,GAAI2G,EAAa5B,YACpCvF,GAAK,IAER5J,GAAGrD,EAASgD,SAAS,SAACrC,GACnByT,EAAavD,YACTlD,GAAiBojB,eAExB1tB,GAAGrD,EAASkD,SAAS,SAACD,GACnBmR,EAAa4c,eAAe,CACxBxe,UAAWrD,GAAmBiF,EAAa5B,WAC3CvB,UAAWmD,EAAanD,UACxBI,SAAU+C,EAAa/C,WAE3B+C,EAAavD,YACTlD,GAAiBsjB,aAExB5tB,GAAGrD,EAASuD,UAAU,SAAC2tB,GACpB9c,EAAavD,YACTlD,GAAiBwjB,UAExB9tB,GAAGrD,EAASwD,WAAW,SAACF,GACrB8Q,EAAavD,YACTlD,GAAiBwjB,YAI/Bd,EAAe,eAAgB,e,ghDCvNjD,IAAMe,GAAiB9pB,IAAO0P,IAAV,MACN,SAACwX,GAAD,OAAWA,EAAM6C,QAAU,UAC5B,SAAC7C,GAAD,OAAWA,EAAMC,OAAS,UAiExB6C,GAJO,SAAC,GAAuB,IAArBD,EAAoB,EAApBA,OAAQ5C,EAAY,EAAZA,MAC7B,OAAO,kBAAC2C,GAAD,CAAgBC,OAAQA,EAAQ5C,MAAOA,K,w0BC1DlD,IAAMc,GAAcjoB,IAAO0P,IAAV,MAOXwY,GAAUloB,IAAO0P,IAAV,MASPyY,GAAenoB,IAAO0P,IAAV,MAKZua,GAAkBjqB,IAAO0P,IAAV,MAwDNwa,GA7CC3J,cAAS,WAAO,IAAD,EAGvB/d,KADAC,KAAQqK,EAFe,EAEfA,aAAatC,EAFE,EAEFA,YAGnBV,EAAQgD,EAAa4b,iBACrBxd,EAAY4B,EAAaqd,kBAEzBtC,EAAS,SAAC,GAAmC,IAAjC1a,EAAgC,EAAhCA,OAAQ7K,EAAwB,EAAxBA,SAAUylB,EAAc,EAAdA,QAChC,OAAe,IAAX5a,EACO,kBAAC,GAAD,CAAc4a,QAASA,GAAUzlB,GAGpC,kBAAC,GAAD,KAAiBA,IAK7B,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,KACI,kBAAC,GAAD,cACA,6BACKwH,EADL,IACaU,EAAYuI,aAAa2U,iBAG1C,kBAAC,GAAD,KACI,kBAAC,GAAD,yBACA,6BACK7e,GAAciE,EAAanD,WADhC,SAIJ,kBAAC,GAAD,KACI,kBAAC,GAAD,mBACA,6BAAMuB,EAAN,IAAkBV,EAAYuI,aAAa2U,iBAE/C,kBAACuC,GAAD,2BAEI,kBAAC,GAAD,OAEJ,kBAACpC,EAAD,CAAQ1a,QAAQ,GAAhB,e,w0BCxEZ,IAAM8a,GAAcjoB,IAAO0P,IAAV,MAOXwY,GAAUloB,IAAO0P,IAAV,MAUPyY,GAAenoB,IAAO0P,IAAV,MAKZ0a,GAAcpqB,IAAO0P,IAAV,MAuDF2a,GA5CQ9J,cAAS,WAAO,IAAD,EAG9B/d,KADAC,KAAQqK,EAFsB,EAEtBA,aAActC,EAFQ,EAERA,YAGpBV,EAAQgD,EAAa4b,iBACrBxd,EAAY4B,EAAaqd,kBAEzBtC,EAAS,SAAC,GAAmC,IAAjC1a,EAAgC,EAAhCA,OAAQ7K,EAAwB,EAAxBA,SAAUylB,EAAc,EAAdA,QAChC,OAAe,IAAX5a,EACO,kBAAC,GAAD,CAAc4a,QAASA,GAAUzlB,GAGpC,kBAAC,GAAD,KAAiBA,IAI7B,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,KACI,kBAAC,GAAD,cACA,6BACKwH,EADL,IACaU,EAAYuI,aAAa2U,iBAG1C,kBAAC,GAAD,KACI,kBAAC,GAAD,yBACA,6BACK7e,GAAciE,EAAanD,WADhC,SAIJ,kBAAC,GAAD,KACI,kBAAC,GAAD,mBACA,6BAAMuB,EAAN,IAAkBV,EAAYuI,aAAa2U,iBAE/C,kBAAC0C,GAAD,sBAEI,kBAAC,GAAD,OAEJ,kBAACvC,EAAD,CAAQ1a,QAAQ,GAAhB,e,sjCCzEZ,IAAM8a,GAAcjoB,IAAO0P,IAAV,MAOXwY,GAAUloB,IAAO0P,IAAV,MASPyY,GAAenoB,IAAO0P,IAAV,MAKZ4a,GAAYtqB,IAAO0P,IAAV,MAYT6a,GAAoBvqB,IAAO0P,IAAV,MA8DR8a,GArDMjK,cAAS,WAAO,IAAD,EAG5B/d,KADAC,KAAQqK,EAFoB,EAEpBA,aAActC,EAFM,EAENA,YAFM,EAKSsC,EAAa1C,YAA/Cc,EALyB,EAKzBA,UAAWnB,EALc,EAKdA,SAAUJ,EALI,EAKJA,UAEtBke,EAAS,SAAC,GAAmC,IAAjC1a,EAAgC,EAAhCA,OAAQ7K,EAAwB,EAAxBA,SAAUylB,EAAc,EAAdA,QAChC,OAAe,IAAX5a,EACO,kBAAC,GAAD,CAAc4a,QAASA,GAAUzlB,GAGpC,kBAAC,GAAD,KAAiBA,IAK7B,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,KACI,kBAAC,GAAD,sBACA,6BACK4F,GAAkB6B,GADvB,IACmCS,EAAYuI,aAAa2U,iBAGhE,kBAAC,GAAD,KACI,kBAAC,GAAD,yBACA,6BACK7e,GAAcc,GADnB,SAIJ,kBAAC,GAAD,KACA,kBAAC,GAAD,mBACI,6BAAMd,GAAcqC,GAApB,IAAiCV,EAAYuI,aAAa2U,iBAE9D,kBAAC4C,GAAD,iBAEI,kBAACC,GAAD,KACI,yBAAKpE,IAAI,OAAOC,IAAK/tB,EAAQ,YAGrC,kBAACwvB,EAAD,CACI1a,QAAQ,EACR4a,QAAS,WACLjb,EAAa2d,iBAHrB,iBCpFNC,GACQ,YADRA,GAEgB,kBAFhBA,GAGW,cAHXA,GAIS,YAJTA,GAMM,SAiCGC,GA9BCpK,cAAS,WACrB,IAAMqK,EAAU,SAAC,GAAsB,IAC/BC,EADWC,EAAmB,EAAnBA,aAcf,OAXID,EADiB,IAAjBC,EACeJ,GACS,IAAjBI,EACQJ,GACS,IAAjBI,EACQJ,GACS,IAAjBI,EACQJ,GAEAA,MAGEA,GACV,kBAAC,GAAD,MACAG,IAAiBH,GACjB,kBAAC,GAAD,MACAG,IAAiBH,GACjB,kBAAC,GAAD,MACAG,IAAiBH,GACjB,kBAAC,GAAD,MACAG,IAAiBH,GACjB,kBAAC,GAAD,WADJ,GAIX,OAAO,kBAACE,EAAD,CAASE,aAAc,O,grCCpClC,IAAMC,GAAiB/qB,IAAO0P,IAAV,MAMdsb,GAAkBhrB,IAAO0P,IAAV,MAQf6a,GAAoBvqB,IAAO0P,IAAV,MAUjBub,GAAOjrB,IAAO0P,IAAV,MAYJwb,GAAelrB,IAAO0P,IAAV,MAsDHyb,GA1CA5K,cAAS,YAAoB,IAAjB6K,EAAgB,EAAhBA,UAAgB,EAGnC5oB,KADAC,KAAQ4I,EAF2B,EAE3BA,cAAeb,EAFY,EAEZA,YAAaD,EAFD,EAECA,WAAYuC,EAFb,EAEaA,aAG9CyC,EAAe/E,EAAYG,gBAAgBygB,GAEjD,OACI,kBAACL,GAAD,KACI,kBAACC,GAAD,KACI,kBAAC,GAAD,KACI,yBAAK7E,IAAI,kBAAkBC,IAAK/tB,EAAQ,WAE5C,kBAAC4yB,GAAD,eAAcG,EAAd,iBAEJ,kBAACF,GAAD,CACInD,QAAS,WACLjb,EAAapD,eAAiBrD,GAAiBmjB,WAC/Cjf,EAAW8gB,WACPhgB,EAAc9M,qBACdgR,EACA/E,EAAYG,mBACd5O,GAAGrD,EAASgD,SAAS,SAACrC,GACpByT,EAAaiC,kBAAkB1I,GAAiBojB,gBAEnD1tB,GAAGrD,EAASkD,SAAS,SAACD,GACnBmR,EAAaiC,kBAAkB1I,GAAiBsjB,cAEnD5tB,GAAGrD,EAASuD,UAAU,SAAC2tB,GACpB9c,EAAaiC,kBAAkB1I,GAAiBwjB,WAEnD9tB,GAAGrD,EAASwD,WAAW,SAACF,GACrB8Q,EAAaiC,kBAAkB1I,GAAiBwjB,aAjB5D,UAqBYuB,O,g/CCvFxB,IAAML,GAAiB/qB,IAAO0P,IAAV,MAQdsb,GAAkBhrB,IAAO0P,IAAV,MAQf4b,GAAWtrB,IAAO0P,IAAV,MAOR6b,GAAQvrB,IAAO0P,IAAV,MAYL8b,GAAWxrB,IAAO0P,IAAV,MAYR+b,GAAsBzrB,IAAO0P,IAAV,MAyBVgc,GAdO,SAAC,GAAiC,IAA/BN,EAA8B,EAA9BA,UAAWO,EAAmB,EAAnBA,aAChC,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAe5B,OAAO,OAAO5C,MAAM,SACnC,kBAACmE,GAAD,aAEJ,kBAACC,GAAD,eAAeH,EAAf,gBACA,kBAACI,GAAD,KAAWG,GACX,kBAACF,GAAD,eAA6BL,K,kqDCjEzC,IAAML,GAAiB/qB,IAAO0P,IAAV,MAQdsb,GAAkBhrB,IAAO0P,IAAV,MAMf6a,GAAoBvqB,IAAO0P,IAAV,MAYjBkc,GAAW5rB,IAAOsB,IAAV,MAKR2pB,GAAOjrB,IAAO0P,IAAV,MAYJmc,GAAS7rB,IAAO0P,IAAV,MAYNwb,GAAelrB,IAAO0P,IAAV,MA2CHoc,GA/BQvL,cAAS,WAAO,IAEvBzT,EACRtK,KADAC,KAAQqK,aAGN+a,EAAS,WACX,OACI,kBAAC,GAAD,CACIE,QAAS,WACLjb,EAAaiC,kBAAkB1I,GAAiB4I,YAFxD,aAUR,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,KACI,kBAAC,GAAD,KACI,kBAAC2c,GAAD,CAAUxF,IAAK/tB,EAAQ,YAG/B,kBAAC,GAAD,+BACA,kBAACwzB,GAAD,kBACA,kBAAChE,EAAD,qBChEGkE,GA3BIxL,cAAS,WAAO,IAEnBzT,EACRtK,KADAC,KAAQqK,aAGZ,OAAIA,EAAapD,iBAAmBrD,GAAiBmD,KAC1C,kBAAC,GAAD,CAAQ4hB,UAAU,QAClBte,EAAapD,iBAAmBrD,GAAiBmjB,WACjD,kBAAC,GAAD,CACP4B,UAAU,MACVO,aAAa,wBAEN7e,EAAapD,iBAAmBrD,GAAiBojB,YACjD,kBAAC,GAAD,CACC2B,UAAU,MACVO,aAAa,6BAGd7e,EAAapD,iBAAmBrD,GAAiBsjB,UACjD,kBAAC,GAAD,OACA7c,EAAapD,eAAmBrD,GAAiBwjB,OACjD,kBAAC,GAAD,CAAQuB,UAAU,Y,yqDCbjC,IAAMnD,GAAcjoB,IAAO0P,IAAV,MAQXwY,GAAUloB,IAAO0P,IAAV,MAUPyY,GAAenoB,IAAO0P,IAAV,MAKZ0Y,GAAcpoB,IAAO0P,IAAV,MAyBX2Y,GAAcroB,IAAO0P,IAAV,MAMX4Y,GAAetoB,IAAO0P,IAAV,MAmJHsc,GArIGzL,cAAS,SAAC2G,GAAW,IAAD,EAG9B1kB,KADAC,KAAQoK,EAFsB,EAEtBA,SAAUC,EAFY,EAEZA,aAActC,EAFF,EAEEA,YAAaa,EAFf,EAEeA,cAAed,EAF9B,EAE8BA,WAF9B,EAKYyQ,mBAAS,IALrB,mBAK3BiR,EAL2B,KAKVC,EALU,KAO1BtuB,EAAYyN,EAAc9M,qBAA1BX,QACFkM,EAA6B,KAApBmiB,EAA0Bnf,EAAaR,aAAa,GAAKQ,EAAaqf,kBAC/EtiB,EAAqC,KAApBoiB,EAA0BtmB,GAAK,GAAKmH,EAAajD,cACpE+e,EAA+C,IAA9B9b,EAAarD,cAA4C,KAApBwiB,EACpDG,EAAWvf,EAASoZ,cAAgB,WAAa,OAM/B,KAApBgG,GAAsD,IAA5Bnf,EAAalD,YACzCkD,EAAauf,cAAc1mB,GAAK,IAGlC,IAAMqjB,EAAc,uCAAG,WAAOtvB,GAAP,mBAAAwF,EAAA,sDACnBxF,EAAQA,EAAMwvB,QAAQ,MAAO,IACvBoD,EAAe1uB,EAAW2M,EAAWQ,WAAWP,EAAYG,kBAAmB/M,GAAW,EAC1F2uB,EAAuBjmB,GAAmB5M,EAAO,CACrD4N,WAAa1J,EAAWoK,GAAiBskB,GAAc,OAEzDJ,EAAmBK,GAEfA,IAAyBnmB,GAAiBwB,OAC1CkF,EAAauf,cAAc3yB,GACrBiS,EAAakB,EAAS2f,gBAAgB3kB,GAAmBnO,IAC/DoT,EAAa2f,iBAAiB9gB,KAE9BmB,EAAauf,cAAc1mB,GAAK,IAChCmH,EAAajB,aAAalG,GAAK,IAC/BmH,EAAaf,iBAAiBpG,GAAK,KAfpB,2CAAH,sDAoBdkiB,EAAS,SAAC,GAAmC,IAAjC1a,EAAgC,EAAhCA,OAAQ7K,EAAwB,EAAxBA,SAAUylB,EAAc,EAAdA,QAChC,OAAe,IAAX5a,EAEI,kBAAC,GAAD,CAAc4a,QAASA,GAAUzlB,GAIjC,kBAAC,GAAD,KAAiBA,IAK7B,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,KACI,kBAAC,GAAD,sBACA,6BACKwH,EADL,IACaU,EAAYuI,aAAa2U,iBAG1C,kBAAC,GAAD,KACI,kBAAC,GAAD,yBACA,6BACK7e,GAAcgB,GADnB,IACoCW,EAAYuI,aAAa2U,iBAGjE,kBAAC,GAAD,KACI,kBAAC,GAAD,KACI,2BACIjL,UAAU,kBACVxe,KAAK,OACLorB,YAAY,IACZC,SAAU,SAACjtB,GAAD,OACN2sB,EAAe3sB,EAAEwE,OAAOnH,UAGhC,qCAEFkvB,EACE,kBAAC,GAAD,SAAe,iDAAf,KAEA,qCAEHqD,IAAoB7lB,GAAiBwB,MAClC,kBAAC,GAAD,KACGqkB,GAGH,sCAGR,kBAACpE,EAAD,CACI1a,OA/ED8e,IAAoB7lB,GAAiBwB,MAgFpCmgB,QAAS,WACLjb,EAAarD,aAAepD,GAAiBmjB,WAG7C3c,EACKxC,KACGzM,EACAiK,GAAmB1B,GAAI2G,EAAalD,aACpCjE,GAAK,IAER5J,GAAGrD,EAASgD,SAAS,SAACrC,GACnByT,EAAarD,aACTpD,GAAiBojB,eAExB1tB,GAAGrD,EAASkD,SAAS,SAACD,GACnBmR,EAAa4f,gBAAgB,CACzB1iB,UAAWrE,GAAKmE,GAChBF,WAAY/B,GAAmBiF,EAAalD,YAC5CC,cAAeiD,EAAajD,gBAEhCiD,EAAarD,aACTpD,GAAiBsjB,aAExB5tB,GAAGrD,EAASuD,UAAU,SAACD,GACpB8Q,EAAarD,aACTpD,GAAiBwjB,UAExB9tB,GAAGrD,EAASwD,WAAW,SAACF,GACrB8Q,EAAarD,aACTpD,GAAiBwjB,YAIhCuC,EAnCL,IAmC8B,aAAdA,EAA2B,MAAQ,W,w0BC1M/D,IAAMnE,GAAcjoB,IAAO0P,IAAV,MAOXwY,GAAUloB,IAAO0P,IAAV,MASPyY,GAAenoB,IAAO0P,IAAV,MAKZua,GAAkBjqB,IAAO0P,IAAV,MA8DNid,GAjDEpM,cAAS,SAAC2G,GAAW,IAAD,EAG7B1kB,KADAC,KAAQoK,EAFqB,EAErBA,SAAUC,EAFW,EAEXA,aAActC,EAFH,EAEGA,YAG9BV,EAAQgD,EAAaqf,kBACrBtiB,EAAgBiD,EAAajD,cAC7BD,EAAakD,EAAa8f,mBAC1BR,EAAWvf,EAASoZ,YAAYzb,EAAYG,mBAAqB,WAAa,OAE9Ekd,EAAS,SAAC,GAAmC,IAAjC1a,EAAgC,EAAhCA,OAAQ7K,EAAwB,EAAxBA,SAAUylB,EAAc,EAAdA,QAChC,OAAe,IAAX5a,EAEI,kBAAC,GAAD,CAAc4a,QAASA,GAAUzlB,GAIjC,kBAAC,GAAD,KAAiBA,IAK7B,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,KACI,kBAAC,GAAD,sBACA,6BACKwH,EADL,IACaU,EAAYuI,aAAa2U,iBAG1C,kBAAC,GAAD,KACI,kBAAC,GAAD,yBACA,6BACK7e,GAAcgB,GADnB,IACoCW,EAAYuI,aAAa2U,iBAGjE,kBAAC,GAAD,KACI,kBAAC,GAAD,oBACA,6BAAM9d,EAAN,SAEJ,kBAAC,GAAD,2BAEI,kBAAC,GAAD,OAEJ,kBAACie,EAAD,CAAQ1a,QAAQ,GAAQif,EAAxB,IAAiD,aAAdA,EAA2B,MAAQ,W,w0BC7ElF,IAAMnE,GAAcjoB,IAAO0P,IAAV,MAOXwY,GAAUloB,IAAO0P,IAAV,MASPyY,GAAenoB,IAAO0P,IAAV,MAKZ0a,GAAcpqB,IAAO0P,IAAV,MA4DFmd,GAjDStM,cAAS,SAAC2G,GAAW,IAAD,EAGpC1kB,KADAC,KAAQoK,EAF4B,EAE5BA,SAAUC,EAFkB,EAElBA,aAActC,EAFI,EAEJA,YAG9BV,EAAQgD,EAAaqf,kBACrBtiB,EAAgBiD,EAAajD,cAC7BD,EAAakD,EAAa8f,mBAC1BR,EAAWvf,EAASoZ,YAAYzb,EAAYG,mBAAqB,WAAa,OAE9Ekd,EAAS,SAAC,GAAmC,IAAjC1a,EAAgC,EAAhCA,OAAQ7K,EAAwB,EAAxBA,SAAUylB,EAAc,EAAdA,QAChC,OAAe,IAAX5a,EAEI,kBAAC,GAAD,CAAc4a,QAASA,GAAUzlB,GAIjC,kBAAC,GAAD,KAAiBA,IAK7B,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,KACI,kBAAC,GAAD,sBACA,6BACKwH,EADL,IACaU,EAAYuI,aAAa2U,iBAG1C,kBAAC,GAAD,KACI,kBAAC,GAAD,yBACA,6BACK7e,GAAcgB,GADnB,IACoCW,EAAYuI,aAAa2U,iBAGjE,kBAAC,GAAD,KACI,kBAAC,GAAD,oBACA,6BAAM9d,EAAN,SAEJ,kBAAC,GAAD,sBAEI,kBAAC,GAAD,OAEJ,kBAACie,EAAD,CAAQ1a,QAAQ,GAAQif,EAAxB,IAAiD,aAAdA,EAA2B,MAAQ,W,sjCC9ElF,IAAMnE,GAAcjoB,IAAO0P,IAAV,MAOXwY,GAAUloB,IAAO0P,IAAV,MASPyY,GAAenoB,IAAO0P,IAAV,MAKZ4a,GAAYtqB,IAAO0P,IAAV,MAYT6a,GAAoBvqB,IAAO0P,IAAV,MAkERod,GAzDOvM,cAAS,SAAC2G,GAAW,IAAD,EAGlC1kB,KADAC,KAAQoK,EAF0B,EAE1BA,SAAUC,EAFgB,EAEhBA,aAActC,EAFE,EAEFA,YAG9B4hB,EAAWvf,EAASoZ,YAAYzb,EAAYG,mBAAqB,WAAa,OAL9C,EAOSmC,EAAaxC,aAArDN,EAP+B,EAO/BA,UAAWH,EAPoB,EAOpBA,cAAeD,EAPK,EAOLA,WAE3Bie,EAAS,SAAC,GAAmC,IAAjC1a,EAAgC,EAAhCA,OAAQ7K,EAAwB,EAAxBA,SAAUylB,EAAc,EAAdA,QAChC,OAAe,IAAX5a,EAEI,kBAAC,GAAD,CAAc4a,QAASA,GAAUzlB,GAIjC,kBAAC,GAAD,KAAiBA,IAK7B,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,KACI,kBAAC,GAAD,sBACA,6BACK4F,GAAkB8B,GADvB,IACoCQ,EAAYuI,aAAa2U,iBAGjE,kBAAC,GAAD,KACI,kBAAC,GAAD,yBACA,6BACK7e,GAAcgB,GADnB,IACoCW,EAAYuI,aAAa2U,iBAGjE,kBAAC,GAAD,KACI,kBAAC,GAAD,oBACA,6BAAM7e,GAAce,GAApB,SAEJ,kBAAC,GAAD,iBAEI,kBAAC,GAAD,KACI,yBAAKuc,IAAI,OAAOC,IAAK/tB,EAAQ,YAGrC,kBAACwvB,EAAD,CACI1a,QAAQ,EACR4a,QAAS,WACLjb,EAAaigB,kBAGhBX,EANL,cCvFN1B,GACS,YADTA,GAEgB,kBAFhBA,GAGW,cAHXA,GAIS,YAJTA,GAMM,SAyCGsC,GAtCEzM,cAAS,WAAO,IAKvB0M,EAFFzqB,KADAC,KAAQqK,aAGerD,aAGrBmhB,EAAU,SAAC,GAAsB,IAC/BC,EADWC,EAAmB,EAAnBA,aAcf,OAXID,EADiB,IAAjBC,EACeJ,GACS,IAAjBI,EACQJ,GACS,IAAjBI,EACQJ,GACS,IAAjBI,EACQJ,GAEAA,MAGEA,GACV,kBAAC,GAAD,MACAG,IAAiBH,GACjB,kBAAC,GAAD,MACAG,IAAiBH,GACjB,kBAAC,GAAD,MACAG,IAAiBH,GACjB,kBAAC,GAAD,MAEF,kBAAC,GAAD,OAIb,OAAO,kBAACE,EAAD,CAASE,aAAcmC,OCzC3B,SAASC,GAAUxzB,GACtB,IACI,OAAOb,SAAO0M,MAAMtM,WAAWS,EAAMyzB,eACvC,SACE,OAAO,G,6jECLf,IAAMC,GAAwBC,aAASC,MAMjCC,GAAsBvtB,aALC,SAAC,GAAD,EACzBwtB,yBADyB,EAEzBC,OAFyB,IAGtBC,EAHsB,6DAIvB,kBAACN,GAA0BM,MACwBxtB,MAAM,CAC3DstB,0BAA0B,GADFxtB,CAAH,MAQG,cAAGI,MAAH,MAAe,iBAEjC,qBAAGqtB,QAEDrrB,YADM,SAOc,qBAAGhC,MAAkBwD,mBAqB/C+pB,GAAsB3tB,aARE,SAAC,GAAD,EAC1B4tB,UAD0B,EAE1BC,UAF0B,EAG1BC,OAH0B,EAI1BC,iBAJ0B,EAK1BN,OAL0B,IAMvBC,EANuB,sFAOxB,kBAAC,KAAD,eAAeM,aAAW,eAAkBN,MACtB1tB,CAAH,MAOf,gBAAG6tB,EAAH,EAAGA,UAAH,OACEA,GACAzrB,YADS,KAESyrB,MAEpB,gBAAGD,EAAH,EAAGA,UAAH,OACEA,GACAxrB,YADS,KAESwrB,MAKpB,qBAAGxtB,MAAkB6E,WAAWrD,WAA/B,SAKD,gBAAGxB,EAAH,EAAGA,MAAOqtB,EAAV,EAAUA,OAAV,EAAkBK,OAAlB,OAA+B1tB,EAAM6E,WAAWtD,UAA/C,KAID8rB,GACArrB,YADM,UAYV6rB,GAAoBjuB,IAAOC,OAAV,MAQR,SAASiuB,GAAT,GAOX,IANAJ,EAMD,EANCA,OACAK,EAKD,EALCA,UAKD,IAJCP,iBAID,aAHCC,iBAGD,MAHa,GAGb,EAFCO,EAED,EAFCA,gBACA9rB,EACD,EADCA,SAEM+rB,EAAcC,aAAcR,EAAQ,KAAM,CAC5CnuB,OAAQ,CAAE4uB,SAAU,KACpB30B,KAAM,CAAE8jB,QAAS,GACjB8Q,MAAO,CAAE9Q,QAAS,GAClB+Q,MAAO,CAAE/Q,QAAS,KALvB,EAQuBgR,cAAU,iBAAO,CAAEC,GAAI,CAAC,EAAG,OARlD,mBAQUA,EARV,KAQUA,GAAMC,EARhB,KASOC,EAAOC,aAAW,CACpBC,OAAQ,SAAC5iB,GACL,IAAI6iB,EAAW7iB,EAAM6iB,SACjBA,EAAW,IACXA,EAAW,GAEXA,EAAW,IACXA,EAAW,GAEfJ,EAAI,CACAD,GAAIxiB,EAAM8iB,KAAO9iB,EAAM+iB,SAAW,CAAC,EAAG,GACtCvvB,OAAQ,CAAEwvB,KAAM,EAAGC,QAAS,IAAKC,SAAU,MAE3CL,EAAW,GAAK7iB,EAAMmjB,UAAU,GAAK,GACrCnB,OAKZ,OAAI/S,WACOiT,EAAYja,KACf,gBAAGmb,EAAH,EAAGA,KAAM3H,EAAT,EAASA,IAAKV,EAAd,EAAcA,MAAd,OACIqI,GACI,kBAAChC,GAAD,CACI3F,IAAKA,EACLzJ,MAAO+I,EACPiH,UAAWA,EACXC,gBAAiBA,EACjBX,OAAQrS,YAER,kBAAC,UAAD,CACIxhB,KAAM,CACF41B,UAAW1B,EACL,oBACA,qBAEVrW,GAAI,CACA+X,UAAW1B,EACL,kBACA,uBAGT,SAAC5G,GAAD,OACG,kBAAC,KAASxX,IAAV,iBACQmf,IADR,CAEI1Q,MAAO,CACHqR,UAAWb,EAAGc,aACV,SAAClM,EAAGC,GAAJ,4BACmB,EADnB,MAEQA,EAAI,EAAIA,EAAI,EAFpB,eAOR,kBAACmK,GAAD,CACIxP,MAAO+I,EACPwI,QAAQ,EACR9B,UAAWA,EACXC,UAAWA,EACXJ,OAAQrS,YAER,kBAAC6S,GAAD,CACIlG,QAASoG,IAEZ7rB,WAS1B+rB,EAAYja,KACf,gBAAGmb,EAAH,EAAGA,KAAM3H,EAAT,EAASA,IAAKV,EAAd,EAAcA,MAAd,OACIqI,GACI,kBAAChC,GAAD,CACI3F,IAAKA,EACLzJ,MAAO+I,EACPiH,UAAWA,EACXC,gBAAiBA,EACjBX,OAAQrS,YAER,kBAACuS,GAAD,CACI+B,QAAQ,EACR9B,UAAWA,EACXC,UAAWA,EACXC,OAAQA,EACRL,OAAQrS,YAER,kBAAC6S,GAAD,CAAmBlG,QAASoG,IAC3B7rB,O,ycC5M7B,IAAMqtB,GAAW3vB,YAAOY,GAAPZ,CAAH,MACD,qBAAGI,MAAkBO,cASjB,qBAAGP,MAAkB4D,YAGhC4rB,GAAwB5vB,IAAO6vB,KAAV,MAErB,qBAAGzvB,MAAkB+E,iBAIZ,SAAS2qB,GAAT,GAAiC,IAAXC,EAAU,EAAVA,OAAU,E1BHxC,WAA0C,IAAhBC,EAAe,uDAAL,IAAK,EACZhV,oBAAS,GADG,mBACrCiV,EADqC,KAC3BC,EAD2B,KAGtCC,EAAaC,uBAAY,SAACC,GAC5B,IAAMC,EAAUC,KAAKF,GACrBH,EAAYI,KACb,IAcH,OAZA9sB,qBAAU,WACN,GAAIysB,EAAU,CACV,IAAMO,EAAOC,YAAW,WACpBP,GAAY,KACbF,GAEH,OAAO,WACHU,aAAaF,OAGtB,CAACP,EAAUC,EAAaF,IAEpB,CAACC,EAAUE,G0BhBYQ,GADa,mBACpCV,EADoC,KAC1BW,EAD0B,KAG3C,OACI,kBAACjB,GAAD,CAAU5H,QAAS,kBAAM6I,EAAUb,KAC9BE,EACG,kBAACL,GAAD,KACI,kBAAC,KAAD,CAAaztB,KAAM,OACnB,kBAACytB,GAAD,gBAGJ,kBAACA,GAAD,KACI,kBAAC,KAAD,CAAMztB,KAAM,SCtChC,SAAS0uB,KAA2Q,OAA9PA,GAAW9uB,OAAO+uB,QAAU,SAAUjwB,GAAU,IAAK,IAAIsI,EAAI,EAAGA,EAAI4nB,UAAUpoB,OAAQQ,IAAK,CAAE,IAAI6nB,EAASD,UAAU5nB,GAAI,IAAK,IAAIye,KAAOoJ,EAAcjvB,OAAOkvB,UAAUC,eAAe1d,KAAKwd,EAAQpJ,KAAQ/mB,EAAO+mB,GAAOoJ,EAAOpJ,IAAY,OAAO/mB,IAA2BswB,MAAMn4B,KAAM+3B,WAEhT,SAASK,GAAyBJ,EAAQK,GAAY,GAAc,MAAVL,EAAgB,MAAO,GAAI,IAAkEpJ,EAAKze,EAAnEtI,EAEzF,SAAuCmwB,EAAQK,GAAY,GAAc,MAAVL,EAAgB,MAAO,GAAI,IAA2DpJ,EAAKze,EAA5DtI,EAAS,GAAQywB,EAAavvB,OAAOC,KAAKgvB,GAAqB,IAAK7nB,EAAI,EAAGA,EAAImoB,EAAW3oB,OAAQQ,IAAOye,EAAM0J,EAAWnoB,GAAQkoB,EAASn6B,QAAQ0wB,IAAQ,IAAa/mB,EAAO+mB,GAAOoJ,EAAOpJ,IAAQ,OAAO/mB,EAFxM0wB,CAA8BP,EAAQK,GAAuB,GAAItvB,OAAOyvB,sBAAuB,CAAE,IAAIC,EAAmB1vB,OAAOyvB,sBAAsBR,GAAS,IAAK7nB,EAAI,EAAGA,EAAIsoB,EAAiB9oB,OAAQQ,IAAOye,EAAM6J,EAAiBtoB,GAAQkoB,EAASn6B,QAAQ0wB,IAAQ,GAAkB7lB,OAAOkvB,UAAUS,qBAAqBle,KAAKwd,EAAQpJ,KAAgB/mB,EAAO+mB,GAAOoJ,EAAOpJ,IAAU,OAAO/mB,EAMne,IAAI,GAAqB,IAAMuc,cAAc,OAAQ,CACnDuU,GAAI,GACJC,GAAI,EACJC,GAAI,EACJC,GAAI,KAGF,GAAqB,IAAM1U,cAAc,OAAQ,CACnDuU,GAAI,EACJC,GAAI,EACJC,GAAI,GACJC,GAAI,KAGF,GAAO,SAAcC,GACvB,IAAIC,EAASD,EAAKC,OACdC,EAAQF,EAAKE,MACb/K,EAAQkK,GAAyBW,EAAM,CAAC,SAAU,UAEtD,OAAoB,IAAM3U,cAAc,MAAOyT,GAAS,CACtD1J,MAAO,GACP4C,OAAQ,GACRmI,QAAS,YACTvQ,KAAM,OACNwQ,OAAQ,eACRC,YAAa,EACbC,cAAe,QACfC,eAAgB,QAChB7V,UAAW,oBACXpC,IAAK2X,GACJ9K,GAAQ+K,EAAqB,IAAM7U,cAAc,QAAS,KAAM6U,GAAS,KAAM,GAAO,KAGvFM,GAA0B,IAAMC,YAAW,SAAUtL,EAAO7M,GAC9D,OAAoB,IAAM+C,cAAc,GAAMyT,GAAS,CACrDmB,OAAQ3X,GACP6M,OAEU,I,wKCvCf,IAAMuL,GAAkBzyB,IAAO0P,IAAV,MAIG,qBAAGtP,MAAkBO,cAG9B,SAAS+xB,KACpB,IAAMrY,EAAMC,mBAEJ1c,EAAYrF,IAAZqF,QAWR,OATA4F,qBAAU,WACF5F,GAAWyc,EAAIE,UACfF,EAAIE,QAAQ8C,UAAY,GACxBhD,EAAIE,QAAQkD,YACRkV,KAAS,GAAIC,SAASh1B,EAAQqW,MAAM,EAAG,IAAK,UAKjD,kBAACwe,GAAD,CAAiBpY,IAAKA,ICvBjC,IAAMwY,GAAaxvB,O,0tICSnB,IAAMyvB,GAAe9yB,IAAO0P,IAAV,MACZ,qBAAGtP,MAAkB8E,oBAerB,qBAAG9E,MAAkB6E,WAAWrD,WAA/B,SAKDmxB,GAAY/yB,IAAO0P,IAAV,MACT,qBAAGtP,MAAkB+E,iBAIrB,qBAAG/E,MAAkB6E,WAAWrD,WAA/B,SAKDoxB,GAAehzB,IAAO0P,IAAV,MAqBZujB,GAAWjzB,IAAO0P,IAAV,MAEU,qBAAGtP,MAAkByD,mBAIvCqvB,GAAqBlzB,IAAO0P,IAAV,MAClB,qBAAGtP,MAAkB+E,iBAId,qBAAG/E,MAAkBa,aAGxB,qBAAGb,MAAkB+E,iBASzBguB,GAAiBnzB,IAAO0P,IAAV,MAGd,qBAAGtP,MACK6E,WAAWrD,WADlB,SAIDwxB,GAAcpzB,IAAO0P,IAAV,MAYX2jB,GAAcrzB,IAAO0P,IAAV,MACX,qBAAGtP,MAAkB+E,iBASC,qBAAG/E,MAAkByE,kBAK3CyuB,GAAgBtzB,IAAO0P,IAAV,MACN,qBAAGtP,MAAkByE,kBAM5B0uB,GAAiBvzB,IAAO0P,IAAV,MACd,qBAAGtP,MAAkB+E,iBAIR,gBAAGquB,EAAH,EAAGA,OAAQC,EAAX,EAAWA,MAAX,OAAwBD,EAAUC,EAAQ,IAAM,IAAO,OACzD,gBAAGD,EAAH,EAAGA,OAAQC,EAAX,EAAWA,MAAX,OACTD,EAAUC,EAAQ,OAAS,SAAY,UAczCC,GAAmB1zB,IAAO0P,IAAV,MAChB,qBAAGtP,MAAkB+E,iBAMrBwuB,GAAa3zB,YAAOY,GAAPZ,CAAH,MAIV4zB,GAAY5zB,IAAO0P,IAAV,MAWTmkB,GAAa7zB,YAAO8zB,GAAP9zB,CAAH,MAEE,qBAAGI,MAAkBe,eAIjC4yB,GAAa/zB,IAAO0P,IAAV,MAKVskB,GAAch0B,IAAO0P,IAAV,MACX,qBAAGtP,MAAkB8E,oBAKT,gBAAG/C,EAAH,EAAGA,KAAH,OAAeA,EAAOA,EAAO,KAAO,UACrC,gBAAGA,EAAH,EAAGA,KAAH,OAAeA,EAAOA,EAAO,KAAO,UAE/C,qBAAG/B,MAAkB6E,WAAWrD,WAA/B,SAKDqyB,GAAej0B,IAAO0P,IAAV,MACL,qBAAGtP,MAAkBe,eAenB,SAAS+yB,GAAehN,GAAe,IAE9CiN,EAGAjN,EAHAiN,kBACAC,EAEAlN,EAFAkN,QACAC,EACAnN,EADAmN,YAJ6C,EAQ7C7xB,KADAC,KAAQ4I,cAE0C9M,qBAA9CtH,EATyC,EASzCA,QAAS2G,EATgC,EAShCA,QAAS/F,EATuB,EASvBA,UA4B1B,OACI,oCACI,kBAACm7B,GAAD,KACI,kBAACY,GAAD,CAAW7L,QAASoM,GAChB,kBAACN,GAAD,CAAY1N,IAAK,gBAErB,kBAAC4M,GAAD,gBACA,kBAACI,GAAD,KACI,kBAACC,GAAD,KACI,kBAACH,GAAD,KACI,kBAACC,GAAD,KArBhBr7B,IAAcV,EAEV,kBAAC68B,GAAD,CAAa7xB,KAAM,IACf,kBAACuwB,GAAD,MADJ,IAjBZ,WACI,IAAM4B,KACFjxB,GAAOgY,WAAYhY,GAAOgY,SAASiZ,YACjCx8B,EAAOiK,OAAOC,KAAKrK,GACpBwY,QACG,SAACokB,GAAD,OACI58B,EAAkB48B,GAAG18B,YAAcA,IAClCA,IAAcV,GACXm9B,KAAsB,aAANC,OAE3BngB,KAAI,SAACmgB,GAAD,OAAO58B,EAAkB48B,GAAGz8B,QAAM,GAC3C,OAAO,kBAACi8B,GAAD,KAAaj8B,GAOO08B,IAIlB,8BAgBe,6BACK38B,IAAcV,GACX,kBAAC88B,GAAD,CACIlM,QAAS,WAELlwB,EAAU48B,UAHlB,cASJ,kBAACnB,GAAD,KACI,kBAACD,GAAD,KACI,kCAKhB,kBAACH,GAAD,KACKkB,EACG,kBAACb,GAAD,CACIC,SAAUY,EACVX,OAAO,GAEP,kBAACE,GAAD,CACIH,SAAUY,EACVX,OAAO,EACPx7B,KAAM0Z,GACF1a,EACAm9B,EACA,YAGHA,EATL,UASgB,KAEhB,kBAAC,GAAD,CAAMrE,OAAQqE,KAGlB,kBAACb,GAAD,CACIC,SAAUY,EACVX,OAAO,GAEP,kBAACE,GAAD,CACIH,SAAUY,EACVX,OAAO,EACPx7B,KAAM0Z,GACF1a,EACA2G,EACA,YAGHA,EATL,UASgB,KAEhB,kBAAC,GAAD,CAAMmyB,OAAQnyB,UAO/Bwd,aAAa/X,GAAOqxB,MAAQrxB,GAAOgY,YAClC,kBAACqY,GAAD,KACI,kBAACZ,GAAD,CACI/K,QAAS,WACLsM,MAFR,qC,u3DChU5B,IAAMpB,GAAWjzB,IAAOC,OAAV,MACQ,gBAAGG,EAAH,EAAGA,MAAH,SAAU+M,OACjB/M,EAAM8D,WAAa9D,EAAMC,mBAMtB,gBAAGD,EAAH,EAAGA,MAAH,SAAUu0B,UACVC,aAAe,IAAMx0B,EAAM0D,aAAe,UAEhC,qBAAG1D,MAAkBG,aAE/B,gBAAGH,EAAH,EAAGA,MAAH,SAAU+M,OACb,cAAgB/M,EAAMyD,mBAG/BgxB,GAAa70B,YAAOizB,GAAPjzB,CAAH,MASV80B,GAAiB90B,IAAO0P,IAAV,MACd,qBAAGtP,MAAkB8E,oBAKrB6vB,GAAsB/0B,YAAO60B,GAAP70B,CAAH,MAGP,qBAAG20B,UAA6B,UAAY,MAC5C,gBAAGA,EAAH,EAAGA,UAAWv0B,EAAd,EAAcA,MAAd,OACNu0B,EAAS,oBAAgBv0B,EAAMmE,YAAtB,MAEN,qBAAGywB,SAA2B,MAAQ,OAG/C3B,GAAcrzB,IAAO0P,IAAV,MACX,qBAAGtP,MAAkB+E,iBAQC,qBAAG/E,MAAkByE,kBAK3CyuB,GAAgBtzB,IAAO0P,IAAV,MACN,qBAAGtP,MAAkByE,kBAM5BowB,GAAaj1B,IAAO0P,IAAV,MACV,qBAAGtP,MAAkB+E,iBACd,SAAC+hB,GAAD,MACW,SAAhBA,EAAMhvB,MACA,qBAAGkI,MAAkBG,WACrB,qBAAGH,MAAkBa,cAK7Bi0B,GAAYl1B,IAAO0P,IAAV,MACF,qBAAGtP,MAAkBa,aAK5B+yB,GAAch0B,IAAO0P,IAAV,MACX,qBAAGtP,MAAkB8E,oBAKT,gBAAG/C,EAAH,EAAGA,KAAH,OAAeA,EAAOA,EAAO,KAAO,UACrC,gBAAGA,EAAH,EAAGA,KAAH,OAAeA,EAAOA,EAAO,KAAO,UAE/C,qBAAG/B,MAAkB6E,WAAWrD,WAA/B,SAKQ,SAASuzB,GAAT,GAUX,IAAD,IATCC,YASD,MATQ,KASR,MARCT,iBAQD,aAPCxyB,YAOD,MAPQ,KAOR,MANC4lB,eAMD,MANW,KAMX,EALC7vB,EAKD,EALCA,MACAm9B,EAID,EAJCA,OAID,IAHCC,iBAGD,MAHa,KAGb,EAFCC,EAED,EAFCA,KAED,IADCpoB,cACD,SACOqoB,EACF,kBAACT,GAAD,CACIhN,QAASA,EACT4M,UAAWA,IAAcxnB,EACzBA,OAAQA,GAER,kBAAC2nB,GAAD,KACI,kBAACG,GAAD,CAAY/8B,MAAOA,GACd,IACAiV,EACG,kBAAC,GAAD,KACI,kBAAC,GAAD,KACI,gCAIR,GAEHkoB,GAEJC,GAAa,kBAACJ,GAAD,KAAYI,IAE9B,kBAAC,GAAD,CAAanzB,KAAMA,EAAMgL,OAAQA,GAC7B,yBAAKiZ,IAAKmP,EAAMpP,IAAK,WAIjC,OAAIiP,EACO,kBAACx0B,GAAD,CAAM3I,KAAMm9B,GAAOI,GAGvBA,E,2NCxIX,IAAMC,GAAgBz1B,IAAO0P,IAAV,MACb,qBAAGtP,MAAkB8E,oBAOZ,SAASwwB,GAAT,GAAgD,IAAD,IAAlBC,WAAkB,MAAZ,GAAY,EAARxzB,EAAQ,EAARA,KAClD,OACI,kBAACszB,GAAD,KACKE,GACG,kBAAC,KAAD,CACIxzB,KAAMA,EACNzI,MAAOi8B,EACPjU,QAAS,QACTkU,QAAS,W,ysCCX7B,IAAMC,GAAiB71B,IAAO0P,IAAV,MAChB,qBAAGtP,MAAkB8E,oBASnB4wB,GAAiB91B,YAAOqB,GAAPrB,CAAH,MAKL,qBAAGI,MAAkByD,mBAK9BkyB,GAAiB/1B,IAAO0P,IAAV,MAChB,qBAAGtP,MAAkB+E,iBAKd,gBAAG/E,EAAH,EAAGA,MAAH,SAAUpE,MAAqBoE,EAAME,UAAY,aACtC,gBAAGF,EAAH,EAAGA,MAAH,SAAUpE,MAAqBoE,EAAME,UAAYF,EAAMyD,mBAOvEmyB,GAAah2B,IAAO0P,IAAV,MACZ,qBAAGtP,MAAkB+E,iBAKnB8wB,GAAcj2B,IAAO0P,IAAV,MAGN,qBAAGtP,MAAkBa,aACV,qBAAGb,MAAkByD,mBAQnB,gBAAGzD,EAAH,EAAGA,MAAH,OAAeK,aAAO,GAAKL,EAAMyD,oBAInDqyB,GAAiBl2B,IAAO0P,IAAV,MAChB,qBAAGtP,MAAkB+E,iBAKV,SAASgxB,GAAT,GAAoG,IAAD,IAA5ER,WAA4E,MAAtE,GAAsE,EAAlExzB,EAAkE,EAAlEA,KAAMtK,EAA4D,EAA5DA,UAA4D,IAAjDmE,aAAiD,SAAlCo6B,EAAkC,EAAlCA,gBAAiBC,EAAiB,EAAjBA,cACzFC,EAAajzB,OAAOgY,UAAYhY,OAAOgY,SAASiZ,WAEtD,OACE,kBAACuB,GAAD,MACI75B,GAASnE,IAAcR,GAAiB,kBAACq+B,GAAD,CAAmBvzB,KAAMA,EAAMwzB,IAAKA,IAC9E,kBAACI,GAAD,CAAgB/5B,MAAOA,GACrB,kBAACk6B,GAAD,MACIl6B,GAAS,kBAAC85B,GAAD,CAAgB1P,IAAKmQ,OAC/Bv6B,EACC,kBAACg6B,GAAD,KACE,kDACA,kBAACC,GAAD,CACElO,QAAS,WACPqO,GAAgB,GAChBC,EAAcx+B,KAHlB,cASAA,IAAcR,EAChB,2CAEA,oBAIL0K,OAAOC,KAAKrK,GAAmByc,KAAI,SAAAwT,GAClC,IAAM4O,EAAS7+B,EAAkBiwB,GACjC,GAAI4O,EAAO3+B,YAAcA,EAAW,CAClC,GAAI2+B,EAAO3+B,YAAcV,EAAU,CACjC,GAAIm/B,GAA8B,aAAhBE,EAAO1+B,KACvB,OAAO,KAET,IAAKw+B,GAA8B,aAAhBE,EAAO1+B,KACxB,OAAO,KAGX,OACE,kBAACq9B,GAAD,CACEvN,IAAKA,EACL+M,WAAW,EACXz8B,MAAOs+B,EAAOt+B,MACdm9B,OAAQmB,EAAO1+B,KACfw9B,UAAWkB,EAAOx+B,YAClBu9B,KAAMiB,EAAOz+B,WAInB,OAAO,S,ynECvGf,IAAM67B,GAAY5zB,IAAO0P,IAAV,MAWTmkB,GAAa7zB,YAAO8zB,GAAP9zB,CAAH,MAEE,qBAAGI,MAAkBe,eAIjCs1B,GAAUz2B,IAAO0P,IAAV,MACP,qBAAGtP,MAAkB8E,oBAIH,qBAAG9E,MAAkBC,mBAIvC0yB,GAAY/yB,IAAO0P,IAAV,MACT,qBAAGtP,MAAkB+E,iBAIrB,qBAAG/E,MAAkB6E,WAAWrD,WAA/B,SAKDmpB,GAAiB/qB,IAAO0P,IAAV,MAId,qBAAGtP,MAAkB6E,WAAWrD,WAA/B,SAGDoxB,GAAehzB,IAAO0P,IAAV,MAqBZgnB,GAAQ12B,IAAO0P,IAAV,MACL,qBAAGtP,MAAkB+E,iBAIrB,qBAAG/E,MAAkB6E,WAAWrD,WAA/B,SAMD+0B,GAAa32B,IAAO0P,IAAV,MAIV,qBAAGtP,MAAkB6E,WAAWrD,WAA/B,SAMDg1B,GAAY52B,IAAO0P,IAAV,MAMTmnB,GACO,UADPA,GAGO,UAHPA,GAIO,UAkREC,GA/QKvW,cAChB,YAAqD,IAAlDwW,EAAiD,EAAjDA,oBAAqBC,EAA4B,EAA5BA,sBAERld,EACRtX,KADAC,KAAQqX,WAFoC,EAIiBvhB,IAAzD4U,EAJwC,EAIxCA,OAAQtV,EAJgC,EAIhCA,UAAWmE,EAJqB,EAIrBA,MAAO+e,EAJc,EAIdA,SAAUnd,EAJI,EAIJA,QAAS3G,EAJL,EAIKA,QAJL,EAKZ+jB,mBAAS6b,IALG,mBAKzCI,EALyC,KAK7BC,EAL6B,OAMNlc,qBANM,mBAMzCmc,EANyC,KAM1BC,EAN0B,OAORpc,qBAPQ,mBAOzCqc,EAPyC,KAO3BjB,EAP2B,OAQYpb,qBARZ,mBAQzCsc,EARyC,KAQjBC,EARiB,KAU1CC,EAAkB1d,EAAW1I,mBAE7B+iB,EAAoB,WACtBra,EAAWqa,qBAIf3wB,qBAAU,WACFg0B,IACApB,GAAgB,GAChBmB,GAA0B,GAC1BL,EAAcL,OAEnB,CAACW,IAvB4C,MA0B1Bxc,qBA1B0B,mBA0BzC2a,EA1ByC,KA0BpC8B,EA1BoC,KA2BhDj0B,qBAAU,WACR,IAAMk0B,EAAa,SAAA/B,GACjB16B,QAAQC,MAAM,MAAMy6B,GACpB8B,EAAO9B,GACPuB,EAAcL,KAGhB,OADAx/B,EAAc0E,GAAG47B,IAAeD,GACzB,WACLrgC,EAAcugC,IAAID,IAAeD,MAElC,IAGH,IAAMG,EAAiBzd,GAAYjN,GAC7B2qB,EAAoB1d,GAAYviB,GACtC2L,qBAAU,WAEFg0B,IACErqB,IAAW0qB,GACRhgC,GAAaA,IAAcigC,IAAsB97B,IAEtDk7B,EAAcL,MAEnB,CACCK,EACA/pB,EACAnR,EACAnE,EACA2/B,EACAK,EACAC,IAGJ,IAAMzB,EAAa,uCAAG,WAAOx+B,GAAP,SAAAqH,EAAA,sDAClBk4B,EAAiBv/B,GACjBq/B,EAAcL,IACd9b,EAASljB,OAAWwX,GAAW,GAAMjT,OAAM,SAACC,GACxCk7B,EAA0Bl7B,GAC1BpB,QAAQC,MAAM,qBAAsBmB,GACpC+5B,GAAgB,MANF,2CAAH,sDAoMnB,OACI,kBAAClI,GAAD,CACI/P,MAAO,CAAE4Z,WAAY,QACrBjK,OAAQ0J,EACRrJ,UAAWgG,EACXvG,UAAW,KACXC,UAAW,IAEX,kBAAC4I,GAAD,KA7GAa,EAEI,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAWvP,QAASoM,GAChB,kBAAC,GAAD,CAAYhO,IAAK,gBAErB,kBAAC,GAAD,KACKmR,EAAuB98B,WAAWtD,QAAQ,4BAA8B,EACnE,gBACA,oBAEV,kBAAC,GAAD,KACKogC,EAAuB98B,WAAWtD,QAAQ,4BAA8B,EACrE,4EAIA,+CAOhB0G,IACC5G,EAAmBC,IACpBggC,IAAeJ,GAGX,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAW9O,QAASoM,GAChB,kBAAC,GAAD,CAAYhO,IAAK,gBAErB,kBAAC,GAAD,KAAY,iBACZ,kBAAC,GAAD,KACI,8EAOZvoB,GAAWq5B,IAAeJ,GAEtB,kBAAC3C,GAAD,CACIC,kBAAmBA,EACnB4C,oBAAqBA,GAAuB,GAC5CC,sBAAuBA,GAAyB,GAChD3C,YAAa,kBAAM6C,EAAcL,OAKzC,kBAAC,GAAD,KACI,kBAAC,GAAD,CAAW9O,QAASoM,GAChB,kBAAC,GAAD,CAAYhO,IAAK,gBAEpB8Q,IAAeJ,GACZ,kBAAC,GAAD,CAAW3+B,MAAM,QACb,kBAAC0+B,GAAD,CACI7O,QAAS,WACLqO,GAAgB,GAChBc,EAAcL,MAHtB,SAUJ,kBAAC,GAAD,KACI,kBAACD,GAAD,6BAGR,kBAAC,GAAD,KACKK,IAAeJ,GACZ,kBAACV,GAAD,CACIR,IAAKA,EACLxzB,KAAM,IACNtK,UAAWs/B,EACXn7B,MAAOq7B,EACPjB,gBAAiBA,EACjBC,cAAeA,IAGnB,kBAACM,GAAD,KAxKpB,WACI,IAAML,EAAajzB,OAAOgY,UAAYhY,OAAOgY,SAASiZ,WACtD,OAAOvyB,OAAOC,KAAKrK,GAAmByc,KAAI,SAACwT,GACvC,IAAM4O,EAAS7+B,EAAkBiwB,GAEjC,GAAIxM,WACA,OAAK/X,OAAOqxB,MAASrxB,OAAOgY,WAAYmb,EAAO/I,OAqBxC,KAnBC,kBAAC0H,GAAD,CACIpN,QAAS,WACLyO,EAAO3+B,YAAcA,IAChB2+B,EAAOv+B,MACRo+B,EAAcG,EAAO3+B,YAE7B+vB,IAAKA,EACLza,OACIqpB,EAAO3+B,WACP2+B,EAAO3+B,YAAcA,EAEzBK,MAAOs+B,EAAOt+B,MACdk9B,KAAMoB,EAAOv+B,KACbo9B,OAAQmB,EAAO1+B,KACfw9B,UAAW,KACXC,KAAMiB,EAAOz+B,WAQ7B,GAAIy+B,EAAO3+B,YAAcV,EAAU,CAE/B,IAAMkM,OAAOqxB,OAAQrxB,OAAOgY,SACxB,MAAoB,aAAhBmb,EAAO1+B,KAEH,kBAACq9B,GAAD,CACIvN,IAAKA,EACL1vB,MAAO,UACPm9B,OAAQ,mBACRC,UAAW,KACXF,KAAM,uBACNG,KAAMl9B,EAAQ,UAIf,KAIV,GAAoB,aAAhBm+B,EAAO1+B,OAAwBw+B,EACpC,OAAO,KAGN,GAAoB,aAAhBE,EAAO1+B,MAAuBw+B,EACnC,OAAO,KAKf,OACKlb,aACAob,EAAOwB,YACJ,kBAAC7C,GAAD,CACIpN,QAAS,WACLyO,EAAO3+B,YAAcA,EACfq/B,EAAcL,KACbL,EAAOv+B,MACRo+B,EAAcG,EAAO3+B,YAE/B+vB,IAAKA,EACLza,OAAQqpB,EAAO3+B,YAAcA,EAC7BK,MAAOs+B,EAAOt+B,MACdk9B,KAAMoB,EAAOv+B,KACbo9B,OAAQmB,EAAO1+B,KACfw9B,UAAW,KACXC,KAAMiB,EAAOz+B,cA4FAkgC,IAEhBhB,IAAeJ,IACZ,kBAACH,GAAD,KACI,0BAAMvY,MAAO,CAAEjmB,MAAO,YAAtB,yBAEQ,IACR,kBAAC0I,GAAD,CAAM3I,KAAK,2EAAX,oC,okBCxWhC,IAAMigC,GAAOl4B,IAAO0P,IAAV,MA4BKyoB,GAJK,SAAC,GAA2B,IAAzB71B,EAAwB,EAAxBA,SAAUylB,EAAc,EAAdA,QAC7B,OAAO,kBAACmQ,GAAD,CAAMnQ,QAASA,GAAUzlB,I,whDCZpC,IAAM81B,GAAqBp4B,IAAOC,OAAV,MAsJTo4B,GA5HW9X,cAAS,SAAC2G,GAEhC,IAAMoR,EAAgBt4B,IAAO0P,IAAV,KAENwX,EAAMqR,KAAO,QAAU,SAJM,EAmCtC/1B,KADAC,KAAQqX,EAlC8B,EAkC9BA,WAAY3a,EAlCkB,EAkClBA,iBAAkBkM,EAlCA,EAkCAA,cAAed,EAlCf,EAkCeA,WAlCf,EA0CtCc,EAAc9M,qBALdtH,EArCsC,EAqCtCA,QACA2G,EAtCsC,EAsCtCA,QAEA5B,GAxCsC,EAuCtCnE,UAvCsC,EAwCtCmE,OAGAw8B,GA3CsC,EAyCtC16B,aAEUuR,GACVopB,OAAYppB,EAEZpY,GAAW2G,GAAW5G,EAAmBC,KACzCuhC,EAAUr5B,EAAiBu5B,uBAAuB96B,GAClD66B,EAAYt5B,EAAiBw5B,yBAAyB/6B,IAG1D,IAAMu2B,EAAoB,WACtBra,EAAWqa,qBA6Df,OACI,oCAlDJ,WAOI,GANAl5B,QAAQC,MAAM,kBAAmB,CAC7B0C,UACA3G,QAASA,EACT+E,UAGA4B,GAAW3G,IAAYD,EAAmBC,GAC1C,OACI,kBAACmhC,GAAD,CAAoBrQ,QAASoM,GAA7B,iBAID,GAAIv2B,EAAS,CAClB,IAAMqrB,EAAa1e,EAAWM,gBAAgBjN,GAC9C,OACE,kBAAC,GAAD,CAAamqB,QAASoM,GACpB,0BAAMhW,MAAO,CAACjmB,MAAO,UAAW0gC,WAAY,OAAOpZ,QAAS,aACzDyJ,EAAapgB,GAAcogB,GAAc,MAD5C,QAGA,0BAAM9K,MAAO,CACX9d,gBAAgB,UAChBnI,MAAM,UACN6xB,OAAO,OACPlK,aAAa,MACbL,QAAS,WACToZ,WAAY,SZlIrB,SAAwB16B,GAAsB,IAAb26B,EAAY,uDAAH,EAC7C,IAAK3L,GAAUhvB,GACX,MAAMa,MAAM,gCAAD,OAAiCb,EAAjC,OAEf,MAAM,GAAN,OAAUA,EAAQ0K,UAAU,EAAGiwB,EAAS,GAAxC,cAAgD36B,EAAQ0K,UACpD,GAAKiwB,IY8HKC,CAAel7B,KAGlB,OAAI5B,EAEH,kBAACo8B,GAAD,CAAoBrQ,QAASoM,GAA7B,iBAMA,kBAACmE,EAAD,CACIvQ,QAASoM,EACThnB,QAAQ,GAEP+Z,EAAMmJ,MASd0I,GACD,kBAAC,GAAD,CACIhC,oBAAqByB,EACrBxB,sBAAuByB,Q,8lBC3JvC,IAAMxQ,GAAcjoB,IAAO0P,IAAV,MAMXwY,GAAUloB,IAAO0P,IAAV,MASPspB,GAAsBh5B,IAAO0P,IAAV,MAsBVupB,GAZU1Y,cAAS,SAAC2G,GAE/B,OACI,kBAAC,GAAD,KACI,kBAAC,GAAD,KACI,kBAAC8R,GAAD,mDAEJ,kBAAC,GAAD,CAAmBT,MAAI,EAAClI,KAAK,uB,2zBC/BzC,IAAM6I,GAAoBl5B,IAAO0P,IAAV,MAYjBwY,GAAUloB,IAAO0P,IAAV,MASPypB,GAAcn5B,IAAO0P,IAAV,MAKX0pB,GAAWp5B,IAAO0P,IAAV,MAiDC2pB,GA5CK9Y,cAAS,WAAO,IAO5B0I,EAP2B,EAG3BzmB,KADAC,KAAQ4I,EAFmB,EAEnBA,cAAed,EAFI,EAEJA,WAAYC,EAFR,EAEQA,YAG/B5M,EAAYyN,EAAc9M,qBAA1BX,QAGJ0uB,OAAajd,EAEbzR,IACAqrB,EAAa1e,EAAWM,gBAAgBjN,GACxC0uB,EAAa/hB,EAAWQ,WACpBP,EAAYG,kBACZ/M,IAIR,IAAM07B,EAAoBrQ,EAAapgB,GAAcogB,GAAc,QAC7DsQ,EAAoBjN,EAAazjB,GAAcyjB,GAAc,QAEpE,OACK,kBAAC4M,GAAD,KACI,0BAAM/a,MACJ,CAACe,WAAY,SAAUE,SAAU,OAAQlnB,MAAO,UAAWqxB,aAAc,SAD3E,iBAGA,kBAAC,GAAD,KACI,kBAAC4P,GAAD,KACI,yBAAK/S,IAAK/tB,EAAQ,UAClB,kBAAC+gC,GAAD,eAEJ,6BAAME,EAAN,SAEJ,kBAAC,GAAD,KACI,kBAACH,GAAD,KACI,yBAAK/S,IAAK/tB,EAAQ,UAClB,kBAAC+gC,GAAD,eAEJ,6BAAMG,EAAN,a,6pBCtEhB,IAAMC,GAAax5B,IAAO0P,IAAV,MAKV+pB,GAAYz5B,IAAO0P,IAAV,MAII,SAACwX,GAAD,OACXA,EAAMpI,KAAO,+BAAiC,UAKhD4a,GAAc15B,IAAO0P,IAAV,MAKE,SAACwX,GAAD,OACXA,EAAMpI,KAAO,+BAAiC,UAEjC,SAACoI,GAAD,OACbA,EAAMpI,KAAO,kBAAoB,qBA0C1B6a,GArCKpZ,cAAS,WAAO,IAAD,EAG3B/d,KADAC,KAAQ+H,EAFmB,EAEnBA,YAAaqC,EAFM,EAENA,SAAUC,EAFJ,EAEIA,aAG7B5C,EAAY4C,EAAa5C,UACzB0vB,EAAY,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,QAASv3B,EAAe,EAAfA,SACzB,OAAI4H,IAAc2vB,EAEV,kBAACJ,GAAD,CAAW3a,KAAoB,SAAd5U,GACZ5H,GAKL,kBAACo3B,GAAD,CACE5a,KAAoB,QAAd5U,EACN6d,QAAS,WAAQjb,EAAagtB,aAAaD,KAExCv3B,IAMpB,OACO,kBAACk3B,GAAD,KACI,kBAACI,EAAD,CAAWC,QAAS,OAApB,OAGA,kBAACD,EAAD,CAAWC,QAAS,QACfhtB,EAASoZ,YAAYzb,EAAYG,mBAAqB,WAAa,Y,4qBCrDpF,IAAMovB,GAAiB/5B,IAAO0P,IAAV,MAGd,qBAAGtP,MAAkB6E,WAAWrD,WAA/B,SAcDmpB,GAAiB/qB,IAAO0P,IAAV,MA8CLsqB,GAxCCzZ,cAAS,WAAO,IAAD,EAGvB/d,KADAC,KAAQqK,EAFe,EAEfA,aAGJlP,EALmB,EAEDyN,cAGQ9M,qBAA1BX,QACFq8B,EAAentB,EAAaN,eAC5B0tB,EAAeptB,EAAapD,eAC9BwX,EAAmC,QAA3BpU,EAAa5C,UAEnBiwB,EAAc,SAAC,GACjB,OAD6B,EAAXjZ,MAEH,kBAAC,GAAD,MAGNtjB,EAEMkP,EAAapD,iBAAmBrD,GAAiB4I,SACjD,kBAAC,GAAD,MAEA,kBAAC,GAAD,MAJA,kBAAC,GAAD,OASnB,OACI,kBAAC8qB,GAAD,KACE,kBAAC,GAAD,CAAa7Y,MAAOA,IACpB,kBAAC,GAAD,KACE,kBAACiZ,EAAD,CACEjZ,MAAOA,EACP+Y,aAAcA,EACdC,aAAcA,IAEhB,kBAAC,GAAD,W,uuCChEZ,IAAME,GAAgBp6B,IAAO0P,IAAV,MASb2qB,GAAar6B,IAAO0P,IAAV,MAKV4qB,GAAat6B,IAAO0P,IAAV,MAKV6qB,GAAav6B,IAAO0P,IAAV,MAWV8qB,GAAgBx6B,IAAO0P,IAAV,MASb+qB,GAAcz6B,IAAO0P,IAAV,MAKXgrB,GAAa16B,IAAOsB,IAAV,MA8EDq5B,GAvEA,WAAO,IAAD,EAGbn4B,KADAC,KAAO4I,EAFM,EAENA,cAAeb,EAFT,EAESA,YAGtBvT,EAAUoU,EAAc9M,qBAAqBtH,QAC7C2jC,EAAgBpwB,EAAYqwB,mBAAmBviB,IACpC9N,EAAYqwB,mBAAmBC,sBAC9C,OACI,kBAACV,GAAD,KACI,kBAACC,GAAD,KACI,kBAACE,GAAD,KACI,uBACItiC,KACE,qDAEF4I,OAAO,KAJX,WAMajL,KAGjB,kBAAC4kC,GAAD,MACA,kBAACD,GAAD,KjDvBc,SAACzjC,EAASu5B,EAAM0K,GAA2B,IAApBC,EAAmB,wDACpE,OACI,uBACI/iC,KAAI,UAAK+Z,GAAalb,GAAlB,kBAAoCikC,GAApC,OACAC,EAAM,aAASA,GAAW,IAE9Bn6B,OAAO,SACPC,IAAI,uBAEHuvB,GiDeQ4K,CAAehkC,EAAS,iBAAkB2jC,GAAe,IAE9D,kBAACJ,GAAD,MACA,kBAACD,GAAD,KACI,uBAAGtiC,KAAK,oCAAoC4I,OAAO,KAAnD,UAIJ,kBAAC25B,GAAD,MACA,kBAACD,GAAD,KACI,uBACItiC,KAAK,6EACL4I,OAAO,KAFX,YAOJ,kBAAC25B,GAAD,MACA,kBAACD,GAAD,KACI,uBACItiC,KAAK,+BACL4I,OAAO,KAFX,SAQR,kBAACy5B,GAAD,KACI,kBAACG,GAAD,KACI,uBAAGxiC,KAAK,6BAA6B4I,OAAO,KACxC,kBAAC65B,GAAD,CAAYtU,IAAK/tB,EAAQ,YAGjC,kBAACoiC,GAAD,KACI,uBAAGxiC,KAAK,kCAAkC4I,OAAO,KAC7C,kBAAC65B,GAAD,CAAYtU,IAAK/tB,EAAQ,YAGjC,kBAACoiC,GAAD,KACI,uBAAGxiC,KAAK,qBAAqB4I,OAAO,KAChC,kBAAC65B,GAAD,CAAYtU,IAAK/tB,EAAQ,e,8jBClHjD,IAAM6iC,GAAal7B,IAAO0P,IAAV,MAQVyrB,GAAUn7B,IAAO0P,IAAV,MAMP0rB,GAAWp7B,IAAO0P,IAAV,MAgDC2rB,GAvCA,WACX,IAAMC,EAAUC,aACZ,YAAoD,EAAjD/E,OAAkD,IAA1CgF,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,QAAmBn5B,GAAe,EAAzBgB,SAAyB,EAAfhB,UACjC,OACI,kBAAC84B,GAAD,CACIrT,QAAS,WACL0T,EAAQ1kC,KAAKykC,KAGhBl5B,MAMjB,OACI,kBAAC44B,GAAD,KACI,kBAACC,GAAD,KACI,kBAACG,EAAD,CAASE,MAAM,KACX,yBAAKrV,IAAI,QAAQC,IAAK/tB,EAAQ,UAC9B,0BACE8lB,MAAO,CAACud,OAAQ,WAAYtc,SAAU,SADxC,OAGA,0BACEjB,MAAO,CACLoB,WAAY,MACZH,SAAU,OACVlnB,MAAO,QACPimB,MAAO,SACPwd,cAAe,QANnB,aAWR,kBAAC,GAAD,CAAmBtL,KAAK,qB,o2BCpDpC,IAAMuL,GAAsB57B,IAAO0P,IAAV,MAQnBmsB,GAAe77B,IAAO0P,IAAV,MAMJ,SAACwX,GAAD,MAAyB,SAAdA,EAAM4U,IAAiB,mCAAoC,kCAE/D,SAAC5U,GAAD,MAAyB,SAAdA,EAAM4U,IAAiB,OAAQ,UAKzDC,GAAY/7B,IAAO0P,IAAV,MACF,SAACwX,GAAD,MAAyB,SAAdA,EAAM4U,IAAiB,yBAA0B,2BAOnEE,GAAah8B,IAAOsB,IAAV,MAyBD5E,GArBM,WACjB,OACE,kBAACk/B,GAAD,KACE,kBAAC,GAAD,MACA,kBAACC,GAAD,KACE,yBAAK1V,IAAI,YAAYC,IAAK/tB,EAAQ,UAClC,kBAAC0jC,GAAD,mDAEF,kBAACF,GAAD,CAAcC,IAAI,QAChB,kBAACE,GAAD,CAAY5V,IAAK/tB,EAAQ,UACzB,kBAAC0jC,GAAD,CAAWD,IAAI,QAAf,oFAEF,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAACG,GAAD,MACA,kBAAC,GAAD,QCnCOC,GAhBH,WACV,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,yBAAK3f,UAAU,kBACb,kBAAC,GAAD,KACE,kBAAC4f,GAAD,YCHMC,QACa,cAA7Bj5B,OAAOC,SAASi5B,UAEiB,UAA7Bl5B,OAAOC,SAASi5B,UAEhBl5B,OAAOC,SAASi5B,SAASr5B,MACrB,2D,4BCRNs5B,GAAuBC,YAAoBhmC,GAMjD,IAAMimC,GACA,kBAACF,GAAD,CAAsBG,WAL5B,SAAoB5jC,GAChB,OAAO,IAAI6jC,KAAK7jC,KAKV,kBAACsJ,GAAD,KACI,oCACI,kBAAC+C,GAAD,MACA,kBAAC,GAAD,SAKlBy3B,IAASC,OAAOJ,GAAMxf,SAASC,eAAe,SDwGtC,kBAAmB4f,WACnBA,UAAUC,cAAcC,MAAM7jC,MAAK,SAAC8jC,GAChCA,EAAaC,iB,2DEpIzB1nC,EAAOC,QAAU,IAA0B,2B,+FCA3CD,EAAOC,QAAU,IAA0B,yB,uCCA3CD,EAAOC,QAAU,IAA0B,0B,qBCA3CD,EAAOC,QAAU,IAA0B,6B,qBCA3CD,EAAOC,QAAU,IAA0B,4B,21cCA3CD,EAAOC,QAAU,IAA0B,iC,qBCA3CD,EAAOC,QAAU,IAA0B,oC,qBCA3CD,EAAOC,QAAU,IAA0B,2B,smBCA3CD,EAAOC,QAAU,IAA0B,6B,qBCA3CD,EAAOC,QAAU,IAA0B,oC,0mBCA3CD,EAAOC,QAAU,IAA0B,yB,okFCA3CD,EAAOC,QAAU,IAA0B,sC,o2FCA3CD,EAAOC,QAAU,IAA0B,gC","file":"static/js/main.bf9ba5f9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dangerous.svg\";","import { InjectedConnector } from '@web3-react/injected-connector'\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\n\nexport const INFURA_API_KEY = process.env.REACT_APP_KEY_INFURA_API_KEY;\nexport const ETH_NETWORKS = process.env.REACT_APP_ETH_NETWORKS.split(',');\n\n\nexport const CHAIN_NAME_BY_ID = {\n  '1': 'mainnet',\n  '3': 'ropsten',\n  '4': 'rinkeby',\n  '42': 'kovan',\n  '1337': 'development',\n};\n\nexport const CHAIN_ID_BY_NAME = {\n  'mainnet': 1,\n  'ropsten': 3,\n  'rinkeby': 4,\n  'kovan': 42,\n  'development': 1337,\n};\n\nexport const DEFAULT_ETH_NETWORK = ETH_NETWORKS[0];\nexport const DEFAULT_ETH_CHAIN_ID = CHAIN_ID_BY_NAME[ETH_NETWORKS[0]];\n\nexport const RPC_URLS = {\n  '1': process.env.REACT_APP_SUPPORTED_NETWORK_1 || 'https://mainnet.infura.io/v3/'+INFURA_API_KEY,\n  '3': process.env.REACT_APP_SUPPORTED_NETWORK_3 || 'https://ropsten.infura.io/v3/'+INFURA_API_KEY,\n  '4': process.env.REACT_APP_SUPPORTED_NETWORK_4 || 'https://rinkeby.infura.io/v3/'+INFURA_API_KEY,\n  '42': process.env.REACT_APP_SUPPORTED_NETWORK_42 || 'https://kovan.infura.io/v3/'+INFURA_API_KEY,\n  '66': process.env.REACT_APP_SUPPORTED_NETWORK_66 || 'http://localhost:8545/',\n};\n\nexport const web3ContextNames = {\n  injected: 'INJECTED',\n  metamask: 'METAMASK',\n  walletconnect: 'WALLETCONNECT',\n};\n\nconst POLLING_INTERVAL = 5000;\n\nexport const supportedChains = ETH_NETWORKS;\nexport const defaultChainId = CHAIN_ID_BY_NAME[ETH_NETWORKS[0]];\nlet supportedChainIds = [];\nsupportedChains.forEach((network) => supportedChainIds.push(CHAIN_ID_BY_NAME[network]));\n\n\nexport const isChainIdSupported = (chainId: number): boolean => {\n    return supportedChains.indexOf(CHAIN_NAME_BY_ID[chainId]) >= 0;\n};\n\nexport const injected = new InjectedConnector({\n    supportedChainIds: supportedChainIds,\n});\n\nexport const walletconnect = new WalletConnectConnector({\n  rpc: { \n    [defaultChainId] : RPC_URLS[defaultChainId],\n  },\n  bridge: 'https://bridge.walletconnect.org',\n  qrcode: false,\n  pollingInterval: POLLING_INTERVAL,\n})\n\nexport default {\n    injected,\n    walletconnect\n};\n\nexport const SUPPORTED_WALLETS = {\n    INJECTED: {\n        connector: injected,\n        name: 'Injected',\n        iconName: 'arrow-right.svg',\n        description: 'Injected web3 provider.',\n        href: null,\n        color: '#010101',\n        primary: true,\n    },\n    METAMASK: {\n        connector: injected,\n        name: 'MetaMask',\n        iconName: require('assets/images/metamask.png'),\n        description: 'Easy-to-use browser extension.',\n        href: null,\n        color: '#E8831D',\n    },\n    WALLETCONNECT: {\n        connector: walletconnect,\n        name: 'WalletConnect',\n        iconName: require('assets/images/walletConnectIcon.svg'),\n        description: 'Connect form mobile.',\n        href: null,\n        color: '#E8831D',\n    },\n};\n","import { useEffect, useState } from 'react';\nimport { useWeb3React as useWeb3ReactCore } from '@web3-react/core';\nimport { isMobile } from 'react-device-detect';\nimport { injected, web3ContextNames } from 'provider/connectors';\n\n/*  Attempt to connect to & activate injected connector\n    If we're on mobile and have an injected connector, attempt even if not authorized (legacy support)\n    If we tried to connect, or it's active, return true;\n */\nexport function useActiveWeb3React() {\n    return useWeb3ReactCore(web3ContextNames.injected);\n}\n\nexport function useEagerConnect() {\n    const { activate, active } = useWeb3ReactCore(web3ContextNames.injected);\n\n    const [tried, setTried] = useState(false);\n\n    useEffect(() => {\n        console.debug('[Injected Eager Connect]', injected);\n        injected.isAuthorized().then((isAuthorized) => {\n            console.debug('[Eager Connect] Activate injected if authorized', {\n                isAuthorized,\n            });\n            if (isAuthorized) {\n                activate(injected, undefined, true).catch(() => {\n                    setTried(true);\n                });\n            } else {\n                if (isMobile && window.ethereum) {\n                    activate(injected, undefined, true).catch(() => {\n                        setTried(true);\n                    });\n                } else {\n                    setTried(true);\n                }\n            }\n        });\n    }, [activate]); // intentionally only running on mount (make sure it's only mounted once :))\n\n    // if the connection worked, wait until we get confirmation of that to flip the flag\n    useEffect(() => {\n        if (active) {\n            setTried(true);\n        }\n    }, [active]);\n\n    return tried;\n}\n\n/**\n * Use for network and injected - logs user in\n * and out after checking what network they're on\n */\nexport function useInactiveListener(suppress = false) {\n    const { active, error, activate } = useWeb3ReactCore(\n        web3ContextNames.injected\n    );\n\n    useEffect(() => {\n        const { ethereum } = window;\n\n        if (ethereum && ethereum.on && !active && !error && !suppress) {\n            const handleChainChanged = () => {\n                // eat errors\n                activate(injected, undefined, true).catch(() => {});\n            };\n\n            const handleAccountsChanged = (accounts) => {\n                if (accounts.length > 0) {\n                    // eat errors\n                    activate(injected, undefined, true).catch(() => {});\n                }\n            };\n\n            const handleNetworkChanged = () => {\n                // eat errors\n                activate(injected, undefined, true).catch(() => {});\n            };\n\n            ethereum.on('chainChanged', handleChainChanged);\n            ethereum.on('networkChanged', handleNetworkChanged);\n            ethereum.on('accountsChanged', handleAccountsChanged);\n\n            return () => {\n                if (ethereum.removeListener) {\n                    ethereum.removeListener('chainChanged', handleChainChanged);\n                    ethereum.removeListener(\n                        'networkChanged',\n                        handleNetworkChanged\n                    );\n                    ethereum.removeListener(\n                        'accountsChanged',\n                        handleAccountsChanged\n                    );\n                }\n            };\n        }\n\n        return () => {};\n    }, [active, error, suppress, activate]);\n}\n","import { BigNumber } from 'utils/bignumber';\nimport { ValidationStatus } from './utils/validators';\n\nexport interface BigNumberMap {\n    [index: string]: BigNumber;\n}\n\nexport interface StringMap {\n    [index: string]: string;\n}\n\nexport interface NumberMap {\n    [index: string]: number;\n}\n\nexport interface MarketAssetMap {\n    [index: string]: MarketAsset;\n}\n\nexport interface MarketAsset {\n    id: string;\n    symbol: string;\n    name: string;\n    price?: MarketAssetPrice;\n}\n\nexport interface MarketAssetPrice {\n    value: BigNumber;\n    currency: string;\n}\n\n// Indexed by Symbol\nexport interface MarketAssetPriceMap {\n    [index: string]: MarketAssetPrice;\n}\n\n// Token Address -> checked\nexport interface CheckboxMap {\n    [index: string]: Checkbox;\n}\n\n// Token -> amount\nexport interface InputMap {\n    [index: string]: Input;\n}\n\nexport interface Input {\n    value: string;\n    touched: boolean;\n    validation: ValidationStatus;\n}\n\nexport interface Checkbox {\n    checked: boolean;\n    touched: boolean;\n}\n\nexport enum Web3Errors {\n    UNKNOWN_ERROR,\n    SIGNATURE_REJECTED,\n}\n\nexport enum TXEvents {\n    TX_HASH = 'txhash',\n    RECEIPT = 'receipt',\n    CONFIRMATION = 'confirmation',\n    TX_ERROR = 'txerror',\n    FINALLY = 'finally',\n    INVARIANT = 'invariant',\n}\n\nexport type TxHash = string;\n\nexport interface TransactionEvent {\n    type: TXEvents;\n    data: any;\n}\n","import * as ethers from 'ethers';\n\nclass UncheckedJsonRpcSigner extends ethers.Signer {\n    signer: any;\n\n    constructor(signer) {\n        super();\n        ethers.utils.defineReadOnly(this, 'signer', signer);\n        ethers.utils.defineReadOnly(this, 'provider', signer.provider);\n    }\n\n    getAddress() {\n        return this.signer.getAddress();\n    }\n\n    sendTransaction(transaction) {\n        return this.signer\n            .sendUncheckedTransaction(transaction)\n            .then((hash) => {\n                return {\n                    hash: hash,\n                    nonce: null,\n                    gasLimit: null,\n                    gasPrice: null,\n                    data: null,\n                    value: null,\n                    chainId: null,\n                    confirmations: 0,\n                    from: null,\n                    wait: (confirmations) => {\n                        return this.signer.provider.waitForTransaction(\n                            hash,\n                            confirmations\n                        );\n                    },\n                };\n            });\n    }\n\n    signMessage(message) {\n        return this.signer.signMessage(message);\n    }\n}\n\nexport default UncheckedJsonRpcSigner;\n","import { Web3Errors } from '../../types';\n\nconst errorCodeMapping = {\n    '4001': Web3Errors.SIGNATURE_REJECTED,\n};\n\nexport const isKnownErrorCode = (code: number): boolean => {\n    const codeStr = code.toString();\n    return !!errorCodeMapping[codeStr];\n};\n\nexport const getErrorByCode = (code: number): Web3Errors => {\n    const codeStr = code.toString();\n    if (isKnownErrorCode(code)) {\n        return errorCodeMapping[codeStr];\n    } else {\n        return Web3Errors.UNKNOWN_ERROR;\n    }\n};\n","import { action, observable } from 'mobx';\nimport RootStore from 'stores/Root';\nimport { ethers } from 'ethers';\nimport { Web3ReactContextInterface } from '@web3-react/core/dist/types';\nimport UncheckedJsonRpcSigner from 'provider/UncheckedJsonRpcSigner';\nimport { sendAction } from './actions/actions';\nimport { web3ContextNames } from '../provider/connectors';\nimport PromiEvent from 'promievent';\nimport { TXEvents } from '../types';\nimport moment from 'moment';\nimport { schema } from '../services/ABIService';\n\nexport enum ContractType {\n    ERC20 = 'ERC20',\n    BondedToken = 'BondedToken',\n    BondingCurve = 'BondingCurve',\n    BondingCurveEther = 'BondingCurveEther',\n    RewardsDistributor = 'RewardsDistributor',\n    StaticCurveLogic = 'StaticCurveLogic',\n    DecentralizedAutonomousTrust = 'DecentralizedAutonomousTrust',\n    Multicall = 'Multicall'\n}\n\nexport interface ChainData {\n    currentBlockNumber: number;\n}\n\nenum ERRORS {\n    UntrackedChainId = 'Attempting to access data for untracked chainId',\n    ContextNotFound = 'Specified context name note stored',\n    BlockchainActionNoAccount = 'Attempting to do blockchain transaction with no account',\n    BlockchainActionNoChainId = 'Attempting to do blockchain transaction with no chainId',\n    BlockchainActionNoResponse = 'No error or response received from blockchain action',\n}\n\nexport default class ProviderStore {\n    @observable provider: any;\n    @observable accounts: string[];\n    @observable defaultAccount: string | null;\n    @observable web3Contexts: object;\n    @observable blockNumber: number;\n    @observable supportedNetworks: number[];\n    @observable chainData: ChainData;\n    @observable activeChainId: number;\n    @observable activeFetchLoop: any;\n    @observable activeAccount: string;\n    rootStore: RootStore;\n\n    constructor(rootStore) {\n        this.rootStore = rootStore;\n        this.web3Contexts = {};\n        this.chainData = { currentBlockNumber: -1 } as ChainData;\n    }\n\n    isFresh(blockNumber: number): boolean {\n        return blockNumber === this.getCurrentBlockNumber();\n    }\n\n    isFresher(newBlockNumber: number, oldBlockNumber: number): boolean {\n        return newBlockNumber > oldBlockNumber;\n    }\n\n    isBlockStale(blockNumber: number) {\n        return blockNumber < this.chainData.currentBlockNumber;\n    }\n\n    getCurrentBlockNumber(): number {\n        return this.chainData.currentBlockNumber;\n    }\n\n    @action setCurrentBlockNumber(blockNumber): void {\n        this.chainData.currentBlockNumber = blockNumber;\n    }\n\n    @action setActiveAccount(account: string) {\n        this.activeAccount = account;\n    }\n\n    @action fetchUserBlockchainData = async (\n        web3React: Web3ReactContextInterface,\n        account: string\n    ) => {\n        const { transactionStore } = this.rootStore;\n\n        console.debug('[Fetch Start - User Blockchain Data]', {\n            account,\n        });\n\n        transactionStore.checkPendingTransactions(web3React, account);\n    };\n\n    // account is optional\n    getProviderOrSigner(library, account) {\n        console.debug('[getProviderOrSigner', {\n            library,\n            account,\n            signer: library.getSigner(account),\n        });\n\n        return account\n            ? new UncheckedJsonRpcSigner(library.getSigner(account))\n            : library;\n    }\n\n    getContract(\n        web3React: Web3ReactContextInterface,\n        type: ContractType,\n        address: string,\n        signerAccount?: string\n    ): ethers.Contract {\n        const { library } = web3React;\n\n        if (signerAccount) {\n            return new library.eth.Contract(schema[type], address, {\n                from: signerAccount,\n            });\n        }\n\n        return new library.eth.Contract(schema[type], address);\n    }\n\n    // get blockTime from blockNumber\n    async getBlockTime(blockNumber) {\n        const context = this.getActiveWeb3React();\n        const blockData = await context.library.eth.getBlock(blockNumber);\n        const date = new Date(blockData.timestamp * 1000);\n        return moment(date).format('DD.MM - HH:mm');\n    }\n\n\n    // get blockHash from blockNumber\n    async getBlockHash(blockNumber) {\n        const context = this.getActiveWeb3React();\n        const blockData = await context.library.eth.getBlock(blockNumber);\n        return blockData.hash;\n    }\n\n    getActiveWeb3React(): Web3ReactContextInterface {\n        const contextInjected = this.web3Contexts[web3ContextNames.injected];\n\n        return contextInjected;\n    }\n\n    getWeb3React(name): Web3ReactContextInterface {\n        if (!this.web3Contexts[name]) {\n            throw new Error(ERRORS.ContextNotFound);\n        }\n        return this.web3Contexts[name];\n    }\n\n    @action setWeb3Context(name, context: Web3ReactContextInterface) {\n        console.debug('[setWeb3Context]', name, context);\n        this.web3Contexts[name] = context;\n    }\n\n    @action sendTransaction = (\n        web3React: Web3ReactContextInterface,\n        contractType: ContractType,\n        contractAddress: string,\n        action: string,\n        params: any[],\n        overrides?: any\n    ): PromiEvent<any> => {\n        const { transactionStore } = this.rootStore;\n        const { chainId, account } = web3React;\n\n        overrides = overrides ? overrides : {};\n\n        if (!account) {\n            throw new Error(ERRORS.BlockchainActionNoAccount);\n        }\n\n        if (!chainId) {\n            throw new Error(ERRORS.BlockchainActionNoChainId);\n        }\n\n        const contract = this.getContract(\n            web3React,\n            contractType,\n            contractAddress,\n            account\n        );\n\n        const response = sendAction({\n            contract,\n            action,\n            sender: account,\n            data: params,\n            overrides,\n        }).on(TXEvents.TX_HASH, (hash) => {\n            transactionStore.addTransactionRecord(account, hash);\n        });\n\n        return response;\n    };\n}\n","import { Contract } from 'ethers';\nimport { TXEvents } from '../../types';\nimport { getErrorByCode, isKnownErrorCode } from './error';\nimport PromiEvent from 'promievent';\n\ninterface ActionRequest {\n    contract: Contract;\n    action: string;\n    sender: string;\n    data: any[];\n    overrides: any;\n}\n\nexport interface ActionResponse {\n    contract: Contract;\n    action: string;\n    sender: string;\n    data: object;\n    txResponse: any | undefined;\n    error: any | undefined;\n}\n\nconst preLog = (params: ActionRequest) => {\n    console.debug(`[@action start: ${params.action}]`, {\n        contract: params.contract,\n        action: params.action,\n        sender: params.sender,\n        data: params.data,\n        overrides: params.overrides,\n    });\n};\n\nexport const sendAction = (params: ActionRequest): PromiEvent<any> => {\n    const { contract, action, sender, data, overrides } = params;\n    preLog(params);\n\n    const promiEvent = new PromiEvent<any>(() => {\n        contract.methods[action](...data)\n            .send({ from: sender, ...overrides })\n            .once('transactionHash', (hash) => {\n                promiEvent.emit(TXEvents.TX_HASH, hash);\n                console.debug(TXEvents.TX_HASH, hash);\n            })\n            .once('receipt', (receipt) => {\n                promiEvent.emit(TXEvents.RECEIPT, receipt);\n                console.debug(TXEvents.RECEIPT, receipt);\n            })\n            .once('confirmation', (confNumber, receipt) => {\n                promiEvent.emit(TXEvents.CONFIRMATION, {\n                    confNumber,\n                    receipt,\n                });\n                console.debug(TXEvents.CONFIRMATION, {\n                    confNumber,\n                    receipt,\n                });\n            })\n            .on('error', (error) => {\n                console.debug(error.code);\n                if (error.code && isKnownErrorCode(error.code)) {\n                    promiEvent.emit(\n                        TXEvents.TX_ERROR,\n                        getErrorByCode(error.code)\n                    );\n                    console.debug(TXEvents.TX_ERROR, getErrorByCode(error.code));\n                } else {\n                    promiEvent.emit(TXEvents.INVARIANT, error);\n                    console.debug(TXEvents.INVARIANT, error);\n                }\n            })\n            .then((receipt) => {\n                promiEvent.emit(TXEvents.FINALLY, receipt);\n                console.debug(TXEvents.FINALLY, receipt);\n            })\n            .catch((e) => {\n                console.debug('rejected', e);\n            });\n    });\n\n    return promiEvent;\n};\n","interface AbiMap {\n    [index: string]: object;\n}\n\nexport const schema = {\n    ERC20: require('../contracts/ERC20').abi,\n    BondedToken: require('../contracts/ERC20').abi,\n    BondingCurve: require('../contracts/ERC20').abi,\n    BondingCurveEther: require('../contracts/ERC20').abi,\n    RewardsDistributor: require('../contracts/ERC20').abi,\n    StaticCurveLogic: require('../contracts/ERC20').abi,\n    DecentralizedAutonomousTrust: require('../contracts/DecentralizedAutonomousTrust')\n        .abi,\n    Multicall: require('../contracts/Multicall')\n    .abi,\n};\n\nexport default class ABIService {\n    abiMap: AbiMap;\n\n    getAbi(contractType: string) {\n        return schema[contractType];\n    }\n}\n","import { BigNumber } from 'bignumber.js';\n\nBigNumber.config({\n    EXPONENTIAL_AT: [-100, 100],\n    ROUNDING_MODE: BigNumber.ROUND_DOWN,\n    DECIMAL_PLACES: 18,\n});\n\nexport { BigNumber };\n","import styled, { keyframes } from 'styled-components';\nimport { darken } from 'polished';\n\nexport const Button = styled.button.attrs(({ warning, theme }) => ({\n    backgroundColor: warning ? theme.salmonRed : theme.royalBlue,\n}))`\n    padding: 1rem 2rem 1rem 2rem;\n    border-radius: 3rem;\n    cursor: pointer;\n    user-select: none;\n    font-size: 1rem;\n    border: none;\n    outline: none;\n    background-color: ${({ backgroundColor }) => backgroundColor};\n    color: ${({ theme }) => theme.white};\n    width: 100%;\n\n    :hover,\n    :focus {\n        background-color: ${({ backgroundColor }) =>\n            darken(0.05, backgroundColor)};\n    }\n\n    :active {\n        background-color: ${({ backgroundColor }) =>\n            darken(0.1, backgroundColor)};\n    }\n\n    :disabled {\n        background-color: ${({ theme }) => theme.concreteGray};\n        color: ${({ theme }) => theme.silverGray};\n        cursor: auto;\n    }\n`;\n\nexport const Link = styled.a.attrs({\n    target: '_blank',\n    rel: 'noopener noreferrer',\n})`\n    text-decoration: none;\n    cursor: pointer;\n    color: var(--turquois-text);\n\n    :focus {\n        outline: none;\n        text-decoration: underline;\n    }\n\n    :active {\n        text-decoration: none;\n    }\n`;\n\nexport const BorderlessInput = styled.input`\n    color: ${({ theme }) => theme.textColor};\n    font-size: 1rem;\n    outline: none;\n    border: none;\n    flex: 1 1 auto;\n    width: 0;\n    background-color: ${({ theme }) => theme.inputBackground};\n\n    [type='number'] {\n        -moz-appearance: textfield;\n    }\n\n    ::-webkit-outer-spin-button,\n    ::-webkit-inner-spin-button {\n        -webkit-appearance: none;\n    }\n\n    ::placeholder {\n        color: ${({ theme }) => theme.chaliceGray};\n    }\n`;\n\nconst rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\nexport const Spinner = styled.img`\n    animation: 2s ${rotate} linear infinite;\n    width: 16px;\n    height: 16px;\n`;\n","import React, { useEffect } from 'react';\nimport {\n    createGlobalStyle,\n    css,\n    ThemeProvider as StyledComponentsThemeProvider,\n} from 'styled-components';\nimport { checkSupportedTheme, getQueryParam } from 'utils/helpers';\nimport { useStores } from '../contexts/storesContext';\n\nexport * from './components';\n\nexport const SUPPORTED_THEMES = {\n    DARK: 'DARK',\n    LIGHT: 'LIGHT',\n};\n\nconst MEDIA_WIDTHS = {\n    upToSmall: 600,\n    upToMedium: 960,\n    upToLarge: 1280,\n};\n\nconst mediaWidthTemplates = Object.keys(MEDIA_WIDTHS).reduce(\n    (accumulator, size) => {\n        accumulator[size] = (...args) => css`\n            @media (max-width: ${MEDIA_WIDTHS[size]}px) {\n                ${css(...args)}\n            }\n        `;\n        return accumulator;\n    },\n    {}\n);\n\nconst white = '#FFFFFF';\nconst black = '#000000';\n\nexport default function ThemeProvider({ children }) {\n    const {\n        root: { appSettingsStore },\n    } = useStores();\n\n    const darkMode = appSettingsStore.darkMode;\n\n    const themeURL = checkSupportedTheme(\n        getQueryParam(window.location, 'theme')\n    );\n    const themeToRender = themeURL\n        ? themeURL.toUpperCase() === SUPPORTED_THEMES.DARK\n            ? true\n            : themeURL.toUpperCase() === SUPPORTED_THEMES.LIGHT\n            ? false\n            : darkMode\n        : darkMode;\n\n    useEffect(() => {\n        appSettingsStore.setDarkMode(themeToRender);\n    }, [appSettingsStore, themeToRender]);\n    return (\n        <StyledComponentsThemeProvider theme={theme(themeToRender)}>\n            {children}\n        </StyledComponentsThemeProvider>\n    );\n}\n\nconst theme = (darkMode) => ({\n    white,\n    black,\n    textColor: darkMode ? white : '#010101',\n    greyText: darkMode ? white : '#6C7284',\n\n    // for setting css on <html>\n    backgroundColor: darkMode ? '#333639' : white,\n\n    modalBackground: darkMode ? 'rgba(0,0,0,0.6)' : 'rgba(0,0,0,0.5)',\n    inputBackground: darkMode ? '#202124' : white,\n    placeholderGray: darkMode ? '#5F5F5F' : '#E1E1E1',\n    shadowColor: darkMode ? '#000' : '#2F80ED',\n\n    // grays\n    concreteGray: darkMode ? '#292C2F' : '#FAFAFA',\n    mercuryGray: darkMode ? '#333333' : '#E1E1E1',\n    silverGray: darkMode ? '#737373' : '#C4C4C4',\n    chaliceGray: darkMode ? '#7B7B7B' : '#AEAEAE',\n    doveGray: darkMode ? '#C4C4C4' : '#737373',\n    mineshaftGray: darkMode ? '#E1E1E1' : '#2B2B2B',\n    activeGray: darkMode ? '#292C2F' : '#F7F8FA',\n    buttonOutlineGrey: darkMode ? '#FAFAFA' : '#F2F2F2',\n    tokenRowHover: darkMode ? '#404040' : '#F2F2F2',\n\n    //blacks\n    charcoalBlack: darkMode ? '#F2F2F2' : '#404040',\n    // blues\n    zumthorBlue: darkMode ? '#212529' : '#EBF4FF',\n    // TODO refactor; malibuBlue changed as quick hack to a different color JK 013120\n    malibuBlue: darkMode ? '#E67AEF' : '#4C5480',\n    // TODO refactor; royalBlue changed as quick hack to a different color JK 013120\n    royalBlue: darkMode ? '#DC6BE5' : '#fafafa',\n    loadingBlue: darkMode ? '#e4f0ff' : '#e4f0ff',\n\n    // purples\n    wisteriaPurple: '#DC6BE5',\n    // reds\n    salmonRed: '#FF6871',\n    // orange\n    pizazzOrange: '#FF8F05',\n    // yellows\n    warningYellow: '#FFE270',\n    // body text color\n    bodyText: '#90a4ae',\n    //green\n    connectedGreen: '#27AE60',\n\n    //branded\n    metaMaskOrange: '#E8831D',\n\n    //specific\n    textHover: darkMode ? theme.bodyText : theme.doveGray,\n\n    // connect button when loggedout\n    buttonFaded: darkMode ? '#DC6BE5' : '#737373',\n\n    // media queries\n    mediaWidth: mediaWidthTemplates,\n    // css snippets\n    flexColumnNoWrap: css`\n        display: flex;\n        flex-flow: column nowrap;\n    `,\n    flexRowNoWrap: css`\n        display: flex;\n        flex-flow: row nowrap;\n    `,\n});\n\nexport const GlobalStyle = createGlobalStyle`\n  @import url('https://rsms.me/inter/inter.css');\n  html { font-family: 'Inter', sans-serif; }\n  @supports (font-variation-settings: normal) {\n    html { font-family: 'Inter var', sans-serif; }\n  }\n\n  html {\n    font-size: 16px;\n    font-variant: none;\n    color: ${({ theme }) => theme.textColor};\n    background-color: ${({ theme }) => theme.backgroundColor};\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  }\n`;\n","// Libraries\nimport jazzicon from 'jazzicon';\nimport { ethers, utils } from 'ethers';\nimport { BigNumber } from 'utils/bignumber';\nimport { SUPPORTED_THEMES } from '../theme';\n\n// Utils\nexport const MAX_GAS = utils.bigNumberify('0xffffffff');\nexport const MAX_UINT = utils.bigNumberify(ethers.constants.MaxUint256);\nexport const DEFAULT_TOKEN_DECIMALS = 18;\n\nexport function bnum(\n    val: string | number | utils.BigNumber | BigNumber\n): BigNumber {\n    return new BigNumber(val.toString());\n}\n\nexport function scale(input: BigNumber, decimalPlaces: number): BigNumber {\n    const scalePow = new BigNumber(decimalPlaces.toString());\n    const scaleMul = new BigNumber(10).pow(scalePow);\n    return input.times(scaleMul);\n}\n\nexport function setPropertyToMaxUintIfEmpty(value?): string {\n    if (!value || value === 0 || value === '') {\n        value = MAX_UINT.toString();\n    }\n    return value;\n}\n\nexport function setPropertyToZeroIfEmpty(value?): string {\n    if (!value || value === '') {\n        value = '0';\n    }\n    return value;\n}\n\nexport function hasMaxApproval(amount: BigNumber): boolean {\n    return amount.gte(bnum(MAX_UINT.div(2).toString()));\n}\n\nexport function isEmpty(str: string): boolean {\n    return !str || 0 === str.length;\n}\n\nexport function roundValue(value, decimals = 4): string {\n    const decimalPoint = value.indexOf('.');\n    if (decimalPoint === -1) {\n        return value;\n    }\n    return value.slice(0, decimalPoint + decimals + 1);\n}\n\nexport function str(value: any): string {\n    return value.toString();\n}\n\nexport function getQueryParam(windowLocation, name) {\n    var q = windowLocation.search.match(\n        new RegExp('[?&]' + name + '=([^&#?]*)')\n    );\n    return q && q[1];\n}\n\nexport function checkSupportedTheme(themeName) {\n    if (themeName && themeName.toUpperCase() in SUPPORTED_THEMES) {\n        return themeName.toUpperCase();\n    }\n    return null;\n}\n\nexport const copyToClipboard = (e) => {\n    const value = e.target.title.replace(',', '');\n    var aux = document.createElement('input');\n    aux.setAttribute('value', value);\n    document.body.appendChild(aux);\n    aux.select();\n    document.execCommand('copy');\n    document.body.removeChild(aux);\n    alert(`Value: \"${value}\" copied to clipboard`);\n};\n\nexport const generateIcon = (address) => {\n    return jazzicon(28, address.substr(0, 10));\n};\n","import { ValidationRules } from 'react-form-validator-core';\nimport { BigNumber } from './bignumber';\nimport { bnum } from './helpers';\n\nexport enum ValidationStatus {\n    VALID = 'Valid',\n    EMPTY = 'Empty',\n    ZERO = 'Zero',\n    NOT_FLOAT = 'Not Float',\n    NEGATIVE = 'Negative',\n    INSUFFICIENT_BALANCE = 'Insufficient Balance',\n    NO_POOLS = 'There are no Pools with selected tokens',\n    MAX_DIGITS_EXCEEDED = 'Maximum Digits Exceeded',\n    MAX_VALUE_EXCEEDED = 'Maximum Value Exceeded',\n    MIN_VALUE_NOT_EXCEEDED = 'Below minimum investment',\n}\n\nexport const validateTokenValue = (\n    value: string,\n    options?: {\n        maxBalance?: BigNumber | undefined;\n        minValue?: BigNumber | undefined;\n        limitDigits?: boolean;\n    }\n): ValidationStatus => {\n    if (ValidationRules.isEmpty(value)) {\n        return ValidationStatus.EMPTY;\n    }\n\n    if (value.substr(0, 1) === '.') {\n        value = '0' + value;\n    }\n    if (!ValidationRules.isFloat(value)) {\n        return ValidationStatus.NOT_FLOAT;\n    }\n\n    if (parseFloat(value).toString() === '0') {\n        return ValidationStatus.ZERO;\n    }\n\n    if (!ValidationRules.isPositive(value)) {\n        return ValidationStatus.NEGATIVE;\n    }\n\n    // Is a valid positive number, beyond this point\n\n    if (options && options.limitDigits) {\n        // restrict to 2 decimal places\n        const acceptableValues = [/^$/, /^\\d{1,2}$/, /^\\d{0,2}\\.\\d{0,2}$/];\n        // if its within accepted decimal limit, update the input state\n        if (!acceptableValues.some((a) => a.test(value))) {\n            return ValidationStatus.MAX_DIGITS_EXCEEDED;\n        }\n    }\n    \n    if (options && options.maxBalance) {\n        const valueBN = bnum(value);\n        if (valueBN.gt(options.maxBalance)) {\n            return ValidationStatus.INSUFFICIENT_BALANCE;\n        }\n    }\n\n    if (options && options.minValue) {\n        const valueBN = bnum(value);\n        if (valueBN.lt(options.minValue)) {\n            return ValidationStatus.MIN_VALUE_NOT_EXCEEDED;\n        }\n    }\n\n    return ValidationStatus.VALID;\n};\n","import { action, observable } from 'mobx';\nimport RootStore from './Root';\nimport { BuyReturnCached, SellReturnCached, TradeEvent } from './datStore';\nimport { BigNumber } from '../utils/bignumber';\nimport { bnum } from '../utils/helpers';\nimport { denormalizeBalance } from '../utils/token';\n\nexport const ConfirmationFlags = {\n    ENABLE_TKN: 'enable_TKN',\n    DEPOSIT_TKN: 'deposit_TKN',\n    ENABLE_DXD: 'enabled_DXD',\n    SELL_DXD: 'sell_dxd',\n};\n\nexport enum TransactionState {\n    NONE,\n    SIGNING_TX,\n    UNCONFIRMED,\n    CONFIRMED,\n    APPROVED,\n    FAILED\n}\n\ninterface Buy {\n    buyAmount: BigNumber;\n    buyPrice: BigNumber;\n    payAmount: BigNumber;\n}\n\ninterface Sell {\n    sellAmount: BigNumber;\n    sellPrice: BigNumber;\n    rewardForSell: BigNumber;\n}\n\nclass TradingFormStore {\n    @observable activeTab = 'buy';\n    @observable previousBuy: Buy;\n    @observable previousSell: Sell;\n    @observable reserveBalance = '';\n    @observable buyPrice: BigNumber = bnum(0);\n    @observable sellPrice: BigNumber = bnum(0);\n\n    @observable enableTKNState = 4;\n    @observable buyingState = TransactionState.NONE;\n    @observable buyAmount = '';\n\n    @observable enableDXDState = TransactionState.NONE;\n    @observable sellingState = TransactionState.NONE;\n    \n    @observable sellAmount = '';\n    @observable rewardForSell: BigNumber = bnum(0);\n\n    @observable bondedTokenBalance = 0;\n    @observable bondedTokenPrice = 0;\n\n    @observable payAmount: BigNumber = bnum(0);\n\n    @observable recentTrades = [];\n    @observable recentTradesSet = false;\n    rootStore: RootStore;\n\n    constructor(rootStore) {\n        this.rootStore = rootStore;\n    }\n\n    @action resetTransactionStates() {\n        this.buyingState = TransactionState.NONE;\n        this.sellingState = TransactionState.NONE;\n        this.enableDXDState = TransactionState.NONE;\n    }\n\n    setPayAmount(amount: BigNumber) {\n        this.payAmount = amount;\n    }\n\n    setSellAmount(amount: string) {\n        this.sellAmount = amount;\n    }\n\n    setRewardForSell(amount: BigNumber) {\n        this.rewardForSell = amount;\n    }\n\n    // setPrice()\n    setBuyPrice(price: BigNumber) {\n        this.buyPrice = price;\n    }\n\n    setSellPrice(price: BigNumber) {\n        this.sellPrice = price;\n    }\n\n    @action setActiveTab(newActiveTab: string){\n        this.activeTab = newActiveTab\n    }\n\n    @action setPreviousBuy(buy: Buy) {\n        this.previousBuy = buy;\n    }\n\n    @action setPreviousSell(sell: Sell) {\n        this.previousSell = sell;\n    }\n\n    isDataLoaded(account: string): boolean {\n        const {tokenStore, configStore} = this.rootStore;\n        const allowance = tokenStore.getAllowance(configStore.getTokenAddress(), account, configStore.getTokenAddress());\n        const collateralBalance = tokenStore.getEtherBalance(account);\n        const dxdBalance = tokenStore.getBalance(configStore.getTokenAddress(), account);\n\n        if (!!allowance && !!collateralBalance && !!dxdBalance) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    handleBuyReturn(buyReturn: BuyReturnCached) {\n        const weiValue = denormalizeBalance(this.buyAmount);\n        const inputValueFresh = buyReturn.value.totalPaid.eq(weiValue);\n        if (\n            this.rootStore.providerStore.isFresh(buyReturn.blockNumber) &&\n            inputValueFresh\n        ) {\n            this.setBuyPrice(buyReturn.value.pricePerToken);\n            this.setPayAmount(buyReturn.value.tokensIssued);\n        }\n    }\n\n    handleSellReturn(sellReturn: SellReturnCached) {\n        const weiValue = denormalizeBalance(this.sellAmount);\n        const inputValueFresh = sellReturn.value.tokensSold.eq(weiValue);\n        if (\n            this.rootStore.providerStore.isFresh(sellReturn.blockNumber) &&\n            inputValueFresh\n        ) {\n            this.setSellPrice(sellReturn.value.returnPerToken);\n            this.setRewardForSell(sellReturn.value.currencyReturned);\n        }\n    }\n\n    @action resetBuyAmount() {\n        this.buyAmount = '';\n    }\n\n    @action resetBuyForm() {\n        this.resetBuyAmount();\n        this.buyingState = TransactionState.NONE;\n        this.buyPrice = bnum(0);\n        this.payAmount = bnum(0);\n    }\n\n    @action setEnableDXDState(newState) {\n        this.enableDXDState = newState;\n    }\n\n    @action resetSellForm() {\n        this.sellAmount = '';\n        this.sellingState = TransactionState.NONE;\n        this.sellPrice = bnum(0);\n        this.rewardForSell = bnum(0)\n    }\n\n    @action setBuyingState(state: TransactionState) {\n         this.buyingState = state;\n    }\n\n    // setBuyAmount()\n    @action setBuyAmount(buyAmount) {\n        this.buyAmount = buyAmount;\n    }\n\n    formatNumber(number) {\n        return Number(number).toFixed(4);\n    }\n\n    formatBuyPrice() {\n        return this.formatNumber(this.buyPrice);\n    }\n\n    formatSellPrice() {\n        return this.formatNumber(this.sellPrice);\n    }\n\n    formatRewardForSell() {\n        return this.formatNumber(this.rewardForSell);\n    }\n\n    formatBuyAmount() {\n        return this.formatNumber(this.buyAmount);\n    }\n\n    formatSellAmount() {\n        return this.formatNumber(this.sellAmount);\n    }\n\n    // TODO look into how to pass this as a callback??\n    // setEnableTKNStateConfirmed()\n    setStateConfirmed(confirmationFlag) {\n        if (confirmationFlag === ConfirmationFlags.ENABLE_TKN) {\n            return (this.enableTKNState = 3);\n        } else if (confirmationFlag === ConfirmationFlags.DEPOSIT_TKN) {\n            return (this.buyingState = 3);\n        } else if (confirmationFlag === ConfirmationFlags.ENABLE_DXD) {\n            return (this.enableDXDState = 3);\n        } else if (confirmationFlag === ConfirmationFlags.SELL_DXD) {\n            return (this.sellingState = 3);\n        } else {\n          return (this.sellingState = 3);\n        }\n    }\n\n    @action setRecentTrades(trades: TradeEvent[]) {\n        this.recentTrades = trades;\n        this.recentTradesSet = true;\n    }\n}\n\nexport default TradingFormStore;\n","// Token Scale -> Wei Scale\nimport { BigNumber } from './bignumber';\nimport { bnum, DEFAULT_TOKEN_DECIMALS, scale } from './helpers';\n\nexport const denormalizeBalance = (\n    normalizedBalance: string | BigNumber,\n    decimals: number = DEFAULT_TOKEN_DECIMALS\n): BigNumber => {\n    return scale(bnum(normalizedBalance), decimals);\n};\n\n// Wei Scale -> Token Scale\nexport const normalizeBalance = (\n    amount: BigNumber,\n    decimals: number = DEFAULT_TOKEN_DECIMALS\n): BigNumber => {\n    return scale(bnum(amount), -decimals);\n};\n\nexport const formatNumberValue = (\n    normalizedBalance: BigNumber,\n    displayPrecision: number = 4,\n    truncateAt?: number,\n    roundDown: boolean = true\n): string => {\n    if (normalizedBalance.eq(0)) {\n        return bnum(0).toFixed(displayPrecision);\n    }\n\n    let result = bnum(normalizedBalance)\n        .decimalPlaces(displayPrecision, roundDown ? BigNumber.ROUND_DOWN : BigNumber.ROUND_UP)\n        .toString();\n\n    result = padToDecimalPlaces(result, displayPrecision);\n\n    if (truncateAt && result.length > truncateAt) {\n        return result.substring(0, 20) + '...';\n    } else {\n        return result;\n    }\n};\n\nexport const formatBalance = (\n    balance: BigNumber,\n    decimals: number = 18,\n    precision: number = 4,\n    roundDown: boolean = true\n): string => {\n    if (balance.eq(0)) {\n        return bnum(0).toFixed(precision);\n    }\n\n    const result = scale(balance, -decimals)\n        .decimalPlaces(precision, roundDown ? BigNumber.ROUND_DOWN : BigNumber.ROUND_UP)\n        .toString();\n\n    return padToDecimalPlaces(result, precision);\n};\n\nexport const padToDecimalPlaces = (\n    value: string,\n    minDecimals: number\n): string => {\n    const split = value.split('.');\n    const zerosToPad = split[1] ? minDecimals - split[1].length : minDecimals;\n\n    if (zerosToPad > 0) {\n        let pad = '';\n\n        // Add decimal point if no decimal portion in original number\n        if (zerosToPad === minDecimals) {\n            pad += '.';\n        }\n        for (let i = 0; i < zerosToPad; i++) {\n            pad += '0';\n        }\n        return value + pad;\n    }\n    return value;\n};\n","import { action, observable } from 'mobx';\nimport RootStore from 'stores/Root';\nimport { Web3ReactContextInterface } from '@web3-react/core/dist/types';\nimport { TransactionReceipt } from 'web3-core';\n\nexport interface TransactionRecord {\n    hash: string;\n    blockNumberChecked: number;\n    receipt: TransactionReceipt | undefined;\n}\n\nconst ERRORS = {\n    unknownTxHash: 'Transaction hash is not stored',\n    unknownNetworkId: 'NetworkID specified is not tracked',\n    txHashAlreadyExists: 'Transaction hash already exists for network',\n    txHasNoHash: 'Attempting to add transaction record without hash',\n};\n\nexport enum FetchCode {\n    SUCCESS,\n    FAILURE,\n    STALE,\n}\n\nexport interface TransactionRecordMap {\n    [index: string]: TransactionRecord[];\n}\n\nexport default class TransactionStore {\n    @observable txRecords: TransactionRecordMap;\n    rootStore: RootStore;\n\n    constructor(rootStore) {\n        this.rootStore = rootStore;\n        this.txRecords = {} as TransactionRecordMap;\n    }\n\n    // @dev Transactions are pending if we haven't seen their receipt yet\n    getPendingTransactions(account: string): TransactionRecord[] {\n        if (this.txRecords[account]) {\n            const records = this.txRecords[account];\n            return records.filter((value) => {\n                return this.isTxPending(value);\n            });\n        }\n\n        return [] as TransactionRecord[];\n    }\n\n    getConfirmedTransactions(account: string): TransactionRecord[] {\n        if (this.txRecords[account]) {\n            const records = this.txRecords[account];\n            return records.filter((value) => {\n                return !this.isTxPending(value);\n            });\n        }\n\n        return [] as TransactionRecord[];\n    }\n\n    @action async checkPendingTransactions(\n        web3React: Web3ReactContextInterface,\n        account\n    ): Promise<FetchCode> {\n        const { providerStore } = this.rootStore;\n        const currentBlock = providerStore.getCurrentBlockNumber();\n\n        const { library } = web3React;\n        if (this.txRecords[account]) {\n            const records = this.txRecords[account];\n            records.forEach((value) => {\n                if (\n                    this.isTxPending(value) &&\n                    this.isStale(value, currentBlock)\n                ) {\n                    library.eth\n                        .getTransactionReceipt(value.hash)\n                        .then((receipt) => {\n                            value.blockNumberChecked = currentBlock;\n                            if (receipt) {\n                                value.receipt = receipt;\n                            }\n                        })\n                        .catch(() => {\n                            value.blockNumberChecked = currentBlock;\n                        });\n                }\n            });\n        }\n\n        return FetchCode.SUCCESS;\n    }\n\n    // @dev Add transaction record. It's in a pending state until mined.\n    @action addTransactionRecord(account: string, txHash: string) {\n        const record: TransactionRecord = {\n            hash: txHash,\n            blockNumberChecked: 0,\n            receipt: undefined,\n        };\n\n        if (!txHash) {\n            throw new Error(\n                'Attempting to add transaction record without hash'\n            );\n        }\n\n        let records = this.txRecords[account];\n\n        if (records) {\n            const duplicate = records.find((value) => value.hash === txHash);\n            if (!!duplicate) {\n                throw new Error(ERRORS.txHashAlreadyExists);\n            }\n            this.txRecords[account].push(record);\n        } else {\n            this.txRecords[account] = [] as TransactionRecord[];\n            this.txRecords[account].push(record);\n        }\n    }\n\n    private isTxPending(txRecord: TransactionRecord): boolean {\n        return !txRecord.receipt;\n    }\n\n    private isStale(txRecord: TransactionRecord, currentBlock: number) {\n        return txRecord.blockNumberChecked < currentBlock;\n    }\n}\n","import { action, observable } from 'mobx';\nimport RootStore from 'stores/Root';\nimport { Web3ReactContextInterface } from '@web3-react/core/dist/types';\nimport { isChainIdSupported } from '../provider/connectors';\nimport { validateTokenValue, ValidationStatus } from '../utils/validators';\nimport { denormalizeBalance, normalizeBalance } from '../utils/token';\nimport { ContractType } from './Provider';\nimport { TransactionState } from './TradingForm';\n\nexport default class BlockchainFetchStore {\n    @observable activeFetchLoop: any;\n    @observable initialLoadComplete: boolean;\n    rootStore: RootStore;\n\n    constructor(rootStore) {\n        this.rootStore = rootStore;\n    }\n\n    @action async refreshBuyFormPreview() {\n        const { datStore, tradingStore } = this.rootStore;\n        const minValue = normalizeBalance(\n            datStore.getMinInvestment()\n        );\n\n        if (\n            validateTokenValue(tradingStore.buyAmount, {\n                minValue,\n            }) === ValidationStatus.VALID\n        ) {\n            const weiValue = denormalizeBalance(tradingStore.buyAmount);\n\n            const buyReturn = await datStore.fetchBuyReturn(weiValue);\n            tradingStore.handleBuyReturn(buyReturn);\n        }\n    }\n\n    @action setFetchLoop(\n        web3React: Web3ReactContextInterface,\n        accountSwitched?: boolean\n    ) {\n        if (web3React && web3React.active && isChainIdSupported(web3React.chainId)) {\n            const { library, account, chainId } = web3React;\n            const {\n                providerStore,\n                datStore,\n                configStore,\n                tradingStore,\n                multicallService,\n                blockchainStore,\n                tokenStore,\n                transactionStore\n            } = this.rootStore;\n\n            const activeDATAddress = configStore.getTokenAddress();\n            library.eth\n                .getBlockNumber()\n                .then((blockNumber) => {\n                    const lastCheckedBlock = providerStore.getCurrentBlockNumber();\n\n                    // console.debug('[Fetch Loop] Staleness Evaluation', {\n                    //     blockNumber,\n                    //     lastCheckedBlock,\n                    //     forceFetch,\n                    //     account: web3React.account,\n                    //     doFetch: blockNumber !== lastCheckedBlock || forceFetch,\n                    // });\n\n                    const doFetch =\n                        blockNumber !== lastCheckedBlock || accountSwitched;\n\n                    if (doFetch) {\n                        console.debug('[Fetch Loop] Fetch Blockchain Data', {\n                            blockNumber,\n                            account,\n                            chainId\n                        });\n\n                        // Set block number\n                        providerStore.setCurrentBlockNumber(blockNumber);\n\n                        if (accountSwitched) {\n                            tradingStore.resetTransactionStates();\n                        }\n\n                        // Get global blockchain data\n                        multicallService.addCall({\n                            contractType: ContractType.ERC20,\n                            address: activeDATAddress,\n                            method: 'totalSupply',\n                            params: [],\n                        });\n                        \n                        multicallService.addCall({\n                            contractType: ContractType.DecentralizedAutonomousTrust,\n                            address: activeDATAddress,\n                            method: 'burnedSupply',\n                            params: [],\n                        });\n\n                        // Get user-specific blockchain data\n                        if (account) {\n                            transactionStore.checkPendingTransactions(\n                                web3React,\n                                account\n                            );\n\n                            multicallService.addCall({\n                                contractType: ContractType.Multicall,\n                                address: configStore.getMulticallAddress(),\n                                method: 'getEthBalance',\n                                params: [account],\n                            });\n\n                            multicallService.addCall({\n                                contractType: ContractType.Multicall,\n                                address: configStore.getMulticallAddress(),\n                                method: 'getEthBalance',\n                                params: [configStore.getDATOwner()],\n                            });\n\n                            multicallService.addCall({\n                                contractType: ContractType.ERC20,\n                                address: activeDATAddress,\n                                method: 'balanceOf',\n                                params: [account],\n                            });\n\n                            multicallService.addCall({\n                                contractType: ContractType.ERC20,\n                                address: activeDATAddress,\n                                method: 'allowance',\n                                params: [account, activeDATAddress],\n                            });\n                        }\n\n                        datStore\n                            .fetchRecentTrades(10)\n                            .then((trades) => {\n                                tradingStore.setRecentTrades(trades);\n                            })\n                            .catch((e) => {\n                                // TODO: Retry on failure, unless stale.\n                                console.error(e);\n                            });\n\n                        if ( !datStore.areAllStaticParamsLoaded() ) {\n                            multicallService.addCalls(\n                                datStore.genStaticParamCalls()\n                            );\n                        }\n\n                        const baseDatCall = {\n                            contractType:\n                                ContractType.DecentralizedAutonomousTrust,\n                            address: activeDATAddress,\n                        };\n\n                        multicallService.addCalls([\n                            {\n                                ...baseDatCall,\n                                method: 'state',\n                            },\n                            {\n                                ...baseDatCall,\n                                method: 'buybackReserve',\n                            },\n                            {\n                                ...baseDatCall,\n                                method: 'minInvestment',\n                            },\n                            {\n                                ...baseDatCall,\n                                method: 'buySlopeDen',\n                            },\n                            {\n                                ...baseDatCall,\n                                method: 'buySlopeNum',\n                            },\n                        ]);\n\n                        const calls = multicallService.activeCalls;\n                        const rawCalls = multicallService.activeCallsRaw;\n\n                        multicallService\n                            .executeCalls(calls, rawCalls)\n                            .then(async (response) => {\n                                const {\n                                    calls,\n                                    results,\n                                    blockNumber,\n                                } = response;\n                                const updates = blockchainStore.reduceMulticall(\n                                    calls,\n                                    results,\n                                    blockNumber\n                                );\n                                blockchainStore.updateStore(\n                                    updates,\n                                    blockNumber\n                                );\n\n                                // Check max approval if (1. We have an account  && 2 . We have max approval) && (3. We are in the initial load 4. || We are on an account switch call)\n                                const hasMaxApproval = account && tokenStore.hasMaxApproval(configStore.getTokenAddress(), account, activeDATAddress);\n                                const setEnableDXDState = !this.initialLoadComplete || accountSwitched;\n                                \n                                if (hasMaxApproval && setEnableDXDState) {\n                                    tradingStore.setEnableDXDState(TransactionState.APPROVED);\n                                }\n\n                                if (datStore.areAllStaticParamsLoaded()) {\n                                    this.refreshBuyFormPreview();\n                                }\n                            })\n                            .catch((e) => {\n                                // TODO: Retry on failure, unless stale.\n                                console.error(e);\n                            });\n\n                            if (!this.initialLoadComplete) {\n                                this.initialLoadComplete = true;\n                            }\n                            multicallService.resetActiveCalls();\n                    }\n                })\n                .catch((error) => {\n                    console.error('[Fetch Loop Failure]', {\n                        web3React,\n                        providerStore,\n                        forceFetch: accountSwitched,\n                        chainId,\n                        account,\n                        library,\n                        error,\n                    });\n                    providerStore.setCurrentBlockNumber(undefined);\n                });\n        }\n    }\n}\n","import { action, observable } from 'mobx';\nimport RootStore from 'stores/Root';\nimport { ContractType } from 'stores/Provider';\nimport * as helpers from 'utils/helpers';\nimport { bnum } from 'utils/helpers';\nimport { parseEther } from 'ethers/utils';\nimport { BigNumber } from 'utils/bignumber';\nimport { Web3ReactContextInterface } from '@web3-react/core/dist/types';\nimport { PromiEvent } from 'web3-core';\n\nexport interface TokenBalance {\n    balance: BigNumber;\n    lastFetched: number;\n}\n\nexport interface UserAllowance {\n    allowance: BigNumber;\n    lastFetched: number;\n}\n\nexport interface TotalSupply {\n    totalSupply: BigNumber;\n    lastFetched: number;\n}\n\nexport const EtherKey = 'ether';\n\nexport default class TokenStore {\n    @observable symbols = {};\n    rootStore: RootStore;\n\n    constructor(rootStore) {\n        this.rootStore = rootStore;\n    }\n\n    getTotalSupply(tokenAddress: string): BigNumber | undefined {\n        const {blockchainStore} = this.rootStore;\n        const entry = {\n            contractType: ContractType.ERC20,\n            address: tokenAddress,\n            method: 'totalSupply',\n            params: []\n        };\n\n        if (blockchainStore.has(entry)) {\n            return bnum(blockchainStore.get(entry).value);\n        } else {\n            return undefined;\n        }\n    }\n    \n    getBurnedSupply(tokenAddress: string): BigNumber | undefined {\n        const {blockchainStore} = this.rootStore;\n        const entry = {\n            contractType: ContractType.DecentralizedAutonomousTrust,\n            address: tokenAddress,\n            method: 'burnedSupply',\n            params: []\n        };\n        \n        if (blockchainStore.has(entry)) {\n            return bnum(blockchainStore.get(entry).value);\n        } else {\n            return undefined;\n        }\n    }\n\n\n    getEtherBalance(account: string) {\n        const {blockchainStore, configStore} = this.rootStore;\n        const entry = {\n            contractType: ContractType.Multicall,\n            address: configStore.getMulticallAddress(),\n            method: 'getEthBalance',\n            params: [account]\n        };\n\n        if (blockchainStore.has(entry)) {\n            return bnum(blockchainStore.get(entry).value);\n        } else {\n            return undefined;\n        }\n    }\n\n    getBalance(tokenAddress: string, account: string): BigNumber | undefined {\n        const {blockchainStore} = this.rootStore;\n        const entry = {\n            contractType: ContractType.ERC20,\n            address: tokenAddress,\n            method: 'balanceOf',\n            params: [account]\n        };\n\n        if (blockchainStore.has(entry)) {\n            return bnum(blockchainStore.get(entry).value);\n        } else {\n            return undefined;\n        }\n    }\n\n    @action approveMax = (\n        web3React,\n        tokenAddress,\n        spender\n    ): PromiEvent<any> => {\n        const { providerStore } = this.rootStore;\n        return providerStore.sendTransaction(\n            web3React,\n            ContractType.ERC20,\n            tokenAddress,\n            'approve',\n            [spender, helpers.MAX_UINT.toString()]\n        );\n    };\n\n    @action revokeApproval = (\n        web3React,\n        tokenAddress,\n        spender\n    ): PromiEvent<any> => {\n        const { providerStore } = this.rootStore;\n        return providerStore.sendTransaction(\n            web3React,\n            ContractType.ERC20,\n            tokenAddress,\n            'approve',\n            [spender, 0]\n        );\n    };\n\n    @action mint = async (\n        web3React: Web3ReactContextInterface,\n        tokenAddress: string,\n        amount: string\n    ) => {\n        const { providerStore } = this.rootStore;\n        await providerStore.sendTransaction(\n            web3React,\n            ContractType.ERC20,\n            tokenAddress,\n            'mint',\n            [parseEther(amount).toString()]\n        );\n    };\n\n    hasMaxApproval = (tokenAddress, account, spender): boolean => {\n        const allowance = this.getAllowance(tokenAddress, account, spender);\n        if (!allowance) {\n            return false;\n        }\n        return helpers.hasMaxApproval(allowance);\n    };\n\n    getAllowance = (tokenAddress, account, spender): BigNumber | undefined => {\n        const {blockchainStore} = this.rootStore;\n        const entry = {\n            contractType: ContractType.ERC20,\n            address: tokenAddress,\n            method: 'allowance',\n            params: [account, spender]\n        };\n\n        if (blockchainStore.has(entry)) {\n            return bnum(blockchainStore.get(entry).value);\n        } else {\n            return undefined;\n        }\n    };\n}\n","import { action, observable } from 'mobx';\nimport RootStore from 'stores/Root';\n\nexport default class AppSettingsStore {\n    @observable darkMode: boolean;\n    @observable activePoolAddress: string;\n    rootStore: RootStore;\n\n    constructor(rootStore) {\n        this.rootStore = rootStore;\n        this.darkMode = false;\n    }\n\n    hasActivePool(): boolean {\n        return !!this.activePoolAddress;\n    }\n\n    getActivePoolAddress() {\n        return this.activePoolAddress;\n    }\n\n    @action setActivePoolAddress(poolAddress) {\n        this.activePoolAddress = poolAddress;\n    }\n\n    @action toggleDarkMode() {\n        this.darkMode = !this.darkMode;\n    }\n\n    @action setDarkMode(visible: boolean) {\n        this.darkMode = visible;\n    }\n}\n","import { action, observable } from 'mobx';\nimport RootStore from 'stores/Root';\n\nexport default class ModalStore {\n    @observable walletModalVisible: boolean;\n    rootStore: RootStore;\n\n    constructor(rootStore) {\n        this.rootStore = rootStore;\n        this.walletModalVisible = false;\n    }\n\n    @action toggleWalletModal() {\n        this.walletModalVisible = !this.walletModalVisible;\n    }\n\n    @action setWalletModalVisible(visible: boolean) {\n        this.walletModalVisible = visible;\n    }\n}\n","import React from 'react';\n\nexport const ETHERSCAN_PREFIXES = {\n    1: '',\n    3: 'ropsten.',\n    4: 'rinkeby.',\n    5: 'goerli.',\n    42: 'kovan.',\n};\n\nexport function getEtherscanLink(networkId, data, type) {\n    const prefix = `https://${\n        ETHERSCAN_PREFIXES[networkId] || ETHERSCAN_PREFIXES[1]\n    }etherscan.io`;\n\n    switch (type) {\n        case 'transaction': {\n            return `${prefix}/tx/${data}`;\n        }\n        case 'address':\n        default: {\n            return `${prefix}/address/${data}`;\n        }\n    }\n}\n\nexport const etherscanUrl = (networkId) => {\n    return \"https://\" + ETHERSCAN_PREFIXES[networkId] + \"etherscan.io\";\n};\n\nexport const etherscanAddress = (network, text, address) => {\n    return (\n        <a\n            className=\"address\"\n            href={`${etherscanUrl(network)}/address/${address}`}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n        >\n            {text}\n        </a>\n    );\n};\n\nexport const etherscanTx = (network, text, tx) => {\n    return (\n        <a\n            href={`${etherscanUrl(network)}/tx/${tx}`}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n        >\n            {text}\n        </a>\n    );\n};\n\nexport const etherscanToken = (network, text, token, holder = false) => {\n    return (\n        <a\n            href={`${etherscanUrl(network)}/token/${token}${\n                holder ? `?a=${holder}` : ''\n            }`}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n        >\n            {text}\n        </a>\n    );\n};\n","import RootStore from 'stores/Root';\nimport { BigNumber } from '../utils/bignumber';\nimport { ContractType } from './Provider';\nimport { action } from 'mobx';\nimport { bnum } from '../utils/helpers';\nimport PromiEvent from 'promievent';\nimport { Call } from '../services/multicall/MulticallService';\nimport { getEtherscanLink } from 'utils/etherscan';\n\nexport enum EventType {\n    Buy = 'Buy',\n    Sell = 'Sell',\n}\n\nexport interface BuyEvent {\n    price: BigNumber;\n    amount: BigNumber;\n    totalPaid: BigNumber;\n    blockNumber: number;\n    blockTime: string;\n    type: EventType;\n    hash: string;\n}\n\nexport interface SellEvent {\n    price: BigNumber;\n    amount: BigNumber;\n    totalReceived: BigNumber;\n    blockNumber: number;\n    blockTime: string;\n    type: EventType;\n    hash: string;\n}\n\nexport enum DatState {\n    STATE_INIT,\n    STATE_RUN,\n    STATE_CLOSE,\n    STATE_CANCEL,\n}\n\nexport interface BuyReturnCached {\n    value: BuyReturn;\n    blockNumber: number;\n}\n\nexport interface SellReturnCached {\n    value: SellReturn;\n    blockNumber: number;\n}\n\nexport interface BuyReturn {\n    tokensIssued: BigNumber;\n    totalPaid: BigNumber;\n    pricePerToken: BigNumber;\n}\n\nexport interface SellReturn {\n    tokensSold: BigNumber;\n    currencyReturned: BigNumber;\n    returnPerToken: BigNumber;\n}\n\nexport type TradeEvent = BuyEvent | SellEvent;\n\nexport const BLOCKS_PER_TRADES_FETCH = 100000;\n\nexport default class DatStore {\n    rootStore: RootStore;\n\n    constructor(rootStore) {\n        this.rootStore = rootStore;\n    }\n\n    private getDatContract() {\n        const { providerStore, configStore } = this.rootStore;\n        return providerStore.getContract(\n            providerStore.getActiveWeb3React(),\n            ContractType.DecentralizedAutonomousTrust,\n            configStore.getTokenAddress()\n        );\n    }\n\n    areAllStaticParamsLoaded(): boolean {\n        return (\n            !!this.getMinInvestment() &&\n            !!this.getBuySlopeNum() &&\n            !!this.getBuySlopeDen() &&\n            !!this.getInitGoal() &&\n            !!this.getPreMintedTokens() &&\n            !!this.getBurnedSupply() &&\n            !!this.getInvestmentReserveBasisPoints()\n        );\n    }\n\n    isInitPhase() {\n        return this.getState() === DatState.STATE_INIT;\n    }\n    isRunPhase() {\n        return this.getState() === DatState.STATE_RUN;\n    }\n    isCancelled() {\n        return this.getState() === DatState.STATE_CANCEL;\n    }\n    isClosed() {\n        return this.getState() === DatState.STATE_CLOSE;\n    }\n\n    getState(): DatState | undefined {\n        const { configStore } = this.rootStore;\n        const value = this.rootStore.blockchainStore.getCachedValue({\n            contractType: ContractType.DecentralizedAutonomousTrust,\n            address: configStore.getTokenAddress(),\n            method: 'state',\n        });\n        return value ? (bnum(value).toNumber() as DatState) : undefined;\n    }\n\n    getMinInvestment(): BigNumber | undefined {\n        const { configStore } = this.rootStore;\n        const value = this.rootStore.blockchainStore.getCachedValue({\n            contractType: ContractType.DecentralizedAutonomousTrust,\n            address: configStore.getTokenAddress(),\n            method: 'minInvestment',\n        });\n        return value ? bnum(value) : undefined;\n    }\n    \n    getDaoFunds() {\n        const { configStore } = this.rootStore;\n        const value = this.rootStore.blockchainStore.getCachedValue({\n            contractType: ContractType.Multicall,\n            address: configStore.getMulticallAddress(),\n            method: 'getEthBalance',\n            params: [configStore.getDATinfo().control]\n        });\n        return value ? bnum(value) : undefined;\n    }\n\n    getBuySlopeNum() {\n        const { configStore } = this.rootStore;\n        const value = this.rootStore.blockchainStore.getCachedValue({\n            contractType: ContractType.DecentralizedAutonomousTrust,\n            address: configStore.getTokenAddress(),\n            method: 'buySlopeNum',\n        });\n        return value ? bnum(value) : undefined;\n    }\n\n    getBuySlopeDen() {\n        const { configStore } = this.rootStore;\n        const value = this.rootStore.blockchainStore.getCachedValue({\n            contractType: ContractType.DecentralizedAutonomousTrust,\n            address: configStore.getTokenAddress(),\n            method: 'buySlopeDen',\n        });\n        return value ? bnum(value) : undefined;\n    }\n\n    getInitGoal() {\n        const { configStore } = this.rootStore;\n        const value = this.rootStore.blockchainStore.getCachedValue({\n            contractType: ContractType.DecentralizedAutonomousTrust,\n            address: configStore.getTokenAddress(),\n            method: 'initGoal',\n        });\n        return value ? bnum(value) : undefined;\n    }\n\n    getReserveBalance(): BigNumber | undefined {\n        const { configStore } = this.rootStore;\n        const value = this.rootStore.blockchainStore.getCachedValue({\n            contractType: ContractType.DecentralizedAutonomousTrust,\n            address: configStore.getTokenAddress(),\n            method: 'buybackReserve',\n        });\n        return value ? bnum(value) : undefined;\n    }\n\n    getPreMintedTokens() {\n        const { configStore } = this.rootStore;\n        const value = this.rootStore.blockchainStore.getCachedValue({\n            contractType: ContractType.DecentralizedAutonomousTrust,\n            address: configStore.getTokenAddress(),\n            method: 'initReserve',\n        });\n        return value ? bnum(value) : undefined;\n    }\n    \n    getBurnedSupply() {\n        const { configStore } = this.rootStore;\n        const value = this.rootStore.blockchainStore.getCachedValue({\n            contractType: ContractType.DecentralizedAutonomousTrust,\n            address: configStore.getTokenAddress(),\n            method: 'burnedSupply',\n        });\n        return value ? bnum(value) : undefined;\n    }\n    \n    getKickstarterPrice() {\n      const buySlopeNum = this.getBuySlopeNum(),\n      buySlopeDen = this.getBuySlopeDen(),\n      initGoal = this.getInitGoal();\n      return initGoal.div(2).times(buySlopeNum).div(buySlopeDen);\n    }\n    \n    getInvestmentReserveBasisPoints() {\n        const { configStore } = this.rootStore;\n        const value = this.rootStore.blockchainStore.getCachedValue({\n            contractType: ContractType.DecentralizedAutonomousTrust,\n            address: configStore.getTokenAddress(),\n            method: 'investmentReserveBasisPoints',\n        });\n        return value ? bnum(value) : undefined;\n    }\n\n    genStaticParamCalls(): Call[] {\n        const { configStore } = this.rootStore;\n        const baseCall = {\n            contractType: ContractType.DecentralizedAutonomousTrust,\n            address: configStore.getTokenAddress(),\n        };\n\n        const calls: Call[] = [\n            {\n                ...baseCall,\n                method: 'initReserve',\n            },\n            {\n                ...baseCall,\n                method: 'initGoal',\n            },\n            {\n                ...baseCall,\n                method: 'buySlopeNum',\n            },\n            {\n                ...baseCall,\n                method: 'buySlopeDen',\n            },\n            {\n                ...baseCall,\n                method: 'investmentReserveBasisPoints',\n            },\n        ];\n\n        return calls;\n    }\n\n    async estimateBuyValue(currencyValue: BigNumber): Promise<BigNumber> {\n        const dat = this.getDatContract();\n        return bnum(\n            await dat.methods.estimateBuyValue(currencyValue.toString()).call()\n        );\n    }\n\n    async estimateSellValue(quantityToSell: BigNumber): Promise<BigNumber> {\n        const dat = this.getDatContract();\n        return bnum(\n            await dat.methods\n                .estimateSellValue(quantityToSell.toString())\n                .call()\n        );\n    }\n\n    async fetchBuyEvents(numToGet: number, fromBlock: number, toBlock: number = 0): Promise<TradeEvent[]> {\n        const dat = this.getDatContract();\n        let buyEvents = await dat.getPastEvents('Buy', {\n            fromBlock: fromBlock,\n            toBlock: toBlock === 0 ? 'latest' : toBlock\n        });\n\n        buyEvents.reverse();\n        buyEvents = buyEvents.slice(0, numToGet);\n\n        return Promise.all(\n            buyEvents.map((buyEvent) => {\n                if (this.isBuyEventValid(buyEvent)) {\n                    return this.parseBuyEvent(buyEvent);\n                } else {\n                  return null;\n                }\n            })\n        );\n    }\n\n    async fetchSellEvents(numToGet: number, fromBlock: number, toBlock: number = 0): Promise<TradeEvent[]> {\n        const dat = this.getDatContract();\n        let sellEvents = await dat.getPastEvents('Sell', {\n            fromBlock: fromBlock,\n            toBlock: toBlock === 0 ? 'latest' : toBlock\n        });\n\n        sellEvents.reverse();\n        sellEvents = sellEvents.slice(0, numToGet);\n\n        return Promise.all(\n            sellEvents.map((sellEvent) => {\n                if (this.isSellEventValid(sellEvent)) {\n                    return this.parseSellEvent(sellEvent);\n                } else {\n                  return null;\n                }\n            })\n        );\n    }\n\n    async parseBuyEvent(buyEvent) {\n        const amount = bnum(buyEvent.returnValues._fairValue);\n        const totalPrice = bnum(buyEvent.returnValues._currencyValue);\n\n        const blockTime = await this.rootStore.providerStore.getBlockTime(\n            buyEvent.blockNumber\n        );\n\n        const chainId = this.rootStore.providerStore.getActiveWeb3React().chainId;\n\n      const event: BuyEvent = {\n            price: totalPrice.div(amount),\n            amount: amount,\n            totalPaid: totalPrice,\n            blockNumber: buyEvent.blockNumber,\n            blockTime: blockTime,\n            type: EventType.Buy,\n            hash: getEtherscanLink(chainId, buyEvent.transactionHash, 'transaction' ),\n        };\n\n        return event;\n    }\n\n    // format sell event\n    async parseSellEvent(sellEvent) {\n        const amount = bnum(sellEvent.returnValues._fairValue);\n        const totalReceived = bnum(sellEvent.returnValues._currencyValue);\n\n        const blockTime = await this.rootStore.providerStore.getBlockTime(\n            sellEvent.blockNumber\n        );\n        \n        const chainId = this.rootStore.providerStore.getActiveWeb3React().chainId;\n\n        const event: SellEvent = {\n            price: totalReceived.div(amount),\n            amount: amount,\n            totalReceived: totalReceived,\n            blockNumber: sellEvent.blockNumber,\n            blockTime: blockTime,\n            type: EventType.Sell,\n            hash: getEtherscanLink(chainId, sellEvent.transactionHash, 'transaction' ),\n        };\n\n        return event;\n    }\n\n    isBuyEventValid(buyEvent) {\n        return (\n            !!buyEvent.returnValues &&\n            buyEvent.returnValues._fairValue &&\n            !!buyEvent.returnValues._currencyValue\n        );\n    }\n\n    isSellEventValid(sellEvent) {\n        return (\n            !!sellEvent.returnValues &&\n            sellEvent.returnValues._fairValue &&\n            !!sellEvent.returnValues._currencyValue\n        );\n    }\n    \n    getSellPriceAtSupplyWithReserve(tokenSupply: BigNumber, reserveBalance: BigNumber) {\n        const initGoal = this.getInitGoal(),\n        burnedSupply = this.getBurnedSupply(),\n        preMintedTokens  = this.getPreMintedTokens();\n\n        if (initGoal.gt(0) && tokenSupply.lte(initGoal)) {\n            return this.getKickstarterPrice();\n        }\n        return reserveBalance.times(2).div(tokenSupply.plus(preMintedTokens).minus(burnedSupply));\n    }\n    \n    getSellPriceAtSupply(tokenSupply: BigNumber) {\n        const reserveBalance = this.getReserveBalance();\n        return this.getSellPriceAtSupplyWithReserve(tokenSupply, reserveBalance);\n    }\n    \n    getSellPrice() {\n        const { tokenStore, configStore } = this.rootStore;\n        const totalSupply = tokenStore.getTotalSupply(configStore.getTokenAddress());\n        const preMintedTokens  = this.getPreMintedTokens();\n        return this.getSellPriceAtSupply(totalSupply.minus(preMintedTokens));\n    }\n    \n    getBuyPriceAtSupply(supply: BigNumber) {\n        const initGoal = this.getInitGoal(),\n        buySlopeNum = this.getBuySlopeNum(),\n        buySlopeDen  = this.getBuySlopeDen();\n\n        if (initGoal.gt(0) && supply.lte(initGoal)) {\n            return initGoal.div(2).times(buySlopeNum).div(buySlopeDen);\n        }\n\n        return supply.times(buySlopeNum).div(buySlopeDen);\n    }\n    \n    getBuyPrice() {\n        const { tokenStore, configStore } = this.rootStore;\n        const totalSupply = tokenStore.getTotalSupply(configStore.getTokenAddress());\n        const preMintedTokens  = this.getPreMintedTokens();\n        const burnedSupply  = this.getBurnedSupply();\n        return this.getBuyPriceAtSupply(totalSupply.minus(preMintedTokens).plus(burnedSupply));\n    }\n\n    fetchBuyReturn(totalPaid: BigNumber): BuyReturnCached { const blockNumber = this.rootStore.providerStore.getCurrentBlockNumber();\n        \n        const { tokenStore, configStore } = this.rootStore;\n        const initGoal = this.getInitGoal();\n        const buySlopeDen = this.getBuySlopeDen();\n        const buySlopeNum = this.getBuySlopeNum();\n        const totalSupply = tokenStore.getTotalSupply(configStore.getTokenAddress());\n        const preMintedTokens  = this.getPreMintedTokens();\n        const burnedSupply = this.getBurnedSupply();\n        const tokensSold = totalSupply.minus(preMintedTokens).plus(burnedSupply);\n        let tokensIssued = bnum(0), pricePerToken = bnum(0);\n        if (this.getState() === 0) {\n          pricePerToken = this.getKickstarterPrice();\n          tokensIssued = totalPaid.div(pricePerToken);\n          \n          const tokensLeftInKickstarter = initGoal.minus(totalSupply.minus(preMintedTokens))\n          if (tokensIssued.gt(tokensLeftInKickstarter)) {\n            tokensIssued = tokensLeftInKickstarter;\n            const valueAfterKickstarterEnds = totalPaid\n              .minus(tokensLeftInKickstarter.times(this.getKickstarterPrice()));\n\n            const tokensAfterKickstarterEnds = valueAfterKickstarterEnds.times(2).times(buySlopeDen).div(buySlopeNum)\n              .plus(initGoal.times(initGoal))\n              .sqrt()\n              .minus(initGoal);\n              \n            tokensIssued = tokensIssued.plus(tokensAfterKickstarterEnds);\n          }\n        } else {\n          tokensIssued = totalPaid.times(2).times(buySlopeDen).div(buySlopeNum)\n            .plus(tokensSold.times(tokensSold))\n            .sqrt()\n            .minus(tokensSold);\n        }\n        pricePerToken = totalPaid.div(tokensIssued);\n        \n        // What was used to get the on chain values\n        // const tokensIssued = await this.estimateBuyValue(totalPaid);\n        // const pricePerToken = totalPaid.div(tokensIssued);\n\n        return {\n            value: {\n                totalPaid,\n                tokensIssued,\n                pricePerToken,\n            },\n            blockNumber,\n        };\n    }\n\n    fetchSellReturn(tokensToSell: BigNumber): SellReturnCached {\n\n      const { tokenStore, configStore } = this.rootStore;\n      const totalSupply = tokenStore.getTotalSupply(configStore.getTokenAddress());\n      const preMintedTokens  = this.getPreMintedTokens();\n      const reserve  = this.getReserveBalance();\n      const burnedSupply = this.getBurnedSupply();\n      let currencyReturned = bnum(0), returnPerToken = bnum(0);\n\n      if(this.getState() === 1) {\n        const supply = totalSupply.plus(burnedSupply);\n\n        currencyReturned = tokensToSell.times(reserve).times(burnedSupply.times(burnedSupply))\n          .div(totalSupply.times(supply.times(supply)));\n      \n        currencyReturned = currencyReturned.plus(\n          tokensToSell.times(2).times(reserve).div(supply)\n        );\n\n        currencyReturned = currencyReturned.minus(\n          tokensToSell.times(tokensToSell).times(reserve)\n          .div(supply.times(supply))\n        );\n        \n      } else if(this.getState() === 2) {\n        currencyReturned = tokensToSell.times(reserve).div(totalSupply)\n      } else {\n        currencyReturned = tokensToSell.times(reserve).div(totalSupply.minus(preMintedTokens))\n      }\n      \n        const blockNumber = this.rootStore.providerStore.getCurrentBlockNumber();\n        returnPerToken = currencyReturned.div(tokensToSell);\n\n        // Uncomment thsi to get value on chain\n        // currencyReturned = await this.estimateSellValue(tokensToSell);\n        return {\n            value: {\n                tokensSold: tokensToSell,\n                currencyReturned,\n                returnPerToken,\n            },\n            blockNumber,\n        };\n    }\n\n    async fetchSpotPrice(): Promise<BigNumber> {\n        const minInvestment = this.getMinInvestment();\n        const spotTokens = await this.estimateBuyValue(minInvestment);\n        const price = minInvestment.div(spotTokens);\n        return price;\n    }\n\n    // getRecentTrades(numberOfTrades)\n    async fetchRecentTrades(numToGet: number): Promise<TradeEvent[]> { const { library } = this.rootStore.providerStore.getActiveWeb3React();\n        let latestBlock = await library.eth.getBlockNumber();\n        let startBlock = (this.rootStore.configStore.getDATinfo()).fromBlock;\n        let tradesToReturn = [];\n        \n        const self = this;\n        async function getEventsBetweenBlocks(fromBlock, toBlock) {\n          const buyEvents = await self.fetchBuyEvents(numToGet, fromBlock, toBlock);\n          const sellEvents = await self.fetchSellEvents(numToGet, fromBlock, toBlock);\n          let combinedTrades: any[] = buyEvents.concat(sellEvents);\n        \n          tradesToReturn = tradesToReturn.concat(combinedTrades);\n\n          // console.debug('Getting events between blocks', fromBlock, toBlock, tradesToReturn.length);\n\n          if (tradesToReturn.length < numToGet && toBlock > fromBlock)\n            await getEventsBetweenBlocks(\n              fromBlock - BLOCKS_PER_TRADES_FETCH > startBlock\n                ? fromBlock - BLOCKS_PER_TRADES_FETCH\n                : startBlock,\n              fromBlock\n            );\n        }\n        \n        await getEventsBetweenBlocks(\n          latestBlock - BLOCKS_PER_TRADES_FETCH > startBlock\n            ? latestBlock - BLOCKS_PER_TRADES_FETCH\n            : startBlock,\n          latestBlock\n        );\n        \n        if (tradesToReturn.length >= numToGet) \n          tradesToReturn.slice(0, numToGet);\n        \n        tradesToReturn = tradesToReturn.sort(function (a, b) {\n          return b.blockNumber - a.blockNumber;\n        });\n        \n        return tradesToReturn;\n    }\n\n    // TODO: Return status on failure\n    @action buy(\n        to: string,\n        currencyValue: BigNumber,\n        minTokensBought: BigNumber\n    ): PromiEvent<any> {\n        const { providerStore, configStore } = this.rootStore;\n\n        return providerStore.sendTransaction(\n            providerStore.getActiveWeb3React(),\n            ContractType.DecentralizedAutonomousTrust,\n            configStore.getTokenAddress(),\n            'buy',\n            [to, currencyValue.toString(), minTokensBought.toString()],\n            { value: currencyValue.toString() }\n        );\n    }\n\n    //TODO: Return status on failure\n    @action sell(to: string, quantityToSell: BigNumber, minCurrencyReturned: BigNumber) {\n        const { providerStore, configStore } = this.rootStore;\n\n        return providerStore.sendTransaction(\n            providerStore.getActiveWeb3React(),\n            ContractType.DecentralizedAutonomousTrust,\n            configStore.getTokenAddress(),\n            'sell',\n            [to, quantityToSell.toString(), minCurrencyReturned.toString()]\n        );\n    }\n}\n","const KOVAN_CONTRACTS = require('./kovan.json');\nconst RINKEBY_CONTRACTS = require('./rinkeby.json');\nconst MAINNET_CONTRACTS = require('./mainnet.json');\nconst DEVELOPMENT_CONFIG = require('./development.json');\n\nexport const getConfig = function(network) {\n  if (network === 'development') {\n    return DEVELOPMENT_CONFIG;\n  } else if (network === 'mainnet') {\n    return MAINNET_CONTRACTS;\n  } else if (network === 'kovan') {\n    return KOVAN_CONTRACTS;\n  } else if (network === 'rinkeby') {\n    return RINKEBY_CONTRACTS;\n  } else {\n    return {};\n  }\n}\n","import RootStore from 'stores/Root';\nimport { getConfig } from '../config/contracts';\nimport { CHAIN_NAME_BY_ID, DEFAULT_ETH_CHAIN_ID } from '../provider/connectors';\n\nexport default class ConfigStore {\n    rootStore: RootStore;\n    multicall: string;\n    activeDatAddress: string;\n    network: string;\n\n    constructor(rootStore) {\n      this.rootStore = rootStore;\n    }\n    \n    getActiveChainName() {\n      const activeWeb3 = this.rootStore.providerStore.getActiveWeb3React();\n      return CHAIN_NAME_BY_ID[(activeWeb3 && activeWeb3.chainId) ? activeWeb3.chainId : DEFAULT_ETH_CHAIN_ID];\n    }\n    \n    getNetworkConfig() {\n      return getConfig(this.getActiveChainName());\n    }\n    \n    getTokenAddress() {\n      return getConfig(this.getActiveChainName()).DAT;\n    }\n\n    getMulticallAddress() {\n      return getConfig(this.getActiveChainName()).multicall;\n    }\n    \n    getDATinfo() {\n      return getConfig(this.getActiveChainName()).DATinfo;\n    }\n    \n    getDATOwner() {\n      const datInfo = getConfig(this.getActiveChainName()).DATinfo;\n      return datInfo.control;\n    }\n}\n","import { Interface } from 'ethers/utils';\nimport RootStore from '../../stores/Root';\nimport { ContractType } from '../../stores/Provider';\n\nexport interface Call {\n    contractType: string;\n    address: string;\n    method: string;\n    params?: any[];\n}\n\n// contractType-address-function(a,b)-[params]\n\nexport default class MulticallService {\n    root: RootStore;\n\n    activeCalls: Call[];\n    activeCallsRaw: any[];\n\n    constructor(root: RootStore) {\n        this.root = root;\n        this.resetActiveCalls();\n    }\n\n    // Add call additions and removals\n    async executeCalls(calls: Call[], rawCalls: any[]) {\n        const { providerStore, configStore } = this.root;\n        const multi = providerStore.getContract(\n            providerStore.getActiveWeb3React(),\n            ContractType.Multicall,\n            configStore.getMulticallAddress()\n        );\n\n        const response = await multi.methods\n            .aggregate(rawCalls)\n            .call();\n        return {\n            calls: calls,\n            results: response.returnData,\n            blockNumber: response.blockNumber,\n        };\n    }\n\n    addCalls(calls: Call[]) {\n        calls.forEach(call => this.addCall(call));\n    }\n\n    addCall(call: Call) {\n            this.addContractCall(call);\n    }\n\n    private addContractCall(call: Call) {\n        const { abiService } = this.root;\n        const iface = new Interface(abiService.getAbi(call.contractType));\n\n        call.params = call.params ? call.params : [];\n\n        const encoded = iface.functions[call.method].encode(call.params);\n        this.activeCallsRaw.push([call.address, encoded]);\n        this.activeCalls.push(call);\n    }\n\n    decodeCall(call: Call, result: any) {\n        const { abiService } = this.root;\n        const iface = new Interface(abiService.getAbi(call.contractType));\n        return iface.functions[call.method].decode(result);\n    }\n\n    resetActiveCalls() {\n        this.activeCalls = [] as Call[];\n        this.activeCallsRaw = [] as any[];\n    }\n}\n","import RootStore from 'stores/Root';\nimport { Call } from '../services/multicall/MulticallService';\nimport { action, observable } from 'mobx';\n\nexport interface StoreEntry {\n    contractType: string;\n    address: string;\n    method: string;\n    params?: any[];\n}\n\nexport interface Entry {\n    contractType: string;\n    address: string;\n    method: string;\n    params: any[];\n    value: any;\n    lastFetched: number;\n}\n\nexport default class BlockchainStore {\n    @observable store: object;\n    rootStore: RootStore;\n\n    constructor(rootStore) {\n        this.rootStore = rootStore;\n        this.store = {};\n    }\n\n    reduceMulticall(calls: Call[], results: any, blockNumber: number): Entry[] {\n        const { multicallService } = this.rootStore;\n        return calls.map((call, index) => {\n            const value = multicallService.decodeCall(call, results[index]);\n            return {\n                contractType: call.contractType,\n                address: call.address,\n                method: call.method,\n                params: call.params,\n                value: value,\n                lastFetched: blockNumber,\n            };\n        });\n    }\n\n    has(entry: StoreEntry): boolean {\n        const params = entry.params ? entry.params : [];\n\n        return (\n            !!this.store[entry.contractType] &&\n            !!this.store[entry.contractType][entry.address] &&\n            !!this.store[entry.contractType][entry.address][entry.method] &&\n            !!this.store[entry.contractType][entry.address][entry.method][\n                params.toString()\n            ]\n        );\n    }\n\n    getCachedValue(entry: StoreEntry) {\n        if (this.has(entry)) {\n            return this.get(entry).value;\n        } else {\n            return undefined;\n        }\n    }\n\n    get(entry: StoreEntry): Entry | undefined {\n        if (this.has(entry)) {\n\n            const params = entry.params ? entry.params : [];\n            return this.store[entry.contractType][entry.address][entry.method][\n                params.toString()\n            ];\n        } else {\n            return undefined;\n        }\n    }\n\n    @action updateStore(entries: Entry[], blockNumber: number) {\n        entries.forEach((entry) => {\n            const params = entry.params ? entry.params : [];\n            if (!this.store[entry.contractType]) {\n                this.store[entry.contractType] = {};\n            }\n\n            if (!this.store[entry.contractType][entry.address]) {\n                this.store[entry.contractType][entry.address] = {};\n            }\n\n            if (!this.store[entry.contractType][entry.address][entry.method]) {\n                this.store[entry.contractType][entry.address][entry.method] = {};\n            }\n\n            if (\n                !this.store[entry.contractType][entry.address][entry.method][\n                    params.toString()\n                ]\n            ) {\n                this.store[entry.contractType][entry.address][entry.method][\n                    params.toString()\n                ] = {};\n            }\n\n            const oldEntry = this.store[entry.contractType][entry.address][entry.method][\n                params.toString()\n                ];\n\n            // Set if never fetched, or if the new data isn't stale\n            if (!oldEntry.lastFetched || (oldEntry.lastFetched && oldEntry.lastFetched <= blockNumber)) {\n                this.store[entry.contractType][entry.address][entry.method][\n                    params.toString()\n                    ] = {\n                    value: entry.value,\n                    lastFetched: entry.lastFetched,\n                };\n            }\n        });\n    }\n}\n","// Stores\nimport ProviderStore from 'stores/Provider';\nimport BlockchainFetchStore from 'stores/BlockchainFetch';\nimport TokenStore from 'stores/Token';\nimport TransactionStore from './Transaction';\nimport AppSettingsStore from './AppSettings';\nimport ModalStore from './Modal';\nimport TradingFormStore from './TradingForm';\nimport DatStore from './datStore';\nimport ConfigStore from './config';\nimport ABIService from '../services/ABIService';\nimport MulticallService from '../services/multicall/MulticallService';\nimport BlockchainStore from './BlockchainStore';\n\nexport default class RootStore {\n    providerStore: ProviderStore;\n    blockchainFetchStore: BlockchainFetchStore;\n    tokenStore: TokenStore;\n    transactionStore: TransactionStore;\n    appSettingsStore: AppSettingsStore;\n    modalStore: ModalStore;\n    tradingStore: TradingFormStore;\n    datStore: DatStore;\n    configStore: ConfigStore;\n    blockchainStore: BlockchainStore;\n\n    abiService: ABIService;\n    multicallService: MulticallService;\n\n    constructor() {\n        this.abiService = new ABIService();\n        this.multicallService = new MulticallService(this);\n        this.blockchainStore = new BlockchainStore(this);\n\n        this.providerStore = new ProviderStore(this);\n        this.blockchainFetchStore = new BlockchainFetchStore(this);\n        this.tokenStore = new TokenStore(this);\n        this.transactionStore = new TransactionStore(this);\n        this.appSettingsStore = new AppSettingsStore(this);\n        this.modalStore = new ModalStore(this);\n        this.tradingStore = new TradingFormStore(this);\n        this.datStore = new DatStore(this);\n        this.configStore = new ConfigStore(this);\n\n\n        this.asyncSetup().catch((e) => {\n            //TODO: Add retry on these fetches\n            throw new Error('Async Setup Failed ' + e);\n        });\n    }\n\n    async asyncSetup() {\n        // One time async operations on load\n    }\n}\n","// src/contexts/index.tsx\nimport React from 'react';\nimport RootStore from 'stores/Root';\n\nexport const storesContext = React.createContext({\n    root: new RootStore(),\n});\n\nexport const useStores = () => React.useContext(storesContext);\n","import { useCallback, useEffect, useRef, useState } from 'react';\nimport copy from 'copy-to-clipboard';\n\nexport function useInterval(callback, delay) {\n    const savedCallback = useRef();\n\n    // Remember the latest function.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n        function tick() {\n            savedCallback.current();\n        }\n        if (delay !== null) {\n            let id = setInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n    }, [delay]);\n}\n\nexport function useCopyClipboard(timeout = 500) {\n    const [isCopied, setIsCopied] = useState(false);\n\n    const staticCopy = useCallback((text) => {\n        const didCopy = copy(text);\n        setIsCopied(didCopy);\n    }, []);\n\n    useEffect(() => {\n        if (isCopied) {\n            const hide = setTimeout(() => {\n                setIsCopied(false);\n            }, timeout);\n\n            return () => {\n                clearTimeout(hide);\n            };\n        }\n    }, [isCopied, setIsCopied, timeout]);\n\n    return [isCopied, staticCopy];\n}\n\n// modified from https://usehooks.com/usePrevious/\nexport function usePrevious(value) {\n    // The ref object is a generic container whose current property is mutable ...\n    // ... and can hold any value, similar to an instance property on a class\n    const ref = useRef();\n\n    // Store current value in ref\n    useEffect(() => {\n        ref.current = value;\n    }, [value]); // Only re-run if value changes\n\n    // Return previous value (happens before update in useEffect above)\n    return ref.current;\n}\n","import React, { useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport styled from 'styled-components';\nimport { web3ContextNames } from 'provider/connectors';\nimport { useEagerConnect, useInactiveListener } from 'provider/providerHooks';\nimport { useStores } from 'contexts/storesContext';\nimport { useInterval } from 'utils/helperHooks';\n\nconst BLOKCHAIN_FETCH_INTERVAL = 3000;\n\nconst Web3ReactManager = ({ children }) => {\n    const {\n        root: { providerStore, blockchainFetchStore },\n    } = useStores();\n\n    const web3ContextInjected = useWeb3React(web3ContextNames.injected);\n    const {\n        active: networkActive,\n        error: networkError\n    } = web3ContextInjected;\n\n    providerStore.setWeb3Context(web3ContextNames.injected, web3ContextInjected);\n\n    const web3React = providerStore.getActiveWeb3React();\n\n    console.debug('[Web3ReactManager] Start of render', {\n        injected: web3ContextInjected,\n        web3React: web3React,\n    });\n\n    // try to eagerly connect to an injected provider, if it exists and has granted access already\n    const triedEager = useEagerConnect();\n\n    // when there's no account connected, react to logins (broadly speaking) on the injected provider, if it exists\n    useInactiveListener(!triedEager);\n\n    // Fetch user blockchain data on an interval using current params\n    blockchainFetchStore.setFetchLoop(web3React, true)\n    useInterval(\n        () => blockchainFetchStore.setFetchLoop(web3React, false),\n        BLOKCHAIN_FETCH_INTERVAL\n    );\n    // Fetch when account or web3Provider changes\n    useEffect(() => {\n        if (\n            web3React.account &&\n            web3React.account !== providerStore.activeAccount\n        ) {\n            console.debug('[Fetch Loop] - Extra fetch on account switch', {\n                account: web3React.account,\n                prevAccount: providerStore.activeAccount,\n            });\n            blockchainFetchStore.setFetchLoop(web3React, true);\n        }\n    }, [web3React, providerStore.activeAccount, blockchainFetchStore]);\n\n    const BlurWrapper = styled.div`\n        filter: blur(1px);\n    `;\n\n    const OverBlurModal = styled.div`\n      position: fixed;\n      z-index: 1;\n      left: 0;\n      top: 0;\n      width: 100%;\n      height: 100%;\n      overflow: auto;\n      background-color: rgb(0,0,0);\n      background-color: rgba(0,0,0,0.4);\n      \n      .connectModalContent {\n        background-color: #fefefe;\n        max-width: 350px;\n        text-align: center;\n        margin: 15% auto;\n        padding: 20px;\n        border-radius: 4px;\n      }\n    `;\n\n    // on page load, do nothing until we've tried to connect to the injected connector\n    if (!triedEager) {\n        console.debug('[Web3ReactManager] Render: Eager load not tried');\n        return null;\n    }\n\n    if (networkError) {\n      console.debug('[Web3ReactManager] Render: Network error, showing modal error.');\n      return (\n        <div>\n          <OverBlurModal>\n            <div className=\"connectModalContent\">Ups, something broke :(</div>\n            </OverBlurModal>\n            <BlurWrapper>\n              {children}\n            </BlurWrapper>\n          </div>\n        );\n    // If network is not active show blur content\n  } else if(!networkActive) {\n        console.debug('[Web3ReactManager] Render: No active network');\n        return children;\n    } else {\n      console.debug( '[Web3ReactManager] Render: Active network, render children', { networkActive } );\n      return children;\n    }\n\n};\n\nexport default Web3ReactManager;\n","import { BigNumber } from './bignumber';\nimport { bnum } from './helpers';\n\nexport function formatFee(fee: BigNumber) {\n    return fee.times(100).toString() + '%';\n}\n\nexport function formatPercentage(\n    value: BigNumber,\n    decimals: number,\n    useLowerLimit = true\n): string {\n    if (value.lte(0.01) && value.gt(0) && useLowerLimit) {\n        return '<0.01%';\n    }\n\n    return `${value.times(100).toFormat(decimals, BigNumber.ROUND_DOWN)}%`;\n}\n\nexport function fromPercentage(value: BigNumber | string): BigNumber {\n    const bn = bnum(value.toString());\n    return bn.div(100);\n}\n\nexport function toPercentage(value: BigNumber | string): BigNumber {\n    const bn = bnum(value.toString());\n    return bn.times(100);\n}\n\nexport const normalizePriceValues = (\n    inputValue: BigNumber,\n    outputValue: BigNumber\n): {\n    normalizedInput: BigNumber;\n    normalizedOutput: BigNumber;\n} => {\n    const multiplier = bnum(1).div(inputValue);\n    return {\n        normalizedInput: bnum(1),\n        normalizedOutput: outputValue.times(multiplier),\n    };\n};\n\nexport const formatCurrency = (balance: BigNumber): string => {\n    const fmt = {\n        decimalSeparator: '.',\n        groupSeparator: ',',\n        groupSize: 3,\n        secondaryGroupSize: 2,\n    };\n    return balance.toFormat(2, BigNumber.ROUND_DOWN, fmt);\n};\n\nexport const numDigits = (value: BigNumber): number => {\n    return value.toString().length;\n};\n\nexport const roundUpToScale = (\n    value: BigNumber\n): BigNumber => {\n    const placesValue = numDigits(value.integerValue())-1;\n    const scaledValue = value\n        .shiftedBy(-placesValue);\n    return scaledValue.integerValue(BigNumber.ROUND_UP).shiftedBy(placesValue);\n};\n","export var pointTooltips = function (tooltip) {\n    // Tooltip Element\n    var tooltipEl = document.getElementById('chartjs-tooltip');\n\n    if (!tooltipEl) {\n        tooltipEl = document.createElement('div');\n        tooltipEl.id = 'chartjs-tooltip';\n        tooltipEl.innerHTML = '<table></table>';\n        this._chart.canvas.parentNode.appendChild(tooltipEl);\n    }\n\n    // Hide if no tooltip\n    if (tooltip.opacity === 0) {\n        tooltipEl.style.opacity = 0;\n        return;\n    }\n\n    // Set caret Position\n    tooltipEl.classList.remove('above', 'below', 'no-transform');\n    if (tooltip.yAlign) {\n        tooltipEl.classList.add(tooltip.yAlign);\n    } else {\n        tooltipEl.classList.add('no-transform');\n    }\n\n    function getBody(bodyItem) {\n        return bodyItem.lines;\n    }\n\n    // Set Text\n    if (tooltip.body) {\n        var bodyLines = tooltip.body.map(getBody);\n\n        // If there is no content do not display\n        if (bodyLines.length === 0) {\n            tooltipEl.style.opacity = 0;\n            return;        \n        }\n\n        var innerHtml = '<thead>';\n\n        innerHtml += '</thead><tbody>';\n\n        bodyLines.forEach(function (body, i) {\n            var colors = tooltip.labelColors[i];\n            var style = 'background:' + colors.backgroundColor;\n            style += '; border-color:' + colors.borderColor;\n            style += '; border-width: 2px';\n            var span =\n                '<span class=\"chartjs-tooltip-key\" style=\"' +\n                style +\n                '\"></span>';\n            innerHtml += span + body ;\n        });\n        innerHtml += '</tbody>';\n\n        var tableRoot = tooltipEl.querySelector('table');\n        tableRoot.innerHTML = innerHtml;\n    }\n\n    var positionY = this._chart.canvas.offsetTop;\n    var positionX = this._chart.canvas.offsetLeft;\n\n    // Display, position, and set styles for font\n    tooltipEl.style.opacity = 1;\n    tooltipEl.style.position = 'absolute';\n    tooltipEl.style.left = positionX + tooltip.caretX + 'px';\n    tooltipEl.style.top = positionY + tooltip.caretY + 'px';\n    tooltipEl.style.fontFamily = tooltip._bodyFontFamily;\n    tooltipEl.style.fontSize = tooltip.bodyFontSize + 'px';\n    tooltipEl.style.fontStyle = 'var(--roboto)';\n    tooltipEl.style.fontWeight = '500';\n    tooltipEl.style.color = 'var(--dark-text-tooltip)';\n    tooltipEl.style.padding = '13px 13px';\n    tooltipEl.style.background = '#FFFFFF';\n    tooltipEl.style.border = '1px solid #E1E3E7';\n    tooltipEl.style.boxSizing = 'border-box';\n    tooltipEl.style.boxShadow = '0px 0px 2px rgba(0,0,0,0.12)';\n    tooltipEl.style.borderRadius = '4px';\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Line } from 'react-chartjs-2';\nimport { observer } from 'mobx-react';\nimport { useStores } from '../../contexts/storesContext';\nimport {\n    denormalizeBalance,\n    formatBalance,\n    formatNumberValue,\n    normalizeBalance,\n} from '../../utils/token';\nimport { BigNumber } from '../../utils/bignumber';\nimport { validateTokenValue, ValidationStatus } from '../../utils/validators';\nimport { bnum } from '../../utils/helpers';\nimport { roundUpToScale } from '../../utils/number';\nimport { pointTooltips } from './pointTooltips';\n\nconst ChartPanelWrapper = styled.div`\n    max-width: 610px;\n    width: calc(66%);\n    background-color: white;\n    border: 1px solid #EBE9F8;\n    box-sizing: border-box;\n    box-shadow: 0px 2px 10px rgba(14, 0, 135, 0.03), 0px 12px 32px rgba(14, 0, 135, 0.05);\n    border-radius: 8px;\n    display: flex;\n    justify-content: flex-start;\n    flex-direction: column;\n    margin-right:10px;\n    \n    .loader {\n      height: 100%;\n      padding-top: 150px;\n      text-align: center;\n      font-family: Roboto;\n      font-style: normal;\n      font-weight: 500;\n      font-size: 15px;\n      line-height: 18px;\n      color: #BDBDBD;\n      \n      img {\n        margin-bottom: 10px;\n      }\n    }\n    \n    ${({ theme }) => theme.mediaWidth.upToMedium`\n      width: calc(30%);\n    `};\n`;\n\nconst ChartHeaderWrapper = styled.div`\n    display: flex;\n    padding: 0px 15px;\n    flex-wrap: wrap;\n    height: 45px;\n    justify-content: space-around;\n    border-bottom: 1px solid var(--line-gray);\n    padding: 20px 0px;\n    ${({ theme }) => theme.mediaWidth.upToMedium`\n      flex-direction: column;\n      border-bottom: none;\n    `};\n`;\n\nconst ChartHeaderFullElement = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    width: calc((100% - 20) / 3);\n    color: var(--dark-text-gray);\n    ${({ theme }) => theme.mediaWidth.upToMedium`\n      text-align: center;\n      width: 100%;\n    `};\n`;\n\nconst ChartHeaderTopElement = styled.div`\n    font-size: 14px;\n    font-weight: 500;\n    color: var(--light-text-gray);\n`;\n\nconst ChartHeaderBottomElement = styled.div`\n    font-size: 16px;\n    margin-top: 10px;\n    font-weight: 500;\n    color: 1px solid var(--line-gray);\n`;\n\nconst PriceBottomElement = styled(ChartHeaderBottomElement)`\n    color: '1px solid var(--line-gray)';\n`\n\nconst ChartWrapper = styled.div`\n    height: 250px;\n    padding: 20px 20px 0px 20px;\n    ${({ theme }) => theme.mediaWidth.upToMedium`\n      display: none;\n    `};\n`;\n\ninterface ChartPointMap {\n    [index: string]: ChartPoint;\n}\n\nenum PointType {\n    ZERO,\n    KICKSTARTER_START,\n    KICKSTARTER_END,\n    CURRENT_BUY_PRICE,\n    CURRENT_SELL_PRICE,\n    FUTURE_SUPPLY,\n    CURVE_START,\n    MAX_BUY_SUPPLY_TO_SHOW,\n    MAX_SELL_SUPPLY_TO_SHOW\n}\n\ninterface ChartPoint {\n  x: number;\n  y: number;\n  type: PointType\n}\n\nconst chartBlue = '#304AFA';\nconst chartRed = '#D8494A';\nconst chartGray = '#9FA8DA';\nconst gridLineColor = '#EAECF7';\n\nconst BondingCurveChart = observer(() => {\n    const {\n        root: { tradingStore, tokenStore, configStore, datStore, providerStore },\n    } = useStores();\n\n    let initGoal: BigNumber,\n    preMintedTokens: BigNumber,\n    currentBuyPrice: BigNumber,\n    currentSellPrice: BigNumber,\n    kickstarterPrice: BigNumber,\n    totalSupplyWithoutPremint: BigNumber;\n    \n    const activeDATAddress = configStore.getTokenAddress();\n    const staticParamsLoaded = datStore.areAllStaticParamsLoaded();\n    const totalSupplyWithPremint = tokenStore.getTotalSupply(activeDATAddress);\n    const burnedSupply = tokenStore.getBurnedSupply(activeDATAddress);\n    const investmentReserveBasisPoints = datStore.getInvestmentReserveBasisPoints()\n\n    const currrentDatState = datStore.getState();\n    const reserveBalance: BigNumber = datStore.getReserveBalance();\n    const isBuy = tradingStore.activeTab === 'buy';\n    \n    const { active: providerActive } = providerStore.getActiveWeb3React();\n\n    const requiredDataLoaded =\n        staticParamsLoaded &&\n        !!totalSupplyWithPremint &&\n        currrentDatState !== undefined &&\n        !!reserveBalance;\n\n    if (requiredDataLoaded) {\n        initGoal = datStore.getInitGoal();\n        preMintedTokens = datStore.getPreMintedTokens();\n\n        if (initGoal && initGoal.gt(0)) {\n            kickstarterPrice = datStore.getBuyPriceAtSupply(initGoal.div(2));\n        }\n    \n        totalSupplyWithoutPremint = totalSupplyWithPremint.minus(preMintedTokens).plus(burnedSupply);\n        currentSellPrice = datStore.getSellPrice();\n        currentBuyPrice = datStore.getBuyPrice();\n    }\n\n    let chartData, chartOptions;\n\n    const generateLine = (chartData: ChartPoint[], color: string, label: string, dashed: boolean, bgColor?: string) => {\n        return {\n          label,\n          fill: !dashed,\n          data: chartData,\n          datalabels: {\n            display: false,\n          },\n          borderWidth: 2,\n          pointRadius: (context) => {\n            const point = context.dataset.data[context.dataIndex];\n\n            if ((point.type === PointType.CURRENT_BUY_PRICE) || (point.type === PointType.CURRENT_SELL_PRICE)) {\n              return 4;\n            } else {\n              return 2;\n            }\n          },\n          borderColor: () => {\n            return color;\n          },\n          backgroundColor: bgColor || \"transparent\",\n          borderDash: dashed ? [10, 10] : [],\n          lineTension: 0,\n        };\n    };\n\n    const generateSupplyMarker = (point: ChartPoint, label: string, color) => {\n        return {\n            label,\n            fill: false,\n            data: [point],\n            pointRadius: 7,\n            pointBackgroundColor: color,\n            borderWidth: 1,\n            pointBorderColor: color,\n            lineTension: 0,\n        };\n    };\n\n    const balanceToNumber = (balance: BigNumber) => {\n        return normalizeBalance(balance).toNumber();\n    };\n\n    const valueToNumber = (value: BigNumber) => {\n        return value.toNumber();\n    };\n\n    const generateChart = () => {\n      const datasets = [], hasInitGoal = initGoal.gt(0), hasExceededInitGoal = datStore.isRunPhase();\n      let supplyIncrease, futureSupply, futurePrice = bnum(0), hasActiveInput = false;\n      \n      let maxSupplyToShow = roundUpToScale(totalSupplyWithoutPremint.times(1.5));\n      \n      if (maxSupplyToShow.lt(initGoal.times(1.5))) {\n        maxSupplyToShow = totalSupplyWithoutPremint.plus(initGoal)\n        maxSupplyToShow = roundUpToScale(maxSupplyToShow);\n      }\n      \n      const maxBuyPriceToShow = datStore.getBuyPriceAtSupply(maxSupplyToShow);\n      const reserveBalanceAtMaxSellPriceToShow = maxSupplyToShow.minus(totalSupplyWithoutPremint)\n        .times(maxBuyPriceToShow)\n        .div(bnum(10000).div(investmentReserveBasisPoints))\n        .plus(reserveBalance);\n      const maxSellPriceToShow = datStore.getSellPriceAtSupplyWithReserve(\n        maxSupplyToShow, reserveBalanceAtMaxSellPriceToShow\n      );\n\n      let points: ChartPointMap = {\n        zero: {\n          x: 0,\n          y: 0,\n          type: PointType.ZERO\n        },\n        currentBuyPrice: {\n          x: balanceToNumber(totalSupplyWithoutPremint),\n          y: valueToNumber(currentBuyPrice),\n          type: PointType.CURRENT_BUY_PRICE\n        },\n        // currentSellPrice: {\n        //   x: balanceToNumber(totalSupplyWithoutPremint),\n        //   y: valueToNumber(currentSellPrice),\n        //   type: PointType.CURRENT_SELL_PRICE\n        // },\n      };\n\n      if (hasInitGoal) {\n        points.kickStarterStart = {\n          x: 0,\n          y: valueToNumber(kickstarterPrice),\n          type: PointType.KICKSTARTER_START\n        };\n\n        points.kickstarterEnd = {\n          x: balanceToNumber(initGoal),\n          y: valueToNumber(kickstarterPrice),\n          type: PointType.KICKSTARTER_END\n        };\n\n        points.curveStart = {\n          x: balanceToNumber(initGoal),\n          y: valueToNumber(kickstarterPrice.times(2)),\n          type: PointType.CURVE_START\n        };\n      }\n\n      points.maxBuySupplyToShow = {\n        x: balanceToNumber(maxSupplyToShow),\n        y: valueToNumber(maxBuyPriceToShow),\n        type: PointType.MAX_BUY_SUPPLY_TO_SHOW\n      };\n      \n      points.maxSellSupplyToShow = {\n        x: balanceToNumber(maxSupplyToShow),\n        y: valueToNumber(maxSellPriceToShow),\n        type: PointType.MAX_SELL_SUPPLY_TO_SHOW\n      };\n\n      if (\n        validateTokenValue(tradingStore.buyAmount) ===\n        ValidationStatus.VALID\n      ) {\n        supplyIncrease = tradingStore.payAmount;\n        futureSupply = totalSupplyWithoutPremint.plus(supplyIncrease);\n        futurePrice = datStore.getBuyPriceAtSupply(futureSupply);\n        points['futureSupply'] = {\n          x: balanceToNumber(futureSupply),\n          y: valueToNumber(futurePrice),\n          type: PointType.FUTURE_SUPPLY\n        };\n\n        hasActiveInput = true;\n\n        if (futureSupply.gte(maxSupplyToShow)) {\n          const newMaxSupplyToShow = denormalizeBalance(\n            roundUpToScale(normalizeBalance(futureSupply.times(1.5)))\n          );\n          const newMaxPriceToShow = datStore.getBuyPriceAtSupply(\n            newMaxSupplyToShow\n          );\n\n          points.maxBuySupplyToShow = {\n            x: balanceToNumber(newMaxSupplyToShow),\n            y: valueToNumber(newMaxPriceToShow),\n            type: PointType.MAX_BUY_SUPPLY_TO_SHOW\n          };\n        }\n      }\n\n      // console.debug('chartParams', {\n      //   datParams: datStore.datParams[],\n      //   preMintedTokens: preMintedTokens.toString(),\n      //   initGoal: initGoal.toString(),\n      //   buySlopeNum: buySlopeNum.toString(),\n      //   buySlopeDen: buySlopeDen.toString(),\n      //   currentBuyPrice: totalSupplyWithoutPremint.toString(),\n      // \n      //   hasInitGoal,\n      //   hasExceededInitGoal,\n      //   points,\n      // });\n\n      if (hasInitGoal && !hasExceededInitGoal) {\n        datasets.push(\n          generateLine(\n            [ points.kickStarterStart, points.currentBuyPrice, points.kickstarterEnd ],\n            chartRed,\n            'Kickstarter Price',\n            false\n          )\n        );\n      }\n\n      if (hasExceededInitGoal) {\n        datasets.push(\n          generateLine(\n            [points.zero, points.currentBuyPrice],\n            chartBlue,\n            'Buy Price',\n            false,\n            \"#F2F1FE\"\n          )\n        );\n        \n        datasets.push(\n          generateLine(\n            [points.currentBuyPrice, points.maxBuySupplyToShow],\n            chartBlue,\n            'Future Buy Price',\n            true\n          )\n        );\n        \n        // datasets.push(\n        //   generateLine(\n        //     [points.zero, points.currentSellPrice],\n        //     chartRed,\n        //     'Sell Price',\n        //     false,\n        //     \"#F5E7E7\"\n        //   )\n        // );\n        \n        // datasets.push(\n        //   generateLine(\n        //     [points.currentSellPrice,  points.maxSellSupplyToShow],\n        //     chartRed,\n        //     'Future Sell Price',\n        //     true\n        //   )\n        // );\n        \n        \n      } else {\n        datasets.push(\n          generateLine(\n            [points.kickstarterEnd, points.curveStart],\n            chartGray,\n            'Kickstarter Ends',\n            false\n          )\n        );\n        \n        datasets.push(\n          generateLine(\n            [points.curveStart, points.maxBuySupplyToShow],\n            chartBlue,\n            'Buy Price',\n            true\n          )\n        );\n\n      }\n\n      if (hasActiveInput) {\n        datasets.push(\n          generateSupplyMarker(\n            points.futureSupply,\n            'Future Supply',\n            chartBlue\n          )\n        );\n      }\n\n      chartData = {\n        datasets,\n        backgroundColor: '#000000',\n      };\n\n      chartOptions = {\n        tooltips: {\n          enabled: false,\n          custom: pointTooltips,\n          filter: (tooltipItem) => {\n            return (tooltipItem.index === 1 || tooltipItem.index === 2);\n          },\n          callbacks: {\n            // tslint:disable-next-line: no-shadowed-variable\n            label: (tooltipItem, data) => {\n              let toDisplay = (tooltipItem.index === 1 ) ? data.datasets[tooltipItem.datasetIndex].label \n                : 'Future ' + data.datasets[tooltipItem.datasetIndex].label;\n              toDisplay += ': '+ tooltipItem.yLabel.toFixed(3) + ' ETH / DXD';\n              return toDisplay;\n            },\n          },\n        },\n        maintainAspectRatio: false,\n        legend: { display: false, },\n        scales: {\n          xAxes: [{\n            type: 'linear',\n            display: true,\n            gridLines: {\n              display: false,\n            },\n            scaleLabel: {\n              display: true,\n              labelString: 'DXD',\n            },\n            ticks: {\n              beginAtZero: true,\n              max: points.maxBuySupplyToShow.x,\n              major: {\n                fontStyle: 'bold',\n                fontColor: '#BDBDBD',\n              }\n            },\n          }],\n          yAxes: [{\n            display: true,\n            gridLines: {\n              display: true,\n              color: gridLineColor,\n            },\n            position: 'right',\n            ticks: {\n              beginAtZero: true,\n              suggestedMax: points.maxBuySupplyToShow.y,\n              callback: (value) => {\n                return (\n                  formatNumberValue(bnum(value), 3) + ' ETH'\n                );\n              },\n            },\n            scaleLabel: {\n              display: true,\n              labelString: '',\n            },\n          }],\n        },\n      };\n\n    };\n\n    if (requiredDataLoaded) {\n      generateChart();\n    }\n\n    /*\n        Draw a strait line for the inital goal. The PRICE for this is the slope for total supply 0\n        We may have to hardcode this value...\n\n        It's a slope but I DON\"T understand because it's 1 / 10^18!!!! And it seems to be about 1/3 of tokens.\n     */\n\n    const renderChartHeader = () => {\n      if (datStore.isInitPhase()) {\n        return renderInitPhaseChartHeader();\n      } else if (datStore.isRunPhase()) {\n        return renderRunPhaseChartHeader();\n      } else {\n        return <React.Fragment />;\n      }\n    };\n\n    const renderInitPhaseChartHeader = () => {\n      return (\n        <ChartHeaderWrapper>\n            <ChartHeaderFullElement>\n              <ChartHeaderTopElement>{isBuy ? 'Buy Price' : 'Sell Price'}</ChartHeaderTopElement>\n              <ChartHeaderBottomElement>\n                {requiredDataLoaded ? `${formatNumberValue(kickstarterPrice)} ETH` : '- ETH'}\n              </ChartHeaderBottomElement>\n            </ChartHeaderFullElement>\n            <ChartHeaderFullElement>\n              <ChartHeaderTopElement>Invested</ChartHeaderTopElement>\n              <ChartHeaderBottomElement className=\"green-text\">\n                {requiredDataLoaded ? `${formatBalance(totalSupplyWithoutPremint.times(kickstarterPrice), 18, 4, false)} ETH` : '- ETH'}\n              </ChartHeaderBottomElement>\n            </ChartHeaderFullElement>\n            <ChartHeaderFullElement>\n              <ChartHeaderTopElement>Goal</ChartHeaderTopElement>\n              <ChartHeaderBottomElement>\n                {requiredDataLoaded ? `${formatBalance( initGoal.times(kickstarterPrice) )} ETH` : '- ETH'}\n              </ChartHeaderBottomElement>\n            </ChartHeaderFullElement>\n            <ChartHeaderFullElement>\n              <ChartHeaderTopElement>\n                Curve Issuance\n              </ChartHeaderTopElement>\n              <ChartHeaderBottomElement>\n                {requiredDataLoaded ? `${formatBalance( totalSupplyWithoutPremint )} DXD` : '- DXD'}\n              </ChartHeaderBottomElement>\n            </ChartHeaderFullElement>\n        </ChartHeaderWrapper>\n      );\n    };\n\n    const renderRunPhaseChartHeader = () => {\n      return (\n        <ChartHeaderWrapper>\n            <ChartHeaderFullElement>\n              <ChartHeaderTopElement><span style={{color: \"#304AFA\"}}>|</span> Buy Price</ChartHeaderTopElement>\n                <PriceBottomElement isBuy={true} >\n                  {requiredDataLoaded ? `${formatNumberValue(currentBuyPrice)} ETH` : '- DXD/ETH' }\n                </PriceBottomElement>\n              </ChartHeaderFullElement>\n            <ChartHeaderFullElement>\n              <ChartHeaderTopElement><span style={{color: \"#D8494A\"}}>|</span> Sell Price</ChartHeaderTopElement>\n                <PriceBottomElement isBuy={false} >\n                  {requiredDataLoaded ? `${formatNumberValue(currentSellPrice)} ETH` : '- DXD/ETH' }\n                </PriceBottomElement>\n            </ChartHeaderFullElement>\n        </ChartHeaderWrapper>\n      );\n    };\n\n    if (requiredDataLoaded)\n      return (\n        <ChartPanelWrapper>\n          {renderChartHeader()}\n          <ChartWrapper>\n            {requiredDataLoaded ? (\n              <Line\n                data={chartData}\n                options={chartOptions}\n                // width={1000}\n                // height={250}\n              />\n            ) : (\n              <React.Fragment />\n            )}\n          </ChartWrapper>\n        </ChartPanelWrapper>\n      );\n    else if (!providerActive) {\n      return(\n        <ChartPanelWrapper>\n          <div className=\"loader\">\n          <img alt=\"bolt\" src={require(\"assets/images/bolt.svg\")} />\n            <br/> Connect to view Price Chart\n          </div>\n        </ChartPanelWrapper>\n      )\n    } else return(\n      <ChartPanelWrapper>\n        <div className=\"loader\">\n        <img alt=\"bolt\" src={require(\"assets/images/bolt.svg\")} />\n          <br/> Loading chart..\n        </div>\n      </ChartPanelWrapper>\n    )\n});\n\nexport default BondingCurveChart;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { observer } from 'mobx-react';\nimport { useStores } from '../contexts/storesContext';\nimport {\n    formatBalance,\n} from '../utils/token';\nimport { bnum } from '../utils/helpers';\n\nconst CurveInformationWrapper = styled.div`\n    width: 100%;\n    background-color: white;\n    border: 1px solid #EBE9F8;\n    box-sizing: border-box;\n    box-shadow: 0px 2px 10px rgba(14, 0, 135, 0.03), 0px 12px 32px rgba(14, 0, 135, 0.05);\n    border-radius: 8px;\n    padding: 23px, 35px, 23px, 35px;\n    margin-top: 24px;\n    display: flex;\n    justify-content: center;\n    flex-direction: column;\n    margin-right:10px;\n    \n    .loader {\n      margin: 15px 0px;\n      text-align: center;\n      font-family: Roboto;\n      font-style: normal;\n      font-weight: 500;\n      font-size: 15px;\n      line-height: 18px;\n      color: #BDBDBD;\n      \n      img {\n        margin-bottom: 10px;\n      }\n    }\n    \n    ${({ theme }) => theme.mediaWidth.upToMedium`\n      width: calc(30%);\n    `};\n`;\n\nconst CurveInformationHeaderWrapper = styled.div`\n    display: flex;\n    padding: 15px;\n    flex-grow: 4;\n    flex-wrap: wrap;\n    justify-content: space-between;\n    ${({ theme }) => theme.mediaWidth.upToMedium`\n      flex-direction: column;\n      border-bottom: none;\n    `};\n`;\n\nconst CurveInformationElement = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    width: calc((100% - 20) / 3);\n    color: var(--dark-text-gray);\n    padding: 10px 0px 10px 10px;\n    ${({ theme }) => theme.mediaWidth.upToMedium`\n      text-align: center;\n      width: 100%;\n      padding: 10px;\n    `};\n`;\n\nconst CurveInformationTopElement = styled.div`\n    font-size: 13px;\n    font-weight: 400;\n    color: var(--light-text-gray);\n`;\n\nconst CurveInformationBottomElement = styled.div`\n    font-size: 16px;\n    margin-top: 10px;\n    font-weight: 500;\n    color: 1px solid var(--line-gray);\n`;\n\nconst CurveInformation = observer(() => {\n    const {\n        root: { tokenStore, configStore, datStore, providerStore },\n    } = useStores();\n\n    let preMintedTokens;\n    let totalSupplyWithoutPremint;\n    \n    const buySlopeNum = datStore.getBuySlopeNum();\n    const buySlopeDen = datStore.getBuySlopeDen();\n    const daoFunds = datStore.getDaoFunds();\n    const activeDATAddress = configStore.getTokenAddress();\n    const staticParamsLoaded = datStore.areAllStaticParamsLoaded();\n    const totalSupplyWithPremint = tokenStore.getTotalSupply(activeDATAddress);\n    const burnedSupply = tokenStore.getBurnedSupply(activeDATAddress);\n    const investmentReserveBasisPoints = datStore.getInvestmentReserveBasisPoints()\n\n    const currrentDatState = datStore.getState();\n    const reserveBalance = datStore.getReserveBalance();\n    \n    const { active: providerActive, library } = providerStore.getActiveWeb3React();\n\n    const requiredDataLoaded =\n        staticParamsLoaded &&\n        !!totalSupplyWithPremint &&\n        currrentDatState !== undefined &&\n        !!reserveBalance;\n\n    if (requiredDataLoaded) {\n        preMintedTokens = datStore.getPreMintedTokens();\n        totalSupplyWithoutPremint = totalSupplyWithPremint.minus(preMintedTokens).plus(burnedSupply);\n    }\n\n    const renderCurveInformation = () => {\n      if (datStore.isRunPhase()) {\n        return (\n          <CurveInformationHeaderWrapper>\n            <CurveInformationElement>\n              <CurveInformationTopElement>Total Supply</CurveInformationTopElement>\n              <CurveInformationBottomElement>\n                {requiredDataLoaded ? `${formatBalance(totalSupplyWithPremint)} DXD` : '- DXD'}\n              </CurveInformationBottomElement>\n            </CurveInformationElement>\n          \n            <CurveInformationElement>\n              <CurveInformationTopElement>\n                Curve Issuance\n              </CurveInformationTopElement>\n              <CurveInformationBottomElement className=\"green-text\">\n                {requiredDataLoaded ? `${formatBalance( totalSupplyWithoutPremint )} DXD` : '- DXD'}\n              </CurveInformationBottomElement>\n            </CurveInformationElement>\n              \n            <CurveInformationElement>\n              <CurveInformationTopElement>Reserve</CurveInformationTopElement>\n              <CurveInformationBottomElement>\n                {requiredDataLoaded ? `${formatBalance(reserveBalance)} ETH` : '- ETH'}\n              </CurveInformationBottomElement>\n            </CurveInformationElement>\n\n            <CurveInformationElement>\n              <CurveInformationTopElement>Curve Slope</CurveInformationTopElement>\n              <CurveInformationBottomElement>\n                {requiredDataLoaded ? `${buySlopeNum}/${library.utils.fromWei(buySlopeDen.toString())}` : '-'}\n              </CurveInformationBottomElement>\n            </CurveInformationElement>\n            \n            <CurveInformationElement>\n              <CurveInformationTopElement>DXdao ETH Funds</CurveInformationTopElement>\n              <CurveInformationBottomElement>\n                {requiredDataLoaded ? `${formatBalance(daoFunds, 18, 0)} ETH` : '- ETH'}\n              </CurveInformationBottomElement>\n            </CurveInformationElement>\n            \n            <CurveInformationElement>\n              <CurveInformationTopElement>Investment % Commitment</CurveInformationTopElement>\n              <CurveInformationBottomElement>\n                {requiredDataLoaded ? `${bnum(10000).div(investmentReserveBasisPoints).toString()} %` : '- %'}\n              </CurveInformationBottomElement>\n            </CurveInformationElement>\n          </CurveInformationHeaderWrapper>\n        );\n      } else {\n        return <React.Fragment />;\n      }\n    };\n\n    if (requiredDataLoaded)\n      return (\n        <CurveInformationWrapper>\n          {renderCurveInformation()}\n        </CurveInformationWrapper>\n      );\n    else if (!providerActive) {\n      return(\n        <CurveInformationWrapper>\n          <div className=\"loader\">\n          <img alt=\"bolt\" src={require(\"assets/images/bolt.svg\")} />\n            <br/> Connect to view Curve Information\n          </div>\n        </CurveInformationWrapper>\n      )\n    } else return(\n      <CurveInformationWrapper>\n        <div className=\"loader\">\n        <img alt=\"bolt\" src={require(\"assets/images/bolt.svg\")} />\n          <br/> Loading curve information..\n        </div>\n      </CurveInformationWrapper>\n    )\n});\n\nexport default CurveInformation;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { observer } from 'mobx-react';\nimport { useStores } from '../contexts/storesContext';\nimport { EventType } from '../stores/datStore';\nimport { formatBalance, formatNumberValue } from '../utils/token';\n\nconst TradingHistoryWrapper = styled.div`\n    width: 100%;\n    background-color: white;\n    border: 1px solid #EBE9F8;\n    box-sizing: border-box;\n    box-shadow: 0px 2px 10px rgba(14, 0, 135, 0.03), 0px 12px 32px rgba(14, 0, 135, 0.05);\n    border-radius: 8px;\n    padding: 20px 0px;\n    margin-top: 24px;\n    font-weight: 400;\n    display: flex;\n    justify-content: center;\n    flex-direction: column;\n    \n    .loader {\n      text-align: center;\n      font-family: Roboto;\n      font-style: normal;\n      font-weight: 500;\n      font-size: 15px;\n      line-height: 18px;\n      color: #BDBDBD;\n      padding: 44px 0px;\n      \n      img {\n        margin-bottom: 10px;\n      }\n    }\n`;\n\nconst TradeHistoryTitle = styled.div`\n    padding: 20px 24px;\n    color: var(--dark-text-gray);\n    border-bottom: 1px solid var(--line-gray);\n    font-weight: 500;\n    font-size: 18px;\n    letter-spacing: 1px;\n`;\n\nconst TableHeadersWrapper = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    color: var(--light-text-gray);\n    padding: 20px 24px 8px;\n    font-size: 14px;\n    text-align: right;\n`;\n\nconst TableHeader = styled.div`\n    width: ${(props) => props.width || '23%'};\n`;\n\nconst TableRowsWrapper = styled.div`\n    overflow-y: scroll;\n    height: 260px;\n`;\n\nconst TableRow = styled.div`\n    font-size: 16px;\n    line-height: 18px;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    border-bottom: 1px solid var(--line-gray);\n    padding: 16px 24px;\n    color: var(--dark-text-gray);\n    text-align: right;\n`;\n\nconst TableCell = styled.div`\n    a {\n        text-decoration: none;\n        width: 100%;\n\n        &:hover{\n            color: var(--turquois-text-onHover);\n        }\n    }\n    color: ${(props) => props.color};\n    width: ${(props) => props.width || '23%'}\n    text-align: ${(props) => props.align};\n    font-weight: ${(props) => props.weight};\n`;\n\nconst TradingHistory = observer(() => {\n    const {\n        root: { tradingStore, configStore, providerStore },\n    } = useStores();\n\n    let recentTrades = [];\n    if (tradingStore.recentTradesSet) {\n        recentTrades = tradingStore.recentTrades;\n    }\n    \n    const providerActive = providerStore.getActiveWeb3React().active;\n\n    if (!providerActive) {\n      return (\n          <TradingHistoryWrapper>\n            <div className=\"loader\">\n            <img alt=\"bolt\" src={require('assets/images/bolt.svg')} />\n                <br/>\n                Connect to view Trade History\n            </div>\n          </TradingHistoryWrapper>\n      )\n    } else if (recentTrades.length === 0) {\n      return (\n          <TradingHistoryWrapper>\n            <div className=\"loader\">\n            <img alt=\"bolt\" src={require('assets/images/bolt.svg')} />\n                <br/>\n                Searching for last trades..\n            </div>\n          </TradingHistoryWrapper>\n      )\n    } else {\n      return (\n          <TradingHistoryWrapper>\n              <TradeHistoryTitle>Trade History</TradeHistoryTitle>\n              <TableHeadersWrapper>\n                  <TableHeader width=\"15.5%\" className=\"align-left\">\n                      Type\n                  </TableHeader>\n                  <TableHeader width=\"15.5%\">\n                      Price {configStore.getDATinfo().collateralType}\n                  </TableHeader>\n                  <TableHeader>Amount DXD</TableHeader>\n                  <TableHeader>\n                      Total {configStore.getDATinfo().collateralType}\n                  </TableHeader>\n                  <TableHeader className=\"align-right\">Time</TableHeader>\n              </TableHeadersWrapper>\n              <TableRowsWrapper>\n              {recentTrades.map((trade, i) =>\n                (trade && trade.type) ? (\n                  <TableRow key={\"tradeRow\"+i}>\n                      <TableCell\n                          width=\"15.5%\"\n                          color={\n                              trade.type === EventType.Buy\n                                  ? 'var(--blue-text)'\n                                  : 'var(--red-text)'\n                          }\n                          align=\"left\"\n                          weight='500'\n                      >\n                          {trade.type}\n                      </TableCell>\n                      <TableCell width=\"15.5%\">\n                          {formatNumberValue(trade.price)}\n                      </TableCell>\n                      <TableCell>{formatBalance(trade.amount)}</TableCell>\n                      <TableCell>\n                          {trade.totalPaid\n                              ? formatBalance(trade.totalPaid)\n                              : formatBalance(trade.totalReceived)}\n                      </TableCell>\n                      <TableCell>\n                          <a\n                              href={trade.hash}\n                              target=\"#\"\n                              className=\"turquois-text\"\n                          >\n                              {trade.blockTime}\n                          </a>\n                      </TableCell>\n                  </TableRow>)\n                : (<div/>)\n              )}\n              </TableRowsWrapper>\n          </TradingHistoryWrapper>\n      );\n    }\n});\n\nexport default TradingHistory;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Button = styled.div`\n    background-color: var(--blue-text);\n    border: 1px solid var(--active-button-border);\n    border-radius: 4px;\n    color: white;\n    height: 34px;\n    letter-spacing: 1px;\n    font-weight: 500;\n    line-height: 34px;\n    text-align: center;\n    text-transform: uppercase;\n    cursor: pointer;\n`;\nconst ActiveButton = ({ children, onClick }) => {\n    return <Button onClick={onClick}>{children}</Button>;\n};\n\nexport default ActiveButton;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Button = styled.div`\n    background-color: white;\n    border: 1px solid var(--pending-text-gray);\n    border-radius: 4px;\n    color: var(--pending-text-gray);\n    height: 34px;\n    line-height: 34px;\n    letter-spacing: 1px;\n    text-align: center;\n    text-transform: uppercase;\n    cursor: pointer;\n`;\nconst InactiveButton = ({ children }) => {\n    return <Button>{children}</Button>;\n};\n\nexport default InactiveButton;\n","import React, { useState } from 'react';\nimport { observer } from 'mobx-react';\nimport styled from 'styled-components';\nimport ActiveButton from '../common/ActiveButton';\nimport InactiveButton from '../common/InactiveButton';\nimport { useStores } from '../../contexts/storesContext';\nimport {\n    denormalizeBalance,\n    formatBalance,\n    normalizeBalance,\n} from '../../utils/token';\nimport { bnum, str } from '../../utils/helpers';\nimport { TXEvents } from '../../types';\nimport { TransactionState } from '../../stores/TradingForm';\nimport { validateTokenValue, ValidationStatus } from '../../utils/validators';\n\nconst FormWrapper = styled.div`\n    padding-top: 24px;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n    padding: 10px 10px;\n`;\n\nconst InfoRow = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    line-height: 20px;\n    color: var(--dark-text-gray);\n    margin-bottom: 12px;\n    font-size: 15px;\n`;\n\nconst FormInfoText = styled.div`\n    color: var(--light-text-gray);\n    font-size: 14px;\n`;\n\nconst FormContent = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-evenly;\n    color: rgba(48, 79, 254, 0.2);\n    border: 1px solid rgba(48, 79, 254, 0.2);\n    border-radius: 4px;\n    height: 34px;\n    line-height: 34px;\n    margin-top: 0px;\n    margin-bottom: ${(props) => props.error ? \"22px\" : \"12px\"};\n    font-weight: 600;\n    font-size: 15px;\n    padding: 0px 10px;\n    input,\n    input:focus {\n        border: none;\n        font-size: inherit;\n        outline: none;\n        ::placeholder {\n            color: rgba(48, 79, 254, 0.4);\n        }\n    }\n`;\n\nconst InputColumn = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n`;\n\nconst MessageError = styled.div`\n    font-size: 12px;\n    display: flex;\n    flex-direction: row;\n    position: absolute;\n    padding-top: 40px;\n    font-weight: 600;\n    line-height: 14px;\n    letter-spacing: 0.2px;\n    align-self: flex-end;\n    color: #E57373;\n    white-space: nowrap;\n`;\n\nconst BuyInput = observer(() => {\n    const {\n        root: { datStore, tradingStore, configStore, providerStore, tokenStore },\n    } = useStores();\n\n    const [buyInputStatus, setBuyInputStatus] = useState(\"\");\n\n    const { account } = providerStore.getActiveWeb3React();\n    \n    const price = (buyInputStatus === \"\") ? tradingStore.formatNumber(0) : tradingStore.formatBuyPrice();\n    let disconnectedError = (tradingStore.buyAmount > 0) ? (account === null) ? true : false : false;\n    let txFailedError = (tradingStore.buyingState === 5) && (buyInputStatus === \"\") ? true : false;\n    const datState = datStore.getState();\n    const minimumInvestment = datStore.getMinInvestment();\n    const buyDisabled = minimumInvestment !== undefined && minimumInvestment == \"115792089237316195423570985008687907853269984665640564039457584007913129639935\";\n    const requiredDataLoaded = datState !== undefined && minimumInvestment !== undefined;\n\n    if (buyInputStatus === \"\" && !tradingStore.payAmount.eq(0)) {\n      tradingStore.setPayAmount(bnum(0));\n    }\n\n    const Button = ({ active, children, onClick }) => {\n        if (active === true) {\n            return <ActiveButton onClick={onClick}>{children}</ActiveButton>;\n        } else {\n            return (\n                <InactiveButton>{children}</InactiveButton>\n            );\n        }\n    };\n\n    const checkActive = () => {\n        return account && buyInputStatus === ValidationStatus.VALID && requiredDataLoaded;\n    };\n\n    const validateNumber = async (value) => {\n        const ETHBalance = (account) ? tokenStore.getEtherBalance(account) : 0;\n        value = value.replace(/^0+/, '');\n        disconnectedError = (account === null) ? true : false;\n\n        const buyInputStatusFetch = validateTokenValue(value, {\n          minValue: normalizeBalance(\n              datStore.getMinInvestment()\n          ),\n          maxBalance: (account) ? normalizeBalance(ETHBalance) : null,\n        });\n        setBuyInputStatus(buyInputStatusFetch);\n\n        if (buyInputStatusFetch === ValidationStatus.VALID) {\n            tradingStore.setBuyAmount(value);\n            const buyReturn = datStore.fetchBuyReturn(denormalizeBalance(value));\n            tradingStore.handleBuyReturn(buyReturn);\n        }   else {\n            tradingStore.setPayAmount(bnum(0));\n            tradingStore.setBuyPrice(bnum(0));\n        }\n    };\n    return (\n        <FormWrapper>\n            <InfoRow>\n                <FormInfoText>Current Price</FormInfoText>\n                <div>\n                    {price} {configStore.getDATinfo().collateralType}\n                </div>\n            </InfoRow>\n            <InfoRow>\n                <FormInfoText>You will receive</FormInfoText>\n                <div>{formatBalance(tradingStore.payAmount)} DXD</div>\n            </InfoRow>\n            <InputColumn>\n                <FormContent error={buyInputStatus !== ValidationStatus.VALID && buyInputStatus !== \"\"}>\n                    <input\n                        className=\"form-vivid-blue\"\n                        type=\"text\"\n                        placeholder=\"0\"\n                        onChange={(e) => validateNumber(e.target.value)}\n                    />\n                    <div>ETH</div>\n                </FormContent>\n                { txFailedError ? \n                    <MessageError> <p>Transaction failed</p> </MessageError>\n                  :\n                    <></>\n                }\n                {(disconnectedError || (buyInputStatus !== ValidationStatus.VALID)) ? (\n                    <MessageError>\n                        { \n                          (buyInputStatus !== ValidationStatus.VALID) ? <span>{buyInputStatus}</span> :\n                          disconnectedError ? <p>Connect Wallet to proceed with order</p> : <></>\n                        }\n                    </MessageError>\n                ) : (\n                    <></>\n                )}\n            </InputColumn>\n            {(buyDisabled || !minimumInvestment) ? \n              <div/> :\n              <span style={\n                {fontFamily: \"roboto\", fontSize: \"11px\", color: \"#9AA7CA\", marginBottom: \"10px\"}\n              }>MINIMUM INVESTMENT: {minimumInvestment ? formatBalance(minimumInvestment, 18, 3) : \"...\"} ETH</span>\n            }\n            <Button\n                active={checkActive() && !buyDisabled}\n                onClick={() => {\n                    tradingStore.buyingState = TransactionState.SIGNING_TX;\n                    datStore\n                        .buy(\n                            account,\n                            denormalizeBalance(str(tradingStore.buyAmount)),\n                            bnum(1)\n                        )\n                        .on(TXEvents.TX_HASH, (hash) => {\n                            tradingStore.buyingState =\n                                TransactionState.UNCONFIRMED;\n                        })\n                        .on(TXEvents.RECEIPT, (receipt) => {\n                            tradingStore.setPreviousBuy({\n                                buyAmount: denormalizeBalance(tradingStore.buyAmount),\n                                payAmount: tradingStore.payAmount,\n                                buyPrice: tradingStore.buyPrice\n                            });\n                            tradingStore.buyingState =\n                                TransactionState.CONFIRMED;\n                        })\n                        .on(TXEvents.TX_ERROR, (txerror) => {\n                            tradingStore.buyingState = \n                                TransactionState.FAILED;\n                        })\n                        .on(TXEvents.INVARIANT, (error) => {\n                            tradingStore.buyingState = \n                                TransactionState.FAILED;\n                        });\n                }}\n            >\n                {(buyDisabled) ? \"Buy Disabled\" :\"Buy DXD\"}\n            </Button>\n        </FormWrapper>\n    );\n});\n\nexport default BuyInput;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst SpinningCircle = styled.div`\n    height: ${(props) => props.height || '16px'};\n    width: ${(props) => props.width || '16px'};\n    color: blue;\n    top: 50%;\n    left: 50%;\n    margin: -(9px) 0 0 - (9px);\n    -webkit-animation: rotation 1s infinite linear;\n    -moz-animation: rotation 1s infinite linear;\n    -o-animation: rotation 1s infinite linear;\n    animation: rotation 1s infinite linear;\n    border: 2px solid rgba(83, 109, 254, 0.2);\n    border-radius: 100%;\n\n    :before {\n        content: '';\n        display: block;\n        position: absolute;\n        left: -2px;\n        top: -2px;\n        height: 100%;\n        width: 100%;\n        border-top: 2px solid #758afe;\n        border-left: 2px solid #758afe;\n        border-bottom: 2px solid #758afe;\n        border-right: 2px solid transparent;\n        border-radius: 100%;\n    }\n\n    @-webkit-keyframes rotation {\n        from {\n            -webkit-transform: rotate(0deg);\n        }\n        to {\n            -webkit-transform: rotate(359deg);\n        }\n    }\n    @-moz-keyframes rotation {\n        from {\n            -moz-transform: rotate(0deg);\n        }\n        to {\n            -moz-transform: rotate(359deg);\n        }\n    }\n    @-o-keyframes rotation {\n        from {\n            -o-transform: rotate(0deg);\n        }\n        to {\n            -o-transform: rotate(359deg);\n        }\n    }\n    @keyframes rotation {\n        from {\n            transform: rotate(0deg);\n        }\n        to {\n            transform: rotate(359deg);\n        }\n    }\n`;\n\nconst PendingCircle = ({ height, width }) => {\n    return <SpinningCircle height={height} width={width} />;\n};\n\nexport default PendingCircle;\n","import React from 'react';\nimport { observer } from 'mobx-react';\nimport styled from 'styled-components';\nimport ActiveButton from '../common/ActiveButton';\nimport InactiveButton from '../common/InactiveButton';\nimport { useStores } from '../../contexts/storesContext';\nimport { formatBalance } from '../../utils/token';\nimport PendingCircle from '../common/PendingCircle';\n\nconst FormWrapper = styled.div`\n    padding-top: 24px;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n`;\n\nconst InfoRow = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    line-height: 20px;\n    color: var(--dark-text-gray);\n    margin-bottom: 12px;\n`;\n\nconst FormInfoText = styled.div`\n    color: var(--light-text-gray);\n    font-size: 14px;\n`;\n\nconst SignTransaction = styled.div`\n    font-size: 15px;\n    line-height: 20px;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    letter-spacing: 0.4px;\n    color: var(--panel-pending);\n    margin-bottom: 28px;\n`;\n\nconst BuySign = observer(() => {\n    const {\n        root: { tradingStore,configStore },\n    } = useStores();\n\n    const price = tradingStore.formatBuyPrice();\n    const buyAmount = tradingStore.formatBuyAmount();\n\n    const Button = ({ active, children, onClick }) => {\n        if (active === true) {\n            return <ActiveButton onClick={onClick}>{children}</ActiveButton>;\n        } else {\n            return (\n                <InactiveButton>{children}</InactiveButton>\n            );\n        }\n    };\n\n    return (\n        <FormWrapper>\n            <InfoRow>\n                <FormInfoText>Price</FormInfoText>\n                <div>\n                    {price} {configStore.getDATinfo().collateralType}\n                </div>\n            </InfoRow>\n            <InfoRow>\n                <FormInfoText>You will receive</FormInfoText>\n                <div>\n                    {formatBalance(tradingStore.payAmount)} DXD\n                </div>\n            </InfoRow>\n            <InfoRow>\n                <FormInfoText>Total cost</FormInfoText>\n                <div>{buyAmount} {configStore.getDATinfo().collateralType}</div>\n            </InfoRow>\n            <SignTransaction>\n                Sign Transaction...\n                <PendingCircle />\n            </SignTransaction>\n            <Button active={false}>Buy DXD</Button>\n        </FormWrapper>\n    );\n});\n\nexport default BuySign;\n","import React from 'react';\nimport { observer } from 'mobx-react';\nimport styled from 'styled-components';\nimport ActiveButton from '../common/ActiveButton';\nimport InactiveButton from '../common/InactiveButton';\nimport { useStores } from '../../contexts/storesContext';\nimport { formatBalance } from '../../utils/token';\nimport PendingCircle from '../common/PendingCircle';\n\nconst FormWrapper = styled.div`\n    padding-top: 24px;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n`;\n\nconst InfoRow = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    line-height: 20px;\n    color: var(--dark-text-gray);\n    margin-bottom: 12px;\n`;\n\n\nconst FormInfoText = styled.div`\n    color: var(--light-text-gray);\n    font-size: 14px;\n`;\n\nconst Unconfirmed = styled.div`\n    font-size: 15px;\n    line-height: 20px;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    letter-spacing: 0.4px;\n    color: var(--turquois-text);\n    margin-bottom: 28px;\n`;\n\nconst BuyUnconfirmed = observer(() => {\n    const {\n        root: { tradingStore, configStore },\n    } = useStores();\n\n    const price = tradingStore.formatBuyPrice();\n    const buyAmount = tradingStore.formatBuyAmount();\n\n    const Button = ({ active, children, onClick }) => {\n        if (active === true) {\n            return <ActiveButton onClick={onClick}>{children}</ActiveButton>;\n        } else {\n            return (\n                <InactiveButton>{children}</InactiveButton>\n            );\n        }\n    };\n    return (\n        <FormWrapper>\n            <InfoRow>\n                <FormInfoText>Price</FormInfoText>\n                <div>\n                    {price} {configStore.getDATinfo().collateralType}\n                </div>\n            </InfoRow>\n            <InfoRow>\n                <FormInfoText>You will receive</FormInfoText>\n                <div>\n                    {formatBalance(tradingStore.payAmount)} DXD\n                </div>\n            </InfoRow>\n            <InfoRow>\n                <FormInfoText>Total cost</FormInfoText>\n                <div>{buyAmount} {configStore.getDATinfo().collateralType}</div>\n            </InfoRow>\n            <Unconfirmed>\n                Unconfirmed...\n                <PendingCircle />\n            </Unconfirmed>\n            <Button active={false}>Buy DXD</Button>\n        </FormWrapper>\n    );\n});\n\nexport default BuyUnconfirmed;\n","import React from 'react';\nimport { observer } from 'mobx-react';\nimport styled from 'styled-components';\nimport ActiveButton from '../common/ActiveButton';\nimport InactiveButton from '../common/InactiveButton';\nimport { useStores } from '../../contexts/storesContext';\nimport { formatBalance, formatNumberValue } from '../../utils/token';\n\nconst FormWrapper = styled.div`\n    padding-top: 24px;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n`;\n\nconst InfoRow = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    line-height: 20px;\n    color: var(--dark-text-gray);\n    margin-bottom: 12px;\n`;\n\nconst FormInfoText = styled.div`\n    color: var(--light-text-gray);\n    font-size: 14px;\n`;\n\nconst Confirmed = styled.div`\n    align-items: center;\n    font-size: 15px;\n    line-height: 20px;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    letter-spacing: 0.4px;\n    color: var(--turquois-text);\n    margin-bottom: 28px;\n`;\n\nconst CheckboxContainer = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    height: 20px;\n    width: 20px;\n`;\n\nconst BuyConfirmed = observer(() => {\n    const {\n        root: { tradingStore, configStore },\n    } = useStores();\n\n    const {buyAmount, buyPrice, payAmount} = tradingStore.previousBuy;\n\n    const Button = ({ active, children, onClick }) => {\n        if (active === true) {\n            return <ActiveButton onClick={onClick}>{children}</ActiveButton>;\n        } else {\n            return (\n                <InactiveButton>{children}</InactiveButton>\n            );\n        }\n    };\n\n    return (\n        <FormWrapper>\n            <InfoRow>\n                <FormInfoText>Current Price</FormInfoText>\n                <div>\n                    {formatNumberValue(buyPrice)} {configStore.getDATinfo().collateralType}\n                </div>\n            </InfoRow>\n            <InfoRow>\n                <FormInfoText>You will recieve</FormInfoText>\n                <div>\n                    {formatBalance(payAmount)} DXD\n                </div>\n            </InfoRow>\n            <InfoRow>\n            <FormInfoText>Total cost</FormInfoText>\n                <div>{formatBalance(buyAmount)} {configStore.getDATinfo().collateralType}</div>\n            </InfoRow>\n            <Confirmed>\n                Confirmed\n                <CheckboxContainer>\n                    <img alt=\"bolt\" src={require(\"assets/images/tick.svg\")}/>\n                </CheckboxContainer>\n            </Confirmed>\n            <Button\n                active={true}\n                onClick={() => {\n                    tradingStore.resetBuyForm();\n                }}\n            >\n                Buy Again\n            </Button>\n        </FormWrapper>\n    );\n});\n\nexport default BuyConfirmed;\n","import React from 'react';\nimport { observer } from 'mobx-react';\nimport BuyInput from './BuyInput';\nimport BuySign from '../Buy/BuySign';\nimport BuyUnconfirmed from '../Buy/BuyUnconfirmed';\nimport BuyConfirmed from './BuyConfirmed';\n\nconst ContentStates = {\n    BUY_FORM: 'sell_form',\n    SIGN_TRANSACTION: 'signTransaction',\n    UNCONFIRMED: 'unconfirmed',\n    CONFIRMED: 'confirmed',\n    APPROVED: 'approved',\n    FAILED: 'failed'\n};\n\nconst BuyForm = observer(() => {\n    const Content = ({ contentCount }) => {\n        let contentState;\n        if (contentCount === 0) {\n            contentState = ContentStates.BUY_FORM;\n        } else if (contentCount === 1) {\n            contentState = ContentStates.SIGN_TRANSACTION;\n        } else if (contentCount === 2) {\n            contentState = ContentStates.UNCONFIRMED;\n        } else if (contentCount === 3) {\n            contentState = ContentStates.CONFIRMED;\n        } else {\n            contentState = ContentStates.FAILED;\n        }\n\n        if (contentState === ContentStates.BUY_FORM) {\n            return <BuyInput/>;\n        } else if (contentState === ContentStates.SIGN_TRANSACTION) {\n            return <BuySign/>;\n        } else if (contentState === ContentStates.UNCONFIRMED) {\n            return <BuyUnconfirmed/>;\n        } else if (contentState === ContentStates.CONFIRMED) {\n            return <BuyConfirmed/>;\n        } else if (contentState === ContentStates.FAILED) {\n            return <BuyInput/>;\n        }\n    };\n    return <Content contentCount={0} />;\n});\n\nexport default BuyForm;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useStores } from '../../contexts/storesContext';\nimport { observer } from 'mobx-react';\nimport { TXEvents } from 'types';\nimport { TransactionState } from 'stores/TradingForm';\n\nconst ContentWrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n`;\n\nconst CircleContainer = styled.div`\n    height:168px;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items:center;\n`;\n\nconst CheckboxContainer = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    height: 48px;\n    width: 100%;\n    margin-bottom: 16px;\n`;\n\nconst Info = styled.div`\n    //font-family: SF Pro Text;\n    font-size: 16px;\n    line-height: 19px;\n    letter-spacing: 0.4px;\n    width:100%;\n    color: var(--panel-text);\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n`;\n\nconst EnableButton = styled.div`\n    background-color: #536dfe;\n    border: 1px solid #304ffe;\n    border-radius: 4px;\n    color: white;\n    text-align: center;\n    height: 34px;\n    line-height: 34px;\n    text-transform: uppercase;\n    cursor: pointer;\n`;\n\nconst Enable = observer(({ tokenType }) => {\n    const {\n        root: { providerStore, configStore, tokenStore, tradingStore },\n    } = useStores();\n\n    const tokenAddress = configStore.getTokenAddress(tokenType);\n\n    return (\n        <ContentWrapper>\n            <CircleContainer>\n                <CheckboxContainer>\n                    <img alt=\"checkbox-circle\" src={require(\"assets/images/checkbox-circle.svg\")} />\n                </CheckboxContainer>\n                <Info>Enable {tokenType} for trading</Info>\n            </CircleContainer>\n            <EnableButton\n                onClick={() => {\n                    tradingStore.enableDXDState = TransactionState.SIGNING_TX;\n                    tokenStore.approveMax(\n                        providerStore.getActiveWeb3React(),\n                        tokenAddress,\n                        configStore.getTokenAddress()\n                    ).on(TXEvents.TX_HASH, (hash) => {\n                        tradingStore.setEnableDXDState(TransactionState.UNCONFIRMED);\n                    })\n                    .on(TXEvents.RECEIPT, (receipt) => {\n                        tradingStore.setEnableDXDState(TransactionState.CONFIRMED);\n                    })\n                    .on(TXEvents.TX_ERROR, (txerror) => {\n                        tradingStore.setEnableDXDState(TransactionState.FAILED);\n                    })\n                    .on(TXEvents.INVARIANT, (error) => {\n                        tradingStore.setEnableDXDState(TransactionState.FAILED);\n                    });;\n                }}\n            >\n                Enable {tokenType}\n            </EnableButton>\n        </ContentWrapper>\n    );\n});\n\nexport default Enable;\n","import React from 'react';\nimport styled from 'styled-components';\nimport PendingCircle from '../common/PendingCircle';\n\nconst ContentWrapper = styled.div`\n    height: 200px;\n    padding: 6px 0px;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n`;\n\nconst CircleContainer = styled.div`\n    position: relative;\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    padding-bottom: 16px;\n`;\n\nconst Ellipses = styled.div`\n    position: absolute;\n    font-size: 25px;\n    top: 5px;\n    color: var(--pending-ellipses-purple);\n`;\n\nconst Title = styled.div`\n    //font-family: SF Pro Text;\n    font-size: 16px;\n    line-height: 19px;\n    letter-spacing: 0.4px;\n    color: var(--panel-text);\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    margin-bottom: 8px;\n`;\n\nconst SubTitle = styled.div`\n    // font-family: SF Pro Text;\n    font-size: 14px;\n    line-height: 17px;\n    letter-spacing: 0.4px;\n    color: var(--pending-panel-text);\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    margin-bottom: 27px;\n`;\n\nconst EnablePendingButton = styled.div`\n    background-color: white;\n    border: 1px solid var(--medium-gray);\n    border-radius: 4px;\n    color: var(--pending-text-gray);\n    text-align: center;\n    height: 34px;\n    line-height: 34px;\n    text-transform: uppercase;\n`;\n\nconst EnablePending = ({ tokenType, subtitleText }) => {\n    return (\n        <ContentWrapper>\n            <CircleContainer>\n                <PendingCircle height=\"48px\" width=\"48px\" />\n                <Ellipses>...</Ellipses>\n            </CircleContainer>\n            <Title>Enable {tokenType} for trading</Title>\n            <SubTitle>{subtitleText}</SubTitle>\n            <EnablePendingButton>Enable {tokenType}</EnablePendingButton>\n        </ContentWrapper>\n    );\n};\n\nexport default EnablePending;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { TransactionState } from 'stores/TradingForm';\nimport { observer } from 'mobx-react';\nimport { useStores } from '../../contexts/storesContext';\n\nconst ContentWrapper = styled.div`\n    height: 200px;\n    padding: 6px 0px;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n`;\n\nconst CircleContainer = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n`;\n\nconst CheckboxContainer = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    height: 48px;\n    width: 48px;\n    border-radius: 32px;\n    border: 1.5px solid var(--panel-icon-2);\n    margin-bottom: 16px;\n`;\n\nconst Checkbox = styled.img`\n    height: 13px;\n    width: 18px;\n`;\n\nconst Info = styled.div`\n    //font-family: SF Pro Text;\n    font-size: 16px;\n    line-height: 19px;\n    letter-spacing: 0.4px;\n    color: var(--panel-text);\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    margin-bottom: 8px;\n`;\n\nconst Status = styled.div`\n    // font-family: SF Pro Text;\n    font-size: 14px;\n    line-height: 17px;\n    letter-spacing: 0.4px;\n    color: var(--turquois-text);\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    margin-bottom: 27px;\n`;\n\nconst EnableButton = styled.div`\n    background-color: #536dfe;\n    border: 1px solid #304ffe;\n    border-radius: 4px;\n    color: white;\n    text-align: center;\n    height: 34px;\n    line-height: 34px;\n    text-transform: uppercase;\n    cursor: pointer;\n`;\n\nconst EnableContinue = observer(() => {\n    const {\n        root: { tradingStore },\n    } = useStores();\n\n    const Button = () => {\n        return (\n            <EnableButton\n                onClick={() => {\n                    tradingStore.setEnableDXDState(TransactionState.APPROVED);\n                }}\n            >\n                Continue\n            </EnableButton>\n        );\n    };\n\n    return (\n        <ContentWrapper>\n            <CircleContainer>\n                <CheckboxContainer>\n                    <Checkbox src={require(\"assets/images/checkbox_758AFE.svg\")} />\n                </CheckboxContainer>\n            </CircleContainer>\n            <Info>Enable DXD for trading</Info>\n            <Status>Confirmed</Status>\n            <Button>Continue</Button>\n        </ContentWrapper>\n    );\n});\n\nexport default EnableContinue;\n","import React from 'react';\nimport { observer } from 'mobx-react';\nimport { useStores } from '../../contexts/storesContext';\nimport Enable from './Enable';\nimport EnablePending from './EnablePending';\nimport { TransactionState } from 'stores/TradingForm';\nimport EnableContinue from './EnableContinue';\n\nconst EnableForm = observer(() => {\n    const {\n        root: { tradingStore },\n    } = useStores();\n\n    if (tradingStore.enableDXDState === TransactionState.NONE) {\n        return <Enable tokenType=\"DXD\" />;\n    } else if (tradingStore.enableDXDState === TransactionState.SIGNING_TX) {\n        return <EnablePending\n        tokenType=\"DXD\"\n        subtitleText=\"Sign Transaction...\"\n    />;\n    } else if (tradingStore.enableDXDState === TransactionState.UNCONFIRMED) {\n        return <EnablePending\n                tokenType=\"DXD\"\n                subtitleText=\"Awaiting Confirmation...\"\n            />\n        ;\n    } else if (tradingStore.enableDXDState === TransactionState.CONFIRMED) {\n        return <EnableContinue />;\n    } else if (tradingStore.enableDXDState === TransactionState.FAILED) {\n        return <Enable tokenType=\"DXD\" />;\n    } else {\n      return <Enable tokenType=\"DXD\" />;\n    }\n});\n\nexport default EnableForm;\n","import React, { useState } from 'react';\nimport { observer } from 'mobx-react';\nimport styled from 'styled-components';\nimport ActiveButton from '../common/ActiveButton';\nimport InactiveButton from '../common/InactiveButton';\nimport { useStores } from '../../contexts/storesContext';\nimport {\n    denormalizeBalance,\n    formatBalance,\n    normalizeBalance,\n} from '../../utils/token';\nimport { bnum, str } from '../../utils/helpers';\nimport { TXEvents } from '../../types';\nimport { TransactionState } from '../../stores/TradingForm';\nimport { validateTokenValue, ValidationStatus } from '../../utils/validators';\n\nconst FormWrapper = styled.div`\n    padding-top: 24px;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n    padding: 10px 10px;\n`;\n\nconst InfoRow = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    line-height: 20px;\n    color: var(--dark-text-gray);\n    margin-bottom: 12px;\n    font-size: 15px;\n`;\n\nconst FormInfoText = styled.div`\n    color: var(--light-text-gray);\n    font-size: 14px;\n`;\n\nconst FormContent = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-evenly;\n    color: rgba(48, 79, 254, 0.2);\n    border: 1px solid rgba(48, 79, 254, 0.2);\n    border-radius: 4px;\n    height: 34px;\n    line-height: 34px;\n    margin-top: 0px;\n    margin-bottom: 34px;\n    font-weight: 600;\n    font-size: 15px;\n    padding: 0px 10px;\n    input,\n    input:focus {\n        border: none;\n        font-size: inherit;\n        outline: none;\n        ::placeholder {\n            color: rgba(48, 79, 254, 0.4);\n        }\n    }\n`;\n\nconst InputColumn = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n`;\n\nconst MessageError = styled.div`\n    font-size: 12px;\n    display: flex;\n    flex-direction: row;\n    position: absolute;\n    padding-top: 40px;\n    font-weight: 600;\n    line-height: 14px;\n    letter-spacing: 0.2px;\n    align-self: flex-end;\n    color: #E57373;\n    white-space: nowrap;\n`;\n\nconst SellInput = observer((props) => {\n    const {\n        root: { datStore, tradingStore, configStore, providerStore, tokenStore },\n    } = useStores();\n\n    const [sellInputStatus, setSellInputStatus] = useState(\"\");\n\n    const { account } = providerStore.getActiveWeb3React();\n    const price = (sellInputStatus === \"\") ? tradingStore.formatNumber(0) : tradingStore.formatSellPrice();\n    const rewardForSell = (sellInputStatus === \"\") ? bnum(0) : tradingStore.rewardForSell;\n    let txFailedError = (tradingStore.sellingState === 5) && (sellInputStatus === \"\") ? true : false;\n    const sellText = datStore.isInitPhase() ? \"Withdraw\" : \"Sell\";\n\n    const checkActive = () => {\n        return sellInputStatus === ValidationStatus.VALID;\n    }\n    \n    if (sellInputStatus === \"\" && tradingStore.sellAmount !== 0) {\n      tradingStore.setSellAmount(bnum(0));\n    }\n\n    const validateNumber = async (value) => {\n        value = value.replace(/^0+/, '');\n        const DXDBalance =  (account) ? tokenStore.getBalance(configStore.getTokenAddress(), account) : 0;\n        const sellInputStatusFetch = validateTokenValue(value, {\n          maxBalance: (account) ? normalizeBalance(DXDBalance) : null,\n        });\n        setSellInputStatus(sellInputStatusFetch);\n\n        if (sellInputStatusFetch === ValidationStatus.VALID) {\n            tradingStore.setSellAmount(value);\n            const sellReturn = datStore.fetchSellReturn(denormalizeBalance(value));\n            tradingStore.handleSellReturn(sellReturn);\n        }   else {\n            tradingStore.setSellAmount(bnum(0));\n            tradingStore.setSellPrice(bnum(0));\n            tradingStore.setRewardForSell(bnum(0));\n        }\n    }\n\n\n    const Button = ({ active, children, onClick }) => {\n        if (active === true) {\n            return (\n                <ActiveButton onClick={onClick}>{children}</ActiveButton>\n            );\n        } else {\n            return (\n                <InactiveButton>{children}</InactiveButton>\n            );\n        }\n    };\n\n    return (\n        <FormWrapper>\n            <InfoRow>\n                <FormInfoText>Current Price</FormInfoText>\n                <div>\n                    {price} {configStore.getDATinfo().collateralType}\n                </div>\n            </InfoRow>\n            <InfoRow>\n                <FormInfoText>You will receive</FormInfoText>\n                <div>\n                    {formatBalance(rewardForSell)} {configStore.getDATinfo().collateralType}\n                </div>\n            </InfoRow>\n            <InputColumn>\n                <FormContent>\n                    <input\n                        className=\"form-vivid-blue\"\n                        type=\"text\"\n                        placeholder=\"0\"\n                        onChange={(e) =>\n                            validateNumber(e.target.value)\n                        }\n                    />\n                    <div>DXD</div>\n                </FormContent>\n                { txFailedError ? \n                    <MessageError> <p>Transaction failed</p> </MessageError>\n                  :\n                    <></>\n                }\n                {sellInputStatus !== ValidationStatus.VALID ? (\n                    <MessageError>\n                      {sellInputStatus}\n                    </MessageError>\n                ) : (\n                    <></>\n                )}\n            </InputColumn>\n            <Button\n                active={checkActive()}\n                onClick={() => {\n                    tradingStore.sellingState = TransactionState.SIGNING_TX;\n\n                    // TODO What should last argument be set to?  (the minCurrencyReturned) \n                    datStore\n                        .sell(\n                            account,\n                            denormalizeBalance(str(tradingStore.sellAmount)),\n                            bnum(1)\n                        )\n                        .on(TXEvents.TX_HASH, (hash) => {\n                            tradingStore.sellingState =\n                                TransactionState.UNCONFIRMED;\n                        })\n                        .on(TXEvents.RECEIPT, (receipt) => {\n                            tradingStore.setPreviousSell({\n                                sellPrice: bnum(price),\n                                sellAmount: denormalizeBalance(tradingStore.sellAmount),\n                                rewardForSell: tradingStore.rewardForSell\n                            })\n                            tradingStore.sellingState =\n                                TransactionState.CONFIRMED;\n                        })\n                        .on(TXEvents.TX_ERROR, (error) => {\n                            tradingStore.sellingState =\n                                TransactionState.FAILED;\n                        })\n                        .on(TXEvents.INVARIANT, (error) => {\n                            tradingStore.sellingState = \n                                TransactionState.FAILED;\n                        });\n                }}\n            >\n                {sellText} {sellText  === \"Withdraw\" ? 'ETH' : 'DXD'}\n            </Button>\n        </FormWrapper>\n    );\n});\n\nexport default SellInput;\n","import React from 'react';\nimport { observer } from 'mobx-react';\nimport styled from 'styled-components';\nimport ActiveButton from '../common/ActiveButton';\nimport InactiveButton from '../common/InactiveButton';\nimport { useStores } from '../../contexts/storesContext';\nimport { formatBalance } from '../../utils/token';\nimport PendingCircle from '../common/PendingCircle';\n\nconst FormWrapper = styled.div`\n    padding-top: 24px;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n`;\n\nconst InfoRow = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    line-height: 20px;\n    color: var(--dark-text-gray);\n    margin-bottom: 12px;\n`;\n\nconst FormInfoText = styled.div`\n    color: var(--light-text-gray);\n    font-size: 14px;\n`;\n\nconst SignTransaction = styled.div`\n    font-size: 15px;\n    line-height: 20px;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    letter-spacing: 0.4px;\n    color: var(--panel-pending);\n    margin-bottom: 28px;\n`;\n\n\n// class SellSign extends React.Component {\nconst SellSign = observer((props) => {\n    const {\n        root: { datStore, tradingStore, configStore },\n    } = useStores();\n\n    const price = tradingStore.formatSellPrice();\n    const rewardForSell = tradingStore.rewardForSell;\n    const sellAmount = tradingStore.formatSellAmount();\n    const sellText = datStore.isInitPhase(configStore.getTokenAddress()) ? \"Withdraw\" : \"Sell\";\n\n    const Button = ({ active, children, onClick }) => {\n        if (active === true) {\n            return (\n                <ActiveButton onClick={onClick}>{children}</ActiveButton>\n            );\n        } else {\n            return (\n                <InactiveButton>{children}</InactiveButton>\n            );\n        }\n    };\n\n    return (\n        <FormWrapper>\n            <InfoRow>\n                <FormInfoText>Current Price</FormInfoText>\n                <div>\n                    {price} {configStore.getDATinfo().collateralType}\n                </div>\n            </InfoRow>\n            <InfoRow>\n                <FormInfoText>You will receive</FormInfoText>\n                <div>\n                    {formatBalance(rewardForSell)} {configStore.getDATinfo().collateralType}\n                </div>\n            </InfoRow>\n            <InfoRow>\n                <FormInfoText>Sell Amount</FormInfoText>\n                <div>{sellAmount} DXD</div>\n            </InfoRow>\n            <SignTransaction>\n                Sign Transaction...\n                <PendingCircle />\n            </SignTransaction>\n            <Button active={false}>{sellText} {sellText  === \"Withdraw\" ? 'ETH' : 'DXD'}</Button>\n        </FormWrapper>\n    );\n});\n\nexport default SellSign;\n","import React from 'react';\nimport { observer } from 'mobx-react';\nimport styled from 'styled-components';\nimport ActiveButton from '../common/ActiveButton';\nimport InactiveButton from '../common/InactiveButton';\nimport { useStores } from '../../contexts/storesContext';\nimport { formatBalance } from '../../utils/token';\nimport PendingCircle from '../common/PendingCircle';\n\n\nconst FormWrapper = styled.div`\n    padding-top: 24px;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n`;\n\nconst InfoRow = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    line-height: 20px;\n    color: var(--dark-text-gray);\n    margin-bottom: 12px;\n`;\n\nconst FormInfoText = styled.div`\n    color: var(--light-text-gray);\n    font-size: 14px;\n`;\n\nconst Unconfirmed = styled.div`\n    font-size: 15px;\n    line-height: 20px;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    letter-spacing: 0.4px;\n    color: var(--turquois-text);\n    margin-bottom: 28px;\n`;\n\nconst SellUnconfirmed = observer((props) => {\n    const {\n        root: { datStore, tradingStore, configStore },\n    } = useStores();\n\n    const price = tradingStore.formatSellPrice();\n    const rewardForSell = tradingStore.rewardForSell;\n    const sellAmount = tradingStore.formatSellAmount();\n    const sellText = datStore.isInitPhase(configStore.getTokenAddress()) ? \"Withdraw\" : \"Sell\";\n\n    const Button = ({ active, children, onClick }) => {\n        if (active === true) {\n            return (\n                <ActiveButton onClick={onClick}>{children}</ActiveButton>\n            );\n        } else {\n            return (\n                <InactiveButton>{children}</InactiveButton>\n            );\n        }\n    };\n\n    return (\n        <FormWrapper>\n            <InfoRow>\n                <FormInfoText>Current Price</FormInfoText>\n                <div>\n                    {price} {configStore.getDATinfo().collateralType}\n                </div>\n            </InfoRow>\n            <InfoRow>\n                <FormInfoText>You will receive</FormInfoText>\n                <div>\n                    {formatBalance(rewardForSell)} {configStore.getDATinfo().collateralType}\n                </div>\n            </InfoRow>\n            <InfoRow>\n                <FormInfoText>Sell Amount</FormInfoText>\n                <div>{sellAmount} DXD</div>\n            </InfoRow>\n            <Unconfirmed>\n                Unconfirmed...\n                <PendingCircle />\n            </Unconfirmed>\n            <Button active={false}>{sellText} {sellText  === \"Withdraw\" ? 'ETH' : 'DXD'}</Button>\n        </FormWrapper>\n    );\n});\n\nexport default SellUnconfirmed;\n","import React from 'react';\nimport { observer } from 'mobx-react';\nimport styled from 'styled-components';\nimport ActiveButton from '../common/ActiveButton';\nimport InactiveButton from '../common/InactiveButton';\nimport { useStores } from '../../contexts/storesContext';\nimport { formatBalance, formatNumberValue } from '../../utils/token';\n\nconst FormWrapper = styled.div`\n    padding-top: 24px;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n`;\n\nconst InfoRow = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    line-height: 20px;\n    color: var(--dark-text-gray);\n    margin-bottom: 12px;\n`;\n\nconst FormInfoText = styled.div`\n    color: var(--light-text-gray);\n    font-size: 14px;\n`;\n\nconst Confirmed = styled.div`\n    align-items: center;\n    font-size: 15px;\n    line-height: 20px;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    letter-spacing: 0.4px;\n    color: var(--turquois-text);\n    margin-bottom: 28px;\n`;\n\nconst CheckboxContainer = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n    height: 20px;\n    width: 20px;\n`;\n\nconst SellConfirmed = observer((props) => {\n    const {\n        root: { datStore, tradingStore, configStore },\n    } = useStores();\n\n    const sellText = datStore.isInitPhase(configStore.getTokenAddress()) ? \"Withdraw\" : \"Sell\";\n\n    const {sellPrice, rewardForSell, sellAmount} = tradingStore.previousSell;\n\n    const Button = ({ active, children, onClick }) => {\n        if (active === true) {\n            return (\n                <ActiveButton onClick={onClick}>{children}</ActiveButton>\n            );\n        } else {\n            return (\n                <InactiveButton>{children}</InactiveButton>\n            );\n        }\n    };\n\n    return (\n        <FormWrapper>\n            <InfoRow>\n                <FormInfoText>Current Price</FormInfoText>\n                <div>\n                    {formatNumberValue(sellPrice)} {configStore.getDATinfo().collateralType}\n                </div>\n            </InfoRow>\n            <InfoRow>\n                <FormInfoText>You will receive</FormInfoText>\n                <div>\n                    {formatBalance(rewardForSell)} {configStore.getDATinfo().collateralType}\n                </div>\n            </InfoRow>\n            <InfoRow>\n                <FormInfoText>Sell Amount</FormInfoText>\n                <div>{formatBalance(sellAmount)} DXD</div>\n            </InfoRow>\n            <Confirmed>\n                Confirmed\n                <CheckboxContainer>\n                    <img alt=\"bolt\" src={require(\"assets/images/tick.svg\")}/>\n                </CheckboxContainer>\n            </Confirmed>\n            <Button\n                active={true}\n                onClick={() => {\n                    tradingStore.resetSellForm();\n                }}\n            >\n                {sellText} Again\n            </Button>\n        </FormWrapper>\n    );\n});\n\nexport default SellConfirmed;\n","import React from 'react';\nimport { observer } from 'mobx-react';\nimport SellInput from '../Sell/SellInput';\nimport SellSign from '../Sell/SellSign';\nimport SellUnconfirmed from '../Sell/SellUnconfirmed';\nimport SellConfirmed from '../Sell/SellConfirmed';\nimport { useStores } from '../../contexts/storesContext';\n\nconst ContentStates = {\n    SELL_FORM: 'sell_form',\n    SIGN_TRANSACTION: 'signTransaction',\n    UNCONFIRMED: 'unconfirmed',\n    CONFIRMED: 'confirmed',\n    APPROVED: 'approved',\n    FAILED: 'failed'\n};\n\nconst SellForm = observer(() => {\n    const {\n        root: { tradingStore },\n    } = useStores();\n\n    const count = tradingStore.sellingState;\n\n\n    const Content = ({ contentCount }) => {\n        let contentState;\n        if (contentCount === 0) {\n            contentState = ContentStates.SELL_FORM;\n        } else if (contentCount === 1) {\n            contentState = ContentStates.SIGN_TRANSACTION;\n        } else if (contentCount === 2) {\n            contentState = ContentStates.UNCONFIRMED;\n        } else if (contentCount === 3) {\n            contentState = ContentStates.CONFIRMED;\n        } else {\n            contentState = ContentStates.FAILED;\n        }\n\n        if (contentState === ContentStates.SELL_FORM) {\n            return <SellInput />;\n        } else if (contentState === ContentStates.SIGN_TRANSACTION) {\n            return <SellSign />;\n        } else if (contentState === ContentStates.UNCONFIRMED) {\n            return <SellUnconfirmed />;\n        } else if (contentState === ContentStates.CONFIRMED) {\n            return <SellConfirmed />;\n        } else {\n          return <SellInput />;\n        }\n    };\n\n    return <Content contentCount={count} />;\n});\n\nexport default SellForm;\n","import { ethers, utils } from 'ethers';\n\nexport function shortenAddress(address, digits = 4) {\n    if (!isAddress(address)) {\n        throw Error(`Invalid 'address' parameter '${address}'.`);\n    }\n    return `${address.substring(0, digits + 2)}...${address.substring(\n        42 - digits\n    )}`;\n}\n\nexport function isAddress(value) {\n    try {\n        return ethers.utils.getAddress(value.toLowerCase());\n    } catch {\n        return false;\n    }\n}\n\nexport function toChecksum(address) {\n    return utils.getAddress(address);\n}\n\nexport function toAddressStub(address) {\n    const start = address.slice(0, 5);\n    const end = address.slice(-3);\n\n    return `${start}...${end}`;\n}\n","import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { animated, useSpring, useTransition } from 'react-spring';\nimport { Spring } from 'react-spring/renderprops';\n\nimport { DialogContent, DialogOverlay } from '@reach/dialog';\nimport { isMobile } from 'react-device-detect';\nimport '@reach/dialog/styles.css';\nimport { useGesture } from 'react-use-gesture';\n\nconst AnimatedDialogOverlay = animated(DialogOverlay);\nconst WrappedDialogOverlay = ({\n    suppressClassNameWarning,\n    mobile,\n    ...rest\n}) => <AnimatedDialogOverlay {...rest} />;\nconst StyledDialogOverlay = styled(WrappedDialogOverlay).attrs({\n    suppressClassNameWarning: true,\n})`\n    &[data-reach-dialog-overlay] {\n        z-index: 2;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        background-color: ${({ theme }) => 'transparent'};\n\n        ${({ mobile }) =>\n            mobile &&\n            css`\n                align-items: flex-end;\n            `}\n\n        &::after {\n            content: '';\n            background-color: ${({ theme }) => theme.modalBackground};\n            opacity: 0.5;\n            top: 0;\n            left: 0;\n            bottom: 0;\n            right: 0;\n            /* position: absolute; */\n            position: fixed;\n            z-index: -1;\n        }\n    }\n`;\n\nconst FilteredDialogContent = ({\n    minHeight,\n    maxHeight,\n    isOpen,\n    slideInAnimation,\n    mobile,\n    ...rest\n}) => <DialogContent aria-label=\"BCDappModal\" {...rest} />;\nconst StyledDialogContent = styled(FilteredDialogContent)`\n    &[data-reach-dialog-content] {\n        border: 1px solid var(--panel-border);\n        background-color: var(--panel-border);\n        padding: 0px;\n        width: 50vw;\n        max-width: 650px;\n        ${({ maxHeight }) =>\n            maxHeight &&\n            css`\n                max-height: ${maxHeight}vh;\n            `}\n        ${({ minHeight }) =>\n            minHeight &&\n            css`\n                min-height: ${minHeight}vh;\n            `}\n    display: flex;\n        overflow: hidden;\n        border-radius: 10px;\n        ${({ theme }) => theme.mediaWidth.upToMedium`\n      width: 65vw;\n      max-height: 65vh;\n      margin: 0;\n    `}\n        ${({ theme, mobile, isOpen }) => theme.mediaWidth.upToSmall`\n      width:  85vw;\n      max-height: 66vh;\n      ${\n          mobile &&\n          css`\n              width: 100vw;\n              border-radius: 20px;\n              border-bottom-left-radius: 0;\n              border-bottom-right-radius: 0;\n          `\n      }\n    `}\n    }\n`;\n\nconst HiddenCloseButton = styled.button`\n    margin: 0;\n    padding: 0;\n    width: 0;\n    height: 0;\n    border: none;\n`;\n\nexport default function Modal({\n    isOpen,\n    onDismiss,\n    minHeight = false,\n    maxHeight = 50,\n    initialFocusRef,\n    children,\n}) {\n    const transitions = useTransition(isOpen, null, {\n        config: { duration: 200 },\n        from: { opacity: 0 },\n        enter: { opacity: 1 },\n        leave: { opacity: 0 },\n    });\n\n    const [{ xy }, set] = useSpring(() => ({ xy: [0, 0] }));\n    const bind = useGesture({\n        onDrag: (state) => {\n            let velocity = state.velocity;\n            if (velocity < 1) {\n                velocity = 1;\n            }\n            if (velocity > 8) {\n                velocity = 8;\n            }\n            set({\n                xy: state.down ? state.movement : [0, 0],\n                config: { mass: 1, tension: 210, friction: 20 },\n            });\n            if (velocity > 3 && state.direction[1] > 0) {\n                onDismiss();\n            }\n        },\n    });\n\n    if (isMobile) {\n        return transitions.map(\n            ({ item, key, props }) =>\n                item && (\n                    <StyledDialogOverlay\n                        key={key}\n                        style={props}\n                        onDismiss={onDismiss}\n                        initialFocusRef={initialFocusRef}\n                        mobile={isMobile}\n                    >\n                        <Spring // animation for entrance and exit\n                            from={{\n                                transform: isOpen\n                                    ? 'translateY(200px)'\n                                    : 'translateY(100px)',\n                            }}\n                            to={{\n                                transform: isOpen\n                                    ? 'translateY(0px)'\n                                    : 'translateY(200px)',\n                            }}\n                        >\n                            {(props) => (\n                                <animated.div\n                                    {...bind()}\n                                    style={{\n                                        transform: xy.interpolate(\n                                            (x, y) =>\n                                                `translate3d(${0}px,${\n                                                    y > 0 ? y : 0\n                                                }px,0)`\n                                        ),\n                                    }}\n                                >\n                                    <StyledDialogContent\n                                        style={props}\n                                        hidden={true}\n                                        minHeight={minHeight}\n                                        maxHeight={maxHeight}\n                                        mobile={isMobile}\n                                    >\n                                        <HiddenCloseButton\n                                            onClick={onDismiss}\n                                        />\n                                        {children}\n                                    </StyledDialogContent>\n                                </animated.div>\n                            )}\n                        </Spring>\n                    </StyledDialogOverlay>\n                )\n        );\n    } else {\n        return transitions.map(\n            ({ item, key, props }) =>\n                item && (\n                    <StyledDialogOverlay\n                        key={key}\n                        style={props}\n                        onDismiss={onDismiss}\n                        initialFocusRef={initialFocusRef}\n                        mobile={isMobile}\n                    >\n                        <StyledDialogContent\n                            hidden={true}\n                            minHeight={minHeight}\n                            maxHeight={maxHeight}\n                            isOpen={isOpen}\n                            mobile={isMobile}\n                        >\n                            <HiddenCloseButton onClick={onDismiss} />\n                            {children}\n                        </StyledDialogContent>\n                    </StyledDialogOverlay>\n                )\n        );\n    }\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useCopyClipboard } from '../../utils/helperHooks';\n\nimport { Link } from '../../theme';\nimport { CheckCircle, Copy } from 'react-feather';\n\nconst CopyIcon = styled(Link)`\n    color: ${({ theme }) => theme.silverGray};\n    flex-shrink: 0;\n    margin-right: 1rem;\n    margin-left: 0.5rem;\n    text-decoration: none;\n    :hover,\n    :active,\n    :focus {\n        text-decoration: none;\n        color: ${({ theme }) => theme.doveGray};\n    }\n`;\nconst TransactionStatusText = styled.span`\n    margin-left: 0.25rem;\n    ${({ theme }) => theme.flexRowNoWrap};\n    align-items: center;\n`;\n\nexport default function CopyHelper({ toCopy }) {\n    const [isCopied, setCopied] = useCopyClipboard();\n\n    return (\n        <CopyIcon onClick={() => setCopied(toCopy)}>\n            {isCopied ? (\n                <TransactionStatusText>\n                    <CheckCircle size={'16'} />\n                    <TransactionStatusText>Copied</TransactionStatusText>\n                </TransactionStatusText>\n            ) : (\n                <TransactionStatusText>\n                    <Copy size={'16'} />\n                </TransactionStatusText>\n            )}\n        </CopyIcon>\n    );\n}\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"line\", {\n  x1: 18,\n  y1: 6,\n  x2: 6,\n  y2: 18\n});\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"line\", {\n  x1: 6,\n  y1: 6,\n  x2: 18,\n  y2: 18\n});\n\nvar SvgX = function SvgX(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 20,\n    height: 20,\n    viewBox: \"0 0 20 20\",\n    fill: \"none\",\n    stroke: \"currentColor\",\n    strokeWidth: 2,\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    className: \"feather feather-x\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2, _ref3);\n};\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgX, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/x.svg\";\nexport { ForwardRef as ReactComponent };","import React, { useEffect, useRef } from 'react';\n\nimport styled from 'styled-components';\n\nimport Jazzicon from 'jazzicon';\nimport { useActiveWeb3React } from 'provider/providerHooks';\n\nconst StyledIdenticon = styled.div`\n    height: 20px;\n    width: 20px;\n    border-radius: 1.125rem;\n    background-color: ${({ theme }) => theme.silverGray};\n`;\n\nexport default function Identicon() {\n    const ref = useRef();\n\n    const { account } = useActiveWeb3React();\n\n    useEffect(() => {\n        if (account && ref.current) {\n            ref.current.innerHTML = '';\n            ref.current.appendChild(\n                Jazzicon(20, parseInt(account.slice(2, 10), 16))\n            );\n        }\n    });\n\n    return <StyledIdenticon ref={ref} />;\n}\n","interface Web3Window extends Window {\n    readonly web3?: any;\n    readonly ethereum?: any;\n}\n\nconst web3Window = window as Web3Window;\nexport { web3Window };\n","import React from 'react';\nimport styled from 'styled-components';\nimport { isMobile } from 'react-device-detect';\nimport Copy from './Copy';\nimport { injected, SUPPORTED_WALLETS } from 'provider/connectors';\n//@ts-ignore\nimport { ReactComponent as Close } from '../../assets/images/x.svg';\nimport { getEtherscanLink } from 'utils/etherscan';\nimport Identicon from '../Identicon';\nimport { web3Window as window } from 'provider/Web3Window';\n\nimport { Link } from '../../theme';\nimport { useStores } from '../../contexts/storesContext';\n\nconst OptionButton = styled.div`\n    ${({ theme }) => theme.flexColumnNoWrap}\n    justify-content: center;\n    align-items: center;\n    border-radius: 4px;\n    border: 1px solid var(--active-button-border);\n    background-color: var(--blue-text);\n    color: #FFFFFF;\n    padding: 8px 24px;\n\n    &:hover {\n        cursor: pointer;\n        border: 1px solid var(--blue-onHover-border);\n        background-color: var(--blue-onHover);\n    }\n\n    ${({ theme }) => theme.mediaWidth.upToMedium`\n      font-size: 12px;\n    `};\n`;\n\nconst HeaderRow = styled.div`\n    ${({ theme }) => theme.flexRowNoWrap};\n    padding: 1.5rem 1.5rem;\n    font-weight: 500;\n    color: var(--header-text);\n    ${({ theme }) => theme.mediaWidth.upToMedium`\n      padding: 1rem;\n    `};\n`;\n\nconst UpperSection = styled.div`\n    position: relative;\n    background-color: var(--panel-background);\n\n    h5 {\n        margin: 0;\n        margin-bottom: 0.5rem;\n        font-size: 1rem;\n        font-weight: 400;\n    }\n\n    h5:last-child {\n        margin-bottom: 0px;\n    }\n\n    h4 {\n        margin-top: 0;\n        font-weight: 500;\n    }\n`;\n\nconst InfoCard = styled.div`\n    padding: 1rem;\n    border: 1px solid ${({ theme }) => theme.placeholderGray};\n    border-radius: 20px;\n`;\n\nconst AccountGroupingRow = styled.div`\n    ${({ theme }) => theme.flexRowNoWrap};\n    justify-content: space-between;\n    align-items: center;\n    font-weight: 500;\n    color: ${({ theme }) => theme.textColor};\n\n    div {\n        ${({ theme }) => theme.flexRowNoWrap}\n        align-items: center;\n    }\n\n    &:first-of-type {\n        margin-bottom: 20px;\n    }\n`;\n\nconst AccountSection = styled.div`\n    background-color: var(--panel-background);\n    padding: 0rem 1.5rem;\n    ${({ theme }) =>\n        theme.mediaWidth.upToMedium`padding: 0rem 1rem 1rem 1rem;`};\n`;\n\nconst YourAccount = styled.div`\n    h5 {\n        margin: 0 0 1rem 0;\n        font-weight: 400;\n    }\n\n    h4 {\n        margin: 0;\n        font-weight: 500;\n    }\n`;\n\nconst GreenCircle = styled.div`\n    ${({ theme }) => theme.flexRowNoWrap}\n    justify-content: center;\n    align-items: center;\n\n    &:first-child {\n        height: 8px;\n        width: 8px;\n        margin-left: 12px;\n        margin-right: 2px;\n        background-color: ${({ theme }) => theme.connectedGreen};\n        border-radius: 50%;\n    }\n`;\n\nconst CircleWrapper = styled.div`\n    color: ${({ theme }) => theme.connectedGreen};\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n\nconst AccountControl = styled.div`\n    ${({ theme }) => theme.flexRowNoWrap};\n    align-items: center;\n    min-width: 0;\n\n    font-weight: ${({ hasENS, isENS }) => (hasENS ? (isENS ? 500 : 400) : 500)};\n    font-size: ${({ hasENS, isENS }) =>\n        hasENS ? (isENS ? '1rem' : '0.8rem') : '1rem'};\n\n    a:hover {\n        text-decoration: underline;\n    }\n\n    a {\n        min-width: 0;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n    }\n`;\n\nconst ConnectButtonRow = styled.div`\n    ${({ theme }) => theme.flexRowNoWrap}\n    align-items: center;\n    justify-content: center;\n    margin: 30px;\n`;\n\nconst StyledLink = styled(Link)`\n    color: var(--turquois-text);\n`;\n\nconst CloseIcon = styled.div`\n    position: absolute;\n    right: 1rem;\n    top: 14px;\n    color: var(--header-text);\n    &:hover {\n        cursor: pointer;\n        opacity: 0.6;\n    }\n`;\n\nconst CloseColor = styled(Close)`\n    path {\n        stroke: ${({ theme }) => theme.chaliceGray};\n    }\n`;\n\nconst WalletName = styled.div`\n    padding-left: 0.5rem;\n    width: initial;\n`;\n\nconst IconWrapper = styled.div`\n    ${({ theme }) => theme.flexColumnNoWrap};\n    align-items: center;\n    justify-content: center;\n    & > img,\n    span {\n        height: ${({ size }) => (size ? size + 'px' : '32px')};\n        width: ${({ size }) => (size ? size + 'px' : '32px')};\n    }\n    ${({ theme }) => theme.mediaWidth.upToMedium`\n    align-items: flex-end;\n  `};\n`;\n\nconst WalletAction = styled.div`\n    color: ${({ theme }) => theme.chaliceGray};\n    margin-left: 16px;\n    font-weight: 400;\n    :hover {\n        cursor: pointer;\n        text-decoration: underline;\n    }\n`;\n\ninterface Props {\n    toggleWalletModal: any;\n    ENSName: any;\n    openOptions: any;\n}\n\nexport default function AccountDetails(props: Props) {\n    const {\n        toggleWalletModal,\n        ENSName,\n        openOptions,\n    } = props;\n    const {\n        root: { providerStore },\n    } = useStores();\n    const { chainId, account, connector } = providerStore.getActiveWeb3React();\n\n    function formatConnectorName() {\n        const isMetaMask =\n            window.ethereum && window.ethereum.isMetaMask ? true : false;\n        const name = Object.keys(SUPPORTED_WALLETS)\n            .filter(\n                (k) =>\n                    SUPPORTED_WALLETS[k].connector === connector &&\n                    (connector !== injected ||\n                        isMetaMask === (k === 'METAMASK'))\n            )\n            .map((k) => SUPPORTED_WALLETS[k].name)[0];\n        return <WalletName>{name}</WalletName>;\n    }\n\n    function getStatusIcon() {\n        if (connector === injected) {\n            return (\n                <IconWrapper size={16}>\n                    <Identicon /> {formatConnectorName()}\n                </IconWrapper>\n            );\n        } else {\n          return <div />;\n        }\n    }\n\n    return (\n        <>\n            <UpperSection>\n                <CloseIcon onClick={toggleWalletModal}>\n                    <CloseColor alt={'close icon'} />\n                </CloseIcon>\n                <HeaderRow>Account</HeaderRow>\n                <AccountSection>\n                    <YourAccount>\n                        <InfoCard>\n                            <AccountGroupingRow>\n                                {getStatusIcon()}\n                                <div>\n                                    {connector !== injected && (\n                                        <WalletAction\n                                            onClick={() => {\n                                                //@ts-ignore\n                                                connector.close();\n                                            }}\n                                        >\n                                            Disconnect\n                                        </WalletAction>\n                                    )}\n                                    <CircleWrapper>\n                                        <GreenCircle>\n                                            <div />\n                                        </GreenCircle>\n                                    </CircleWrapper>\n                                </div>\n                            </AccountGroupingRow>\n                            <AccountGroupingRow>\n                                {ENSName ? (\n                                    <AccountControl\n                                        hasENS={!!ENSName}\n                                        isENS={true}\n                                    >\n                                        <StyledLink\n                                            hasENS={!!ENSName}\n                                            isENS={true}\n                                            href={getEtherscanLink(\n                                                chainId,\n                                                ENSName,\n                                                'address'\n                                            )}\n                                        >\n                                            {ENSName} ↗{' '}\n                                        </StyledLink>\n                                        <Copy toCopy={ENSName} />\n                                    </AccountControl>\n                                ) : (\n                                    <AccountControl\n                                        hasENS={!!ENSName}\n                                        isENS={false}\n                                    >\n                                        <StyledLink\n                                            hasENS={!!ENSName}\n                                            isENS={false}\n                                            href={getEtherscanLink(\n                                                chainId,\n                                                account,\n                                                'address'\n                                            )}\n                                        >\n                                            {account} ↗{' '}\n                                        </StyledLink>\n                                        <Copy toCopy={account} />\n                                    </AccountControl>\n                                )}\n                            </AccountGroupingRow>\n                        </InfoCard>\n                    </YourAccount>\n\n                    {!(isMobile && (window.web3 || window.ethereum)) && (\n                        <ConnectButtonRow>\n                            <OptionButton\n                                onClick={() => {\n                                    openOptions();\n                                }}\n                            >\n                                Connect to a different wallet\n                            </OptionButton>\n                        </ConnectButtonRow>\n                    )}\n                </AccountSection>\n            </UpperSection>\n        </>\n    );\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { transparentize } from 'polished';\nimport { Link } from '../../theme';\n\nconst InfoCard = styled.button`\n  background-color: ${({ theme, active }) =>\n      active ? theme.activeGray : theme.backgroundColor};\n  padding: 1rem;\n  outline: none;\n  border: 1px solid;\n  border-radius: 12px;\n  width: 100% !important;\n  : 0 4px 8px 0 ${({ theme, clickable }) =>\n      clickable ? transparentize(0.95, theme.shadowColor) : 'none'};\n  &:focus {\n    box-shadow: 0 0 0 1px ${({ theme }) => theme.royalBlue};\n  }\n  border-color: ${({ theme, active }) =>\n      active ? 'transparent' : theme.placeholderGray};\n`;\n\nconst OptionCard = styled(InfoCard)`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: space-between;\n    margin-top: 2rem;\n    padding: 1rem;\n`;\n\nconst OptionCardLeft = styled.div`\n    ${({ theme }) => theme.flexColumnNoWrap};\n    justify-content: center;\n    height: 100%;\n`;\n\nconst OptionCardClickable = styled(OptionCard)`\n    margin-top: 0;\n    &:hover {\n        cursor: ${({ clickable }) => (clickable ? 'pointer' : '')};\n        border: ${({ clickable, theme }) =>\n            clickable ? `1px solid ${theme.malibuBlue}` : ``};\n    }\n    opacity: ${({ disabled }) => (disabled ? '0.5' : '1')};\n`;\n\nconst GreenCircle = styled.div`\n    ${({ theme }) => theme.flexRowNoWrap}\n    justify-content: center;\n    align-items: center;\n\n    &:first-child {\n        height: 8px;\n        width: 8px;\n        margin-right: 8px;\n        background-color: ${({ theme }) => theme.connectedGreen};\n        border-radius: 50%;\n    }\n`;\n\nconst CircleWrapper = styled.div`\n    color: ${({ theme }) => theme.connectedGreen};\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`;\n\nconst HeaderText = styled.div`\n    ${({ theme }) => theme.flexRowNoWrap};\n    color: ${(props) =>\n        props.color === 'blue'\n            ? ({ theme }) => theme.royalBlue\n            : ({ theme }) => theme.textColor};\n    font-size: 1rem;\n    font-weight: 500;\n`;\n\nconst SubHeader = styled.div`\n    color: ${({ theme }) => theme.textColor};\n    margin-top: 10px;\n    font-size: 12px;\n`;\n\nconst IconWrapper = styled.div`\n    ${({ theme }) => theme.flexColumnNoWrap};\n    align-items: center;\n    justify-content: center;\n    & > img,\n    span {\n        height: ${({ size }) => (size ? size + 'px' : '24px')};\n        width: ${({ size }) => (size ? size + 'px' : '24px')};\n    }\n    ${({ theme }) => theme.mediaWidth.upToMedium`\n    align-items: flex-end;\n  `};\n`;\n\nexport default function Option({\n    link = null,\n    clickable = true,\n    size = null,\n    onClick = null,\n    color,\n    header,\n    subheader = null,\n    icon,\n    active = false,\n}) {\n    const content = (\n        <OptionCardClickable\n            onClick={onClick}\n            clickable={clickable && !active}\n            active={active}\n        >\n            <OptionCardLeft>\n                <HeaderText color={color}>\n                    {' '}\n                    {active ? (\n                        <CircleWrapper>\n                            <GreenCircle>\n                                <div />\n                            </GreenCircle>\n                        </CircleWrapper>\n                    ) : (\n                        ''\n                    )}\n                    {header}\n                </HeaderText>\n                {subheader && <SubHeader>{subheader}</SubHeader>}\n            </OptionCardLeft>\n            <IconWrapper size={size} active={active}>\n                <img src={icon} alt={'Icon'} />\n            </IconWrapper>\n        </OptionCardClickable>\n    );\n    if (link) {\n        return <Link href={link}>{content}</Link>;\n    }\n\n    return content;\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport QRCode from 'qrcode.react';\n\nconst QRCodeWrapper = styled.div`\n    ${({ theme }) => theme.flexColumnNoWrap};\n    align-items: center;\n    justify-content: center;\n    border-radius: 12px;\n    margin-bottom: 20px;\n`;\n\nexport default function WalletConnectData({ uri = '', size }) {\n    return (\n        <QRCodeWrapper>\n            {uri && (\n                <QRCode\n                    size={size}\n                    value={uri}\n                    bgColor={'white'}\n                    fgColor={'black'}\n                />\n            )}\n        </QRCodeWrapper>\n    );\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport Option from './Option';\nimport { injected, walletconnect, SUPPORTED_WALLETS } from 'provider/connectors';\nimport WalletConnectData from './WalletConnectData'\nimport { Spinner } from '../../theme';\nimport Circle from '../../assets/images/circle.svg';\nimport { darken } from 'polished';\n\nconst PendingSection = styled.div`\n  ${({ theme }) => theme.flexColumnNoWrap};\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  & > * {\n    width: 100%;\n  }\n`\n\nconst SpinnerWrapper = styled(Spinner)`\n  font-size: 4rem;\n  margin-right: 1rem;\n  svg {\n    path {\n      color: ${({ theme }) => theme.placeholderGray};\n    }\n  }\n`\n\nconst LoadingMessage = styled.div`\n  ${({ theme }) => theme.flexRowNoWrap};\n  align-items: center;\n  justify-content: flex-start;\n  border-radius: 12px;\n  margin-bottom: 20px;\n  color: ${({ theme, error }) => (error ? theme.salmonRed : 'inherit')};\n  border: 1px solid ${({ theme, error }) => (error ? theme.salmonRed : theme.placeholderGray)};\n\n  & > * {\n    padding: 1rem;\n  }\n`\n\nconst ErrorGroup = styled.div`\n  ${({ theme }) => theme.flexRowNoWrap};\n  align-items: center;\n  justify-content: flex-start;\n`\n\nconst ErrorButton = styled.div`\n  border-radius: 8px;\n  font-size: 12px;\n  color: ${({ theme }) => theme.textColor};\n  background-color: ${({ theme }) => theme.placeholderGray};\n  margin-left: 1rem;\n  padding: 0.5rem;\n  font-weight: 600;\n  user-select: none;\n\n  &:hover {\n    cursor: pointer;\n    background-color: ${({ theme }) => darken(0.1, theme.placeholderGray)};\n  }\n`\n\nconst LoadingWrapper = styled.div`\n  ${({ theme }) => theme.flexRowNoWrap};\n  align-items: center;\n  justify-content: center;\n`\n\nexport default function PendingView({ uri = '', size, connector, error = false, setPendingError, tryActivation }) {\n  const isMetamask = window.ethereum && window.ethereum.isMetaMask\n\n  return (\n    <PendingSection>\n      {!error && connector === walletconnect && <WalletConnectData size={size} uri={uri} />}\n      <LoadingMessage error={error}>\n        <LoadingWrapper>\n          {!error && <SpinnerWrapper src={Circle} />}\n          {error ? (\n            <ErrorGroup>\n              <div>Error connecting.</div>\n              <ErrorButton\n                onClick={() => {\n                  setPendingError(false)\n                  tryActivation(connector)\n                }}\n              >\n                Try Again\n              </ErrorButton>\n            </ErrorGroup>\n          ) : connector === walletconnect ? (\n            'Scan QR code with a compatible wallet...'\n          ) : (\n            'Initializing...'\n          )}\n        </LoadingWrapper>\n      </LoadingMessage>\n      {Object.keys(SUPPORTED_WALLETS).map(key => {\n        const option = SUPPORTED_WALLETS[key]\n        if (option.connector === connector) {\n          if (option.connector === injected) {\n            if (isMetamask && option.name !== 'MetaMask') {\n              return null\n            }\n            if (!isMetamask && option.name === 'MetaMask') {\n              return null\n            }\n          }\n          return (\n            <Option\n              key={key}\n              clickable={false}\n              color={option.color}\n              header={option.name}\n              subheader={option.description}\n              icon={option.iconName}\n            />\n          )\n        }\n        return null\n      })}\n    </PendingSection>\n  )\n}\n","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { isMobile } from 'react-device-detect';\nimport { observer } from 'mobx-react';\nimport { URI_AVAILABLE } from '@web3-react/walletconnect-connector'\n\nimport Modal from '../Modal';\nimport AccountDetails from '../AccountDetails';\nimport PendingView from './PendingView';\nimport Option from './Option';\nimport { usePrevious } from 'utils/helperHooks';\nimport { Link } from '../../theme';\nimport { ReactComponent as Close } from '../../assets/images/x.svg';\nimport { injected, walletconnect, SUPPORTED_WALLETS } from 'provider/connectors';\nimport { useStores } from 'contexts/storesContext';\nimport { isChainIdSupported } from '../../provider/connectors';\nimport { useActiveWeb3React } from 'provider/providerHooks';\n\nconst CloseIcon = styled.div`\n    position: absolute;\n    color: var(--header-text);\n    right: 1rem;\n    top: 14px;\n    &:hover {\n        cursor: pointer;\n        opacity: 0.6;\n    }\n`;\n\nconst CloseColor = styled(Close)`\n    path {\n        stroke: ${({ theme }) => theme.chaliceGray};\n    }\n`;\n\nconst Wrapper = styled.div`\n    ${({ theme }) => theme.flexColumnNoWrap}\n    margin: 0;\n    padding: 0;\n    width: 100%;\n    background-color: ${({ theme }) => theme.backgroundColor};\n    border-radius: 10px;\n`;\n\nconst HeaderRow = styled.div`\n    ${({ theme }) => theme.flexRowNoWrap};\n    padding: 1.5rem 1.5rem;\n    font-weight: 500;\n    color: var(--header-text);\n    ${({ theme }) => theme.mediaWidth.upToMedium`\n    padding: 1rem;\n  `};\n`;\n\nconst ContentWrapper = styled.div`\n    background-color: var(--panel-background);\n    color: var(--body-text);\n    padding: 2rem;\n    ${({ theme }) => theme.mediaWidth.upToMedium`padding: 1rem`};\n`;\n\nconst UpperSection = styled.div`\n    position: relative;\n    background-color: var(--panel-background);\n\n    h5 {\n        margin: 0;\n        margin-bottom: 0.5rem;\n        font-size: 1rem;\n        font-weight: 400;\n    }\n\n    h5:last-child {\n        margin-bottom: 0px;\n    }\n\n    h4 {\n        margin-top: 0;\n        font-weight: 500;\n    }\n`;\n\nconst Blurb = styled.div`\n    ${({ theme }) => theme.flexRowNoWrap}\n    align-items: center;\n    justify-content: center;\n    margin-top: 2rem;\n    ${({ theme }) => theme.mediaWidth.upToMedium`\n    margin: 1rem;\n    font-size: 12px;\n  `};\n`;\n\nconst OptionGrid = styled.div`\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-gap: 10px;\n    ${({ theme }) => theme.mediaWidth.upToMedium`\n    grid-template-columns: 1fr;\n    grid-gap: 10px;\n  `};\n`;\n\nconst HoverText = styled.div`\n    :hover {\n        cursor: pointer;\n    }\n`;\n\nconst WALLET_VIEWS = {\n    OPTIONS: 'options',\n    OPTIONS_SECONDARY: 'options_secondary',\n    ACCOUNT: 'account',\n    PENDING: 'pending',\n};\n\nconst WalletModal = observer(\n    ({ pendingTransactions, confirmedTransactions }) => {\n        const {\n            root: { modalStore },\n        } = useStores();\n        const { active, connector, error, activate, account, chainId } = useActiveWeb3React();\n        const [walletView, setWalletView] = useState(WALLET_VIEWS.ACCOUNT);\n        const [pendingWallet, setPendingWallet] = useState();\n        const [pendingError, setPendingError] = useState();\n        const [connectionErrorMessage, setConnectionErrorMessage] = useState();\n\n        const walletModalOpen = modalStore.walletModalVisible;\n\n        const toggleWalletModal = () => {\n            modalStore.toggleWalletModal();\n        };\n\n        // always reset to account view\n        useEffect(() => {\n            if (walletModalOpen) {\n                setPendingError(false);\n                setConnectionErrorMessage(false);\n                setWalletView(WALLET_VIEWS.ACCOUNT);\n            }\n        }, [walletModalOpen]);\n        \n        // set up uri listener for walletconnect\n        const [uri, setUri] = useState()\n        useEffect(() => {\n          const activateWC = uri => {\n            console.debug('uri',uri)\n            setUri(uri)\n            setWalletView(WALLET_VIEWS.PENDING)\n          }\n          walletconnect.on(URI_AVAILABLE, activateWC)\n          return () => {\n            walletconnect.off(URI_AVAILABLE, activateWC)\n          }\n        }, [])\n        \n        // close modal when a connection is successful\n        const activePrevious = usePrevious(active);\n        const connectorPrevious = usePrevious(connector);\n        useEffect(() => {\n            if (\n                walletModalOpen &&\n                ((active && !activePrevious) ||\n                    (connector && connector !== connectorPrevious && !error))\n            ) {\n                setWalletView(WALLET_VIEWS.ACCOUNT);\n            }\n        }, [\n            setWalletView,\n            active,\n            error,\n            connector,\n            walletModalOpen,\n            activePrevious,\n            connectorPrevious,\n        ]);\n\n        const tryActivation = async (connector) => {\n            setPendingWallet(connector); // set wallet for pending view\n            setWalletView(WALLET_VIEWS.PENDING);\n            activate(connector, undefined, true).catch((e) => {\n                setConnectionErrorMessage(e)\n                console.debug('[Activation Error]', e);\n                setPendingError(true);\n            });\n        };\n\n        // get wallets user can switch too, depending on device/browser\n        function getOptions() {\n            const isMetamask = window.ethereum && window.ethereum.isMetaMask;\n            return Object.keys(SUPPORTED_WALLETS).map((key) => {\n                const option = SUPPORTED_WALLETS[key];\n                // check for mobile options\n                if (isMobile) {\n                    if (!window.web3 && !window.ethereum && option.mobile) {\n                        return (\n                            <Option\n                                onClick={() => {\n                                    option.connector !== connector &&\n                                        !option.href &&\n                                        tryActivation(option.connector);\n                                }}\n                                key={key}\n                                active={\n                                    option.connector &&\n                                    option.connector === connector\n                                }\n                                color={option.color}\n                                link={option.href}\n                                header={option.name}\n                                subheader={null}\n                                icon={option.iconName}\n                            />\n                        );\n                    }\n                    return null;\n                }\n\n                // overwrite injected when needed\n                if (option.connector === injected) {\n                    // don't show injected if there's no injected provider\n                    if (!(window.web3 || window.ethereum)) {\n                        if (option.name === 'MetaMask') {\n                            return (\n                                <Option\n                                    key={key}\n                                    color={'#E8831D'}\n                                    header={'Install Metamask'}\n                                    subheader={null}\n                                    link={'https://metamask.io/'}\n                                    icon={require('assets/images/metamask.png')}\n                                />\n                            );\n                        } else {\n                            return null; //dont want to return install twice\n                        }\n                    }\n                    // don't return metamask if injected provider isn't metamask\n                    else if (option.name === 'MetaMask' && !isMetamask) {\n                        return null;\n                    }\n                    // likewise for generic\n                    else if (option.name === 'Injected' && isMetamask) {\n                        return null;\n                    }\n                }\n\n                // return rest of options\n                return (\n                    !isMobile &&\n                    !option.mobileOnly && (\n                        <Option\n                            onClick={() => {\n                                option.connector === connector\n                                    ? setWalletView(WALLET_VIEWS.ACCOUNT)\n                                    : !option.href &&\n                                      tryActivation(option.connector);\n                            }}\n                            key={key}\n                            active={option.connector === connector}\n                            color={option.color}\n                            link={option.href}\n                            header={option.name}\n                            subheader={null} //use option.descriptio to bring back multi-line\n                            icon={option.iconName}\n                        />\n                    )\n                );\n            });\n        }\n\n        function getModalContent() {\n            if (connectionErrorMessage) {\n                return (\n                    <UpperSection>\n                        <CloseIcon onClick={toggleWalletModal}>\n                            <CloseColor alt={'close icon'} />\n                        </CloseIcon>\n                        <HeaderRow>\n                            {connectionErrorMessage.toString().indexOf('UnsupportedChainIdError') >= 0\n                                ? 'Wrong Network'\n                                : 'Error connecting'}\n                        </HeaderRow>\n                        <ContentWrapper>\n                            {connectionErrorMessage.toString().indexOf('UnsupportedChainIdError') >= 0 ? (\n                                <h5>\n                                    Please connect to the main Ethereum network.\n                                </h5>\n                            ) : (\n                                'Error connecting. Try refreshing the page.'\n                            )}\n                        </ContentWrapper>\n                    </UpperSection>\n                );\n            }\n            if (\n                account &&\n                !isChainIdSupported(chainId) &&\n                walletView === WALLET_VIEWS.ACCOUNT\n            ) {\n                return (\n                    <UpperSection>\n                        <CloseIcon onClick={toggleWalletModal}>\n                            <CloseColor alt={'close icon'} />\n                        </CloseIcon>\n                        <HeaderRow>{'Wrong Network'}</HeaderRow>\n                        <ContentWrapper>\n                            <h5>\n                                Please connect to the main Ethereum network.\n                            </h5>\n                        </ContentWrapper>\n                    </UpperSection>\n                );\n            }\n            if (account && walletView === WALLET_VIEWS.ACCOUNT) {\n                return (\n                    <AccountDetails\n                        toggleWalletModal={toggleWalletModal}\n                        pendingTransactions={pendingTransactions || []}\n                        confirmedTransactions={confirmedTransactions || []}\n                        openOptions={() => setWalletView(WALLET_VIEWS.OPTIONS)}\n                    />\n                );\n            }\n            return (\n                <UpperSection>\n                    <CloseIcon onClick={toggleWalletModal}>\n                        <CloseColor alt={'close icon'} />\n                    </CloseIcon>\n                    {walletView !== WALLET_VIEWS.ACCOUNT ? (\n                        <HeaderRow color=\"blue\">\n                            <HoverText\n                                onClick={() => {\n                                    setPendingError(false);\n                                    setWalletView(WALLET_VIEWS.ACCOUNT);\n                                }}\n                            >\n                                Back\n                            </HoverText>\n                        </HeaderRow>\n                    ) : (\n                        <HeaderRow>\n                            <HoverText>Connect to a wallet</HoverText>\n                        </HeaderRow>\n                    )}\n                    <ContentWrapper>\n                        {walletView === WALLET_VIEWS.PENDING ? (\n                            <PendingView\n                                uri={uri}\n                                size={220}\n                                connector={pendingWallet}\n                                error={pendingError}\n                                setPendingError={setPendingError}\n                                tryActivation={tryActivation}\n                            />\n                        ) : (\n                            <OptionGrid>{getOptions()}</OptionGrid>\n                        )}\n                        {walletView !== WALLET_VIEWS.PENDING && (\n                            <Blurb>\n                                <span style={{ color: '#90a4ae' }}>\n                                    New to Ethereum? &nbsp;\n                                </span>{' '}\n                                <Link href=\"https://ethereum.org/use/#3-what-is-a-wallet-and-which-one-should-i-use\">\n                                    Learn more about wallets\n                                </Link>\n                            </Blurb>\n                        )}\n                    </ContentWrapper>\n                </UpperSection>\n            );\n        }\n\n        return (\n            <Modal\n                style={{ userSelect: 'none' }}\n                isOpen={walletModalOpen}\n                onDismiss={toggleWalletModal}\n                minHeight={null}\n                maxHeight={90}\n            >\n                <Wrapper>{getModalContent()}</Wrapper>\n            </Modal>\n        );\n    }\n);\n\nexport default WalletModal;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst Pill = styled.div`\n    background: #FFFFFF;\n    border: 1px solid #E1E3E7;\n    box-sizing: border-box;\n    box-shadow: 0px 0px 2px rgba(0, 0, 0, 0.15);\n    border-radius: 6px;\n\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    text-align: center;\n\n    font-family: var(--roboto);\n    color: var(--dark-text-gray);\n    font-style: normal;\n    font-weight: 500;\n    font-size: 15px;\n    line-height: 16px;\n    letter-spacing: 0.2px;\n    cursor: pointer;\n\n    height: 40px;\n`;\n\nconst Web3PillBox = ({ children, onClick }) => {\n    return <Pill onClick={onClick}>{children}</Pill>;\n};\n\nexport default Web3PillBox;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { observer } from 'mobx-react';\nimport { shortenAddress } from 'utils/address';\nimport { formatBalance } from 'utils/token';\nimport WalletModal from 'components/WalletModal';\nimport {\n    injected,\n    isChainIdSupported,\n    walletconnect\n} from 'provider/connectors';\nimport Identicon from '../Identicon';\nimport { useStores } from '../../contexts/storesContext';\nimport Web3PillBox from '../Web3PillBox';\n\n\nconst WrongNetworkButton = styled.button`\n    width: 142px;\n    font-size: 0.9rem;\n    justify-content: center;\n    align-items: center;\n    padding: 0.5rem;\n    border: 1px solid var(--wrong-network-border);\n    background-color: var(--wrong-network);\n    color: var(--white);\n    \n    box-shadow: 0px 0px 2px rgba(0, 0, 0, 0.15);\n    font-size:0.9rem;\n    font-weight:500;\n    box-sizing: border-box;\n    border-radius: 6px;\n    user-select: none;\n    &:hover {\n        cursor: pointer;\n        border: 1px solid var(--wrong-network-border-hover);\n        background-color: var(--wrong-network-hover);\n    }\n    :focus {\n        outline: none;\n    }\n`;\n\nconst Web3ConnectStatus = observer((props) => {\n\n    const ConnectButton = styled.div`\n        height: 38px;\n        width: ${props.wide ? \"unset\" : \"154px\"}\n        display: flex;\n        justify-content: center;\n        align-items: center;\n\n        box-shadow: 0px 0px 2px rgba(0, 0, 0, 0.15);\n        font-size: 0.9rem;\n        font-weight: 500;\n        line-height: 18px;\n        letter-spacing: 1px;\n\n        cursor: pointer;\n        user-select: none;\n        \n        padding: 0.5rem;\n        border-image: initial;\n        background: var(--blue-text);\n        color: var(--white);\n        border: 1px solid var(--active-button-border);\n        box-sizing: border-box;\n        border-radius: 6px;\n        &:hover{\n            cursor: pointer;\n            background: var(--blue-onHover);\n            border: 1px solid var(--blue-onHover-border);\n        }\n\n    `;\n    \n    const {\n        root: { modalStore, transactionStore, providerStore, tokenStore },\n    } = useStores();\n    const {\n        chainId,\n        account,\n        connector,\n        error,\n        library\n    } = providerStore.getActiveWeb3React();\n    let pending = undefined;\n    let confirmed = undefined;\n\n    if (chainId && account && isChainIdSupported(chainId)) {\n        pending = transactionStore.getPendingTransactions(account);\n        confirmed = transactionStore.getConfirmedTransactions(account);\n    }\n\n    const toggleWalletModal = () => {\n        modalStore.toggleWalletModal();\n    };\n\n    // handle the logo we want to show with the account\n    function getStatusIcon() {\n        if (connector === injected) {\n            return <Identicon />;\n        } else if (connector === walletconnect) {\n            return <img alt=\"walletconnect\" src={require(\"assets/images/walletConnectIcon.svg\")} />;\n        }\n    }\n\n    function getWeb3Status() {\n        console.debug('[GetWeb3Status]', {\n            account,\n            chainId: chainId,\n            error,\n        });\n        // Wrong network\n        if (account && chainId && !isChainIdSupported(chainId)) {\n            return (\n                <WrongNetworkButton onClick={toggleWalletModal}>\n                    Wrong Network\n                </WrongNetworkButton>\n            );\n        } else if (account) {\n          const ETHBalance = tokenStore.getEtherBalance(account);\n          return (\n            <Web3PillBox onClick={toggleWalletModal}>\n              <span style={{color: \"#536DFE\", lineHeight: \"38px\",padding: \"0px 10px\"}}>\n                {ETHBalance ? formatBalance(ETHBalance) : '...'} ETH\n              </span>\n              <span style={{\n                backgroundColor:\"#F1F3F5\",\n                color:\"#616161\",\n                height:\"38px\",\n                borderRadius:\"6px\",\n                padding: \"0px 10px\",\n                lineHeight: \"38px\"\n              }}>{shortenAddress(account)}</span>\n            </Web3PillBox>\n          );\n        } else if (error) {\n            return (\n                <WrongNetworkButton onClick={toggleWalletModal}>\n                    Wrong Network\n                </WrongNetworkButton>\n            );\n        } else {\n            return (\n                <ConnectButton\n                    onClick={toggleWalletModal}\n                    active={true}\n                    >\n                    {props.text}\n                </ConnectButton>\n                \n            );\n        }\n    }\n\n    return (\n        <>\n            {getWeb3Status()}\n            <WalletModal\n                pendingTransactions={pending}\n                confirmedTransactions={confirmed}\n            />\n        </>\n    );\n});\n\nexport default Web3ConnectStatus;\n","import React from 'react';\nimport { observer } from 'mobx-react';\nimport styled from 'styled-components';\nimport Web3ConnectStatus from '../Web3ConnectStatus';\n\nconst FormWrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: space-between;\n`;\n\nconst InfoRow = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    height: 166px;\n\n`;\n\nconst DisconnectedMessage = styled.div`\n    font-style: normal;\n    font-weight: 500;\n    font-size: 16px;\n    align-items: center;\n    text-align: center;\n    letter-spacing: 0.4px;\n    color: #758AFE;\n`;\n\nconst SellDisconnected = observer((props) => {\n\n    return (\n        <FormWrapper>\n            <InfoRow>\n                <DisconnectedMessage>Connect an Ethereum Wallet to get started</DisconnectedMessage>\n            </InfoRow>\n            <Web3ConnectStatus wide text=\"CONNECT WALLET\"/>\n        </FormWrapper>\n    );\n});\n\nexport default SellDisconnected;\n","import React from 'react';\nimport { observer } from 'mobx-react';\nimport styled from 'styled-components';\nimport { useStores } from '../contexts/storesContext';\nimport { formatBalance } from '../utils/token';\n\nconst CryptoInfoWrapper = styled.div`\n    padding-bottom: 12px;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    border-bottom: 1px solid var(--line-gray);\n    background-color: #F1F3F5;\n    border-radius: 6px;\n    padding: 10px;\n    margin-top: 10px;\n`;\n\nconst InfoRow = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    padding-bottom: 12px;\n    line-height: 24px;\n    color: var(--dark-text-gray);\n`;\n\nconst LogoAndText = styled.div`\n    display: flex;\n    flex-direction: row;\n`;\n\nconst LogoText = styled.div`\n    margin-left: 12px;\n    color: var(--light-text-gray);\n`;\n\nconst BalanceInfo = observer(() => {\n    const {\n        root: { providerStore, tokenStore, configStore },\n    } = useStores();\n\n    const { account } = providerStore.getActiveWeb3React();\n\n    let ETHBalance,\n        DXDBalance = undefined;\n\n    if (account) {\n        ETHBalance = tokenStore.getEtherBalance(account);\n        DXDBalance = tokenStore.getBalance(\n            configStore.getTokenAddress(),\n            account\n        );\n    }\n\n    const ETHBalanceDisplay = ETHBalance ? formatBalance(ETHBalance) : '0.000';\n    const DXDBalanceDisplay = DXDBalance ? formatBalance(DXDBalance) : '0.000';\n\n\t  return(\n        <CryptoInfoWrapper>\n            <span style={\n              {fontFamily: \"roboto\", fontSize: \"11px\", color: \"#9AA7CA\", marginBottom: \"10px\"}\n            }>YOUR HOLDINGS</span>\n            <InfoRow>\n                <LogoAndText>\n                    <img src={require('assets/images/ether.svg')}></img>\n                    <LogoText>Ether</LogoText>\n                </LogoAndText>\n                <div>{ETHBalanceDisplay} ETH</div>\n            </InfoRow>\n            <InfoRow>\n                <LogoAndText>\n                    <img src={require('assets/images/dxdao-circle.svg')}></img>\n                    <LogoText>DXdao</LogoText>\n                </LogoAndText>\n                <div>{DXDBalanceDisplay} DXD</div>\n            </InfoRow>\n        </CryptoInfoWrapper>\n\t);\n});\n\nexport default BalanceInfo;\n","import React from 'react';\nimport { observer } from 'mobx-react';\nimport styled from 'styled-components';\nimport { useStores } from '../contexts/storesContext';\n\nconst TabWrapper = styled.div`\n    display: flex;\n    flex-direction: row;\n`;\n\nconst ActiveTab = styled.div`\n    color: var(--blue-text);\n    width: 50%;\n    text-align: center;\n    border-left: ${(props) =>\n        props.left ? '1px solid var(--medium-gray)' : 'none'};\n    padding: 15px 0px;\n    cursor: pointer;\n`;\n\nconst InactiveTab = styled.div`\n    color: var(--dark-text-gray);\n    width: 50%;\n    text-align: center;\n    background-color: var(--light-gray);\n    border-left: ${(props) =>\n        props.left ? '1px solid var(--medium-gray)' : 'none'};\n    border-bottom: 1px solid var(--medium-gray);\n    border-radius: ${(props) => \n        props.left ? '0px 4px 0px 0px' : '4px 0px 0px 0px'};\n    padding: 15px 0px;\n    cursor: pointer;\n`;\n\nconst BuySellTabs = observer(() => {\n    const {\n        root: { configStore, datStore, tradingStore },\n    } = useStores();\n\n    const activeTab = tradingStore.activeTab;\n    const TabButton = ({tabType, children }) => {\n        if (activeTab === tabType) {\n            return (\n                <ActiveTab left={activeTab === 'sell'} >\n                    {children}\n                </ActiveTab>\n            );\n        } else {\n            return (\n                <InactiveTab\n                  left={activeTab === 'buy'}\n                  onClick={() => { tradingStore.setActiveTab(tabType); }}\n                >\n                    {children}\n                </InactiveTab>\n            );\n        }\n    };\n\n\treturn(\n        <TabWrapper>\n            <TabButton tabType={'buy'}>\n                Buy\n            </TabButton>\n            <TabButton tabType={'sell'}>\n                {datStore.isInitPhase(configStore.getTokenAddress()) ? \"Withdraw\" : \"Sell\"}\n            </TabButton>\n        </TabWrapper>\n\t);\n});\n\nexport default BuySellTabs;\n","import React from 'react';\nimport { observer } from 'mobx-react';\nimport styled from 'styled-components';\nimport BuyForm from './Buy/BuyForm';\nimport EnableForm from './Enable/EnableForm';\nimport SellForm from './Sell/SellForm';\nimport SellDisconnected from './Sell/SellDisconnected';\nimport { useStores } from '../contexts/storesContext';\nimport BalanceInfo from './BalanceInfo';\nimport BuySellTabs from './BuySellTabs';\nimport { TransactionState } from 'stores/TradingForm';\n\nconst BuySellWrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    ${({ theme }) => theme.mediaWidth.upToMedium`\n      width: calc(66%);\n      margin: 0;\n    `};\n    width: calc(30%);\n    background-color: white;\n    border: 1px solid #EBE9F8;\n    box-sizing: border-box;\n    box-shadow: 0px 3px 10px rgba(14, 0, 135, 0.04), 0px 14px 32px rgba(14, 0, 135, 0.04);\n    border-radius: 8px;\n    justify-content: space-between;\n    margin-left:10px;\n`;\n\nconst ContentWrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    padding: 5px;\n`;\n\nconst BuySell = observer(() => {\n    const {\n        root: { tradingStore, providerStore },\n    } = useStores();\n\n    const { account } = providerStore.getActiveWeb3React();\n    const incrementTKN = tradingStore.enableTKNState;\n    const incrementDXD = tradingStore.enableDXDState;\n    let isBuy = tradingStore.activeTab === 'buy';\n\n    const CurrentForm = ({isBuy}) => {\n        if (isBuy) {\n                return <BuyForm />;\n        } else {\n\n            if (!account) {\n                return <SellDisconnected />;\n            } else if (tradingStore.enableDXDState !== TransactionState.APPROVED) {\n                return <EnableForm />;\n            } else {\n                return <SellForm />;\n            }\n        }\n    };\n\n    return (\n        <BuySellWrapper>\n          <BuySellTabs isBuy={isBuy} />\n          <ContentWrapper>\n            <CurrentForm\n              isBuy={isBuy}\n              incrementTKN={incrementTKN}\n              incrementDXD={incrementDXD}\n            />\n            <BalanceInfo />\n          </ContentWrapper>\n        </BuySellWrapper>\n    );\n});\n\nexport default BuySell;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { etherscanAddress, etherscanToken } from 'utils/etherscan';\nimport { useStores } from '../contexts/storesContext';\n\nconst FooterWrapper = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    width: 100%;\n    padding: 24px 0px 32px;\n    color: var(--footer-text-gray);\n`;\n\nconst LeftFooter = styled.div`\n    display: flex;\n    flex-direction: row;\n`;\n\nconst RighFooter = styled.div`\n    display: flex;\n    flex-direction: row;\n`;\n\nconst FooterItem = styled.div`\n    a {\n        text-decoration: none;\n        color: var(--footer-text-gray);\n    }\n    a:hover {\n        color: var(--text-gray-onHover);\n    }a\n    \n`;\n\nconst FooterDivider = styled.div`\n    background: var(--footer-text-gray);\n    width: 4px;\n    height: 4px;\n    border-radius: 2px;\n    line-height: 24px;\n    margin: 7px;\n`;\n\nconst LogoWrapper = styled.div`\n    width: 20px;\n    padding-left: 8px;\n`;\n\nconst FooterLogo = styled.img`\n    :hover {\n        filter: invert(48%) sepia(13%) saturate(281%) hue-rotate(154deg)\n            brightness(97%) contrast(86%);\n    }\n`;\n\nconst Footer = () => {\n    const {\n        root: {providerStore, configStore},\n    } = useStores();\n\n    let chainId = providerStore.getActiveWeb3React().chainId;\n    let proxyContract = configStore.getNetworkConfig().DAT;\n    let contract = configStore.getNetworkConfig().implementationAddress;\n    return (\n        <FooterWrapper>\n            <LeftFooter>\n                <FooterItem>\n                    <a\n                        href={\n                          'https://github.com/levelkdev/openraise-dapp/tree/v'+process.env.REACT_APP_VERSION\n                        }\n                        target=\"#\"\n                    >\n                        Version {process.env.REACT_APP_VERSION}\n                    </a>\n                </FooterItem>\n                <FooterDivider></FooterDivider>\n                <FooterItem>\n                    {etherscanToken(chainId, \"Token Contract\", proxyContract, false)}\n                </FooterItem>\n                <FooterDivider></FooterDivider>\n                <FooterItem>\n                    <a href=\"https://daotalk.org/c/daos/dx-dao\" target=\"#\">\n                        Forum\n                    </a>\n                </FooterItem>\n                <FooterDivider></FooterDivider>\n                <FooterItem>\n                    <a\n                        href=\"https://alchemy.daostack.io/dao/0x519b70055af55a007110b4ff99b0ea33071c720a\"\n                        target=\"#\"\n                    >\n                        Alchemy\n                    </a>\n                </FooterItem>\n                <FooterDivider></FooterDivider>\n                <FooterItem>\n                    <a\n                        href=\"https://dxdao.eth.link/#/faq\"\n                        target=\"#\"\n                    >\n                        FAQ\n                    </a>\n                </FooterItem>\n            </LeftFooter>\n            <RighFooter>\n                <LogoWrapper>\n                    <a href=\"https://twitter.com/dxdao_\" target=\"#\">\n                        <FooterLogo src={require('assets/images/twitter.svg')}></FooterLogo>\n                    </a>\n                </LogoWrapper>\n                <LogoWrapper>\n                    <a href=\"https://www.reddit.com/r/dxdao/\" target=\"#\">\n                        <FooterLogo src={require('assets/images/reddit.svg')}></FooterLogo>\n                    </a>\n                </LogoWrapper>\n                <LogoWrapper>\n                    <a href=\"https://t.me/dxDAO\" target=\"#\">\n                        <FooterLogo src={require('assets/images/telegram.svg')}></FooterLogo>\n                    </a>\n                </LogoWrapper>\n            </RighFooter>\n        </FooterWrapper>\n    );\n};\n\nexport default Footer;\n","import React from 'react';\nimport { withRouter } from 'react-router-dom';\nimport styled from 'styled-components';\nimport Web3ConnectStatus from './Web3ConnectStatus';\n\nconst NavWrapper = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    width: 100%;\n    padding: 50px 0px 40px 0px;\n`;\n\nconst LeftNav = styled.div`\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n`;\n\nconst MenuItem = styled.div`\n    display: flex;\n    align-items: center;\n    color: var(--nav-text-light);\n    font-size: 16px;\n    line-height: 19px;\n    cursor: pointer;\n`;\n\nconst NavBar = () => {\n    const NavItem = withRouter(\n        ({ option, route, history, location, children }) => {\n            return (\n                <MenuItem\n                    onClick={() => {\n                        history.push(route);\n                    }}\n                >\n                    {children}\n                </MenuItem>\n            );\n        }\n    );\n\n    return (\n        <NavWrapper>\n            <LeftNav>\n                <NavItem route=\"/\">\n                    <img alt=\"dxdao\" src={require(\"assets/images/dxdao-dark.svg\")}/>\n                    <span\n                      style={{margin: \"0px 10px\", fontSize: \"25px\"}}\n                    > | </span>\n                    <span\n                      style={{\n                        fontWeight: \"400\",\n                        fontSize: \"25px\",\n                        color: \"black\",\n                        style: \"normal\",\n                        letterSpacing: \"1px\"\n                      }}\n                    >DXTrust</span>\n                </NavItem>\n            </LeftNav>\n            <Web3ConnectStatus text=\"Connect Wallet\" />\n        </NavWrapper>\n    );\n};\n\nexport default NavBar;\n","import React from 'react';\nimport BondingCurveChart from '../components/BondingCurveChart/BondingCurveChart';\nimport CurveInformation from '../components/CurveInformation';\nimport TradeHistory from '../components/TradeHistory';\nimport BuySell from '../components/BuySell';\nimport styled from 'styled-components';\nimport Footer from '../components/Footer';\nimport NavBar from '../components/NavBar';\n\n\nconst BondingCurveWrapper = styled.div`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    justify-content: center;\n    max-width: 900px;\n`;\n\nconst AlertWrapper = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: start;\n    width: 100%;\n    background: white;\n    border: ${(props) => props.red === \"true\" ? \"1px solid var(--dangerous-alert)\": \"1px solid var(--medium-gray)\"};\n    padding: 0px 24px;\n    margin-bottom: ${(props) => props.red === \"true\" ? \"24px\": \"16px\"};\n    border-radius: 4px;\n    display: none;\n`;\n\nconst AlertText = styled.div`\n    color: ${(props) => props.red === \"true\" ? \"var(--dangerous-alert)\": \"var(--dark-text-gray)\"}; \n    font-weight: 400;\n    padding: 20px 0px 20px 16px;\n    letter-spacing: 0.6px;\n    display: none;\n`;\n\nconst DangerIcon = styled.img`\n    filter: invert(36%) sepia(43%) saturate(2590%) hue-rotate(336deg) brightness(82%) contrast(102%);\n`;\n\nconst BondingCurve = () => {\n    return (\n      <BondingCurveWrapper>\n        <NavBar />\n        <AlertWrapper>\n          <img alt=\"dangerous\" src={require(\"assets/images/dangerous.svg\")}/>\n          <AlertText>Secondary Markets may have better offers!</AlertText>\n        </AlertWrapper>\n        <AlertWrapper red=\"true\">\n          <DangerIcon src={require(\"assets/images/dangerous.svg\")}/>\n          <AlertText red=\"true\">Warning! The buyback reserve is low which results in a very low DXD sell price.</AlertText>\n        </AlertWrapper>\n        <BondingCurveChart />\n        <BuySell />\n        <CurveInformation />\n        <TradeHistory />\n        <Footer />\n      </BondingCurveWrapper>\n    );\n};\n\nexport default BondingCurve;\n","import React from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport \"typeface-montserrat\";\nimport \"typeface-roboto\";\nimport './App.css';\nimport Web3ReactManager from 'components/Web3ReactManager';\nimport BondingCurveContainer from './containers/BondingCurveContainer';\n\nconst App = () => {\n  return (\n    <HashRouter>\n      <Switch>\n        <Route exact path=\"/\">\n          <div className=\"body-container\">\n            <Web3ReactManager>\n              <BondingCurveContainer />\n            </Web3ReactManager>\n          </div>\n        </Route>\n      </Switch>\n    </HashRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker === null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType !== null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createWeb3ReactRoot } from '@web3-react/core';\nimport 'index.css';\nimport App from 'App';\nimport * as serviceWorker from './serviceWorker';\nimport { web3ContextNames } from 'provider/connectors';\nimport ThemeProvider, { GlobalStyle } from './theme';\nimport Web3 from 'web3';\n\nconst Web3ProviderInjected = createWeb3ReactRoot(web3ContextNames.injected);\n\nfunction getLibrary(provider) {\n    return new Web3(provider);\n}\n\nconst Root = (\n      <Web3ProviderInjected getLibrary={getLibrary}>\n          <ThemeProvider>\n              <>\n                  <GlobalStyle />\n                  <App />\n              </>\n          </ThemeProvider>\n      </Web3ProviderInjected>\n);\nReactDOM.render(Root, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/reddit.svg\";","module.exports = __webpack_public_path__ + \"static/media/tick.svg\";","module.exports = __webpack_public_path__ + \"static/media/ether.svg\";","module.exports = __webpack_public_path__ + \"static/media/telegram.svg\";","module.exports = __webpack_public_path__ + \"static/media/twitter.svg\";","module.exports = __webpack_public_path__ + \"static/media/dxdao-circle.svg\";","module.exports = __webpack_public_path__ + \"static/media/checkbox_758AFE.svg\";","module.exports = __webpack_public_path__ + \"static/media/circle.svg\";","module.exports = __webpack_public_path__ + \"static/media/metamask.png\";","module.exports = __webpack_public_path__ + \"static/media/checkbox-circle.svg\";","module.exports = __webpack_public_path__ + \"static/media/bolt.svg\";","module.exports = __webpack_public_path__ + \"static/media/walletConnectIcon.svg\";","module.exports = __webpack_public_path__ + \"static/media/dxdao-dark.svg\";"],"sourceRoot":""}